// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/networkadapter"
)

// NetworkAdapterCreate is the builder for creating a NetworkAdapter entity.
type NetworkAdapterCreate struct {
	config
	mutation *NetworkAdapterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (nac *NetworkAdapterCreate) SetName(s string) *NetworkAdapterCreate {
	nac.mutation.SetName(s)
	return nac
}

// SetMACAddress sets the "mac_address" field.
func (nac *NetworkAdapterCreate) SetMACAddress(s string) *NetworkAdapterCreate {
	nac.mutation.SetMACAddress(s)
	return nac
}

// SetAddresses sets the "addresses" field.
func (nac *NetworkAdapterCreate) SetAddresses(s string) *NetworkAdapterCreate {
	nac.mutation.SetAddresses(s)
	return nac
}

// SetSubnet sets the "subnet" field.
func (nac *NetworkAdapterCreate) SetSubnet(s string) *NetworkAdapterCreate {
	nac.mutation.SetSubnet(s)
	return nac
}

// SetNillableSubnet sets the "subnet" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableSubnet(s *string) *NetworkAdapterCreate {
	if s != nil {
		nac.SetSubnet(*s)
	}
	return nac
}

// SetDefaultGateway sets the "default_gateway" field.
func (nac *NetworkAdapterCreate) SetDefaultGateway(s string) *NetworkAdapterCreate {
	nac.mutation.SetDefaultGateway(s)
	return nac
}

// SetNillableDefaultGateway sets the "default_gateway" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDefaultGateway(s *string) *NetworkAdapterCreate {
	if s != nil {
		nac.SetDefaultGateway(*s)
	}
	return nac
}

// SetDNSServers sets the "dns_servers" field.
func (nac *NetworkAdapterCreate) SetDNSServers(s string) *NetworkAdapterCreate {
	nac.mutation.SetDNSServers(s)
	return nac
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDNSServers(s *string) *NetworkAdapterCreate {
	if s != nil {
		nac.SetDNSServers(*s)
	}
	return nac
}

// SetDNSDomain sets the "dns_domain" field.
func (nac *NetworkAdapterCreate) SetDNSDomain(s string) *NetworkAdapterCreate {
	nac.mutation.SetDNSDomain(s)
	return nac
}

// SetNillableDNSDomain sets the "dns_domain" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDNSDomain(s *string) *NetworkAdapterCreate {
	if s != nil {
		nac.SetDNSDomain(*s)
	}
	return nac
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (nac *NetworkAdapterCreate) SetDhcpEnabled(b bool) *NetworkAdapterCreate {
	nac.mutation.SetDhcpEnabled(b)
	return nac
}

// SetNillableDhcpEnabled sets the "dhcp_enabled" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDhcpEnabled(b *bool) *NetworkAdapterCreate {
	if b != nil {
		nac.SetDhcpEnabled(*b)
	}
	return nac
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (nac *NetworkAdapterCreate) SetDhcpLeaseObtained(t time.Time) *NetworkAdapterCreate {
	nac.mutation.SetDhcpLeaseObtained(t)
	return nac
}

// SetNillableDhcpLeaseObtained sets the "dhcp_lease_obtained" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDhcpLeaseObtained(t *time.Time) *NetworkAdapterCreate {
	if t != nil {
		nac.SetDhcpLeaseObtained(*t)
	}
	return nac
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (nac *NetworkAdapterCreate) SetDhcpLeaseExpired(t time.Time) *NetworkAdapterCreate {
	nac.mutation.SetDhcpLeaseExpired(t)
	return nac
}

// SetNillableDhcpLeaseExpired sets the "dhcp_lease_expired" field if the given value is not nil.
func (nac *NetworkAdapterCreate) SetNillableDhcpLeaseExpired(t *time.Time) *NetworkAdapterCreate {
	if t != nil {
		nac.SetDhcpLeaseExpired(*t)
	}
	return nac
}

// SetSpeed sets the "speed" field.
func (nac *NetworkAdapterCreate) SetSpeed(s string) *NetworkAdapterCreate {
	nac.mutation.SetSpeed(s)
	return nac
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (nac *NetworkAdapterCreate) SetOwnerID(id string) *NetworkAdapterCreate {
	nac.mutation.SetOwnerID(id)
	return nac
}

// SetOwner sets the "owner" edge to the Agent entity.
func (nac *NetworkAdapterCreate) SetOwner(a *Agent) *NetworkAdapterCreate {
	return nac.SetOwnerID(a.ID)
}

// Mutation returns the NetworkAdapterMutation object of the builder.
func (nac *NetworkAdapterCreate) Mutation() *NetworkAdapterMutation {
	return nac.mutation
}

// Save creates the NetworkAdapter in the database.
func (nac *NetworkAdapterCreate) Save(ctx context.Context) (*NetworkAdapter, error) {
	return withHooks(ctx, nac.sqlSave, nac.mutation, nac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nac *NetworkAdapterCreate) SaveX(ctx context.Context) *NetworkAdapter {
	v, err := nac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nac *NetworkAdapterCreate) Exec(ctx context.Context) error {
	_, err := nac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nac *NetworkAdapterCreate) ExecX(ctx context.Context) {
	if err := nac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nac *NetworkAdapterCreate) check() error {
	if _, ok := nac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`openuem_ent: missing required field "NetworkAdapter.name"`)}
	}
	if _, ok := nac.mutation.MACAddress(); !ok {
		return &ValidationError{Name: "mac_address", err: errors.New(`openuem_ent: missing required field "NetworkAdapter.mac_address"`)}
	}
	if _, ok := nac.mutation.Addresses(); !ok {
		return &ValidationError{Name: "addresses", err: errors.New(`openuem_ent: missing required field "NetworkAdapter.addresses"`)}
	}
	if _, ok := nac.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`openuem_ent: missing required field "NetworkAdapter.speed"`)}
	}
	if len(nac.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "NetworkAdapter.owner"`)}
	}
	return nil
}

func (nac *NetworkAdapterCreate) sqlSave(ctx context.Context) (*NetworkAdapter, error) {
	if err := nac.check(); err != nil {
		return nil, err
	}
	_node, _spec := nac.createSpec()
	if err := sqlgraph.CreateNode(ctx, nac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nac.mutation.id = &_node.ID
	nac.mutation.done = true
	return _node, nil
}

func (nac *NetworkAdapterCreate) createSpec() (*NetworkAdapter, *sqlgraph.CreateSpec) {
	var (
		_node = &NetworkAdapter{config: nac.config}
		_spec = sqlgraph.NewCreateSpec(networkadapter.Table, sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt))
	)
	_spec.OnConflict = nac.conflict
	if value, ok := nac.mutation.Name(); ok {
		_spec.SetField(networkadapter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nac.mutation.MACAddress(); ok {
		_spec.SetField(networkadapter.FieldMACAddress, field.TypeString, value)
		_node.MACAddress = value
	}
	if value, ok := nac.mutation.Addresses(); ok {
		_spec.SetField(networkadapter.FieldAddresses, field.TypeString, value)
		_node.Addresses = value
	}
	if value, ok := nac.mutation.Subnet(); ok {
		_spec.SetField(networkadapter.FieldSubnet, field.TypeString, value)
		_node.Subnet = value
	}
	if value, ok := nac.mutation.DefaultGateway(); ok {
		_spec.SetField(networkadapter.FieldDefaultGateway, field.TypeString, value)
		_node.DefaultGateway = value
	}
	if value, ok := nac.mutation.DNSServers(); ok {
		_spec.SetField(networkadapter.FieldDNSServers, field.TypeString, value)
		_node.DNSServers = value
	}
	if value, ok := nac.mutation.DNSDomain(); ok {
		_spec.SetField(networkadapter.FieldDNSDomain, field.TypeString, value)
		_node.DNSDomain = value
	}
	if value, ok := nac.mutation.DhcpEnabled(); ok {
		_spec.SetField(networkadapter.FieldDhcpEnabled, field.TypeBool, value)
		_node.DhcpEnabled = value
	}
	if value, ok := nac.mutation.DhcpLeaseObtained(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseObtained, field.TypeTime, value)
		_node.DhcpLeaseObtained = value
	}
	if value, ok := nac.mutation.DhcpLeaseExpired(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseExpired, field.TypeTime, value)
		_node.DhcpLeaseExpired = value
	}
	if value, ok := nac.mutation.Speed(); ok {
		_spec.SetField(networkadapter.FieldSpeed, field.TypeString, value)
		_node.Speed = value
	}
	if nodes := nac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkadapter.OwnerTable,
			Columns: []string{networkadapter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_networkadapters = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NetworkAdapter.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NetworkAdapterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (nac *NetworkAdapterCreate) OnConflict(opts ...sql.ConflictOption) *NetworkAdapterUpsertOne {
	nac.conflict = opts
	return &NetworkAdapterUpsertOne{
		create: nac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nac *NetworkAdapterCreate) OnConflictColumns(columns ...string) *NetworkAdapterUpsertOne {
	nac.conflict = append(nac.conflict, sql.ConflictColumns(columns...))
	return &NetworkAdapterUpsertOne{
		create: nac,
	}
}

type (
	// NetworkAdapterUpsertOne is the builder for "upsert"-ing
	//  one NetworkAdapter node.
	NetworkAdapterUpsertOne struct {
		create *NetworkAdapterCreate
	}

	// NetworkAdapterUpsert is the "OnConflict" setter.
	NetworkAdapterUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *NetworkAdapterUpsert) SetName(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateName() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldName)
	return u
}

// SetMACAddress sets the "mac_address" field.
func (u *NetworkAdapterUpsert) SetMACAddress(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldMACAddress, v)
	return u
}

// UpdateMACAddress sets the "mac_address" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateMACAddress() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldMACAddress)
	return u
}

// SetAddresses sets the "addresses" field.
func (u *NetworkAdapterUpsert) SetAddresses(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldAddresses, v)
	return u
}

// UpdateAddresses sets the "addresses" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateAddresses() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldAddresses)
	return u
}

// SetSubnet sets the "subnet" field.
func (u *NetworkAdapterUpsert) SetSubnet(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldSubnet, v)
	return u
}

// UpdateSubnet sets the "subnet" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateSubnet() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldSubnet)
	return u
}

// ClearSubnet clears the value of the "subnet" field.
func (u *NetworkAdapterUpsert) ClearSubnet() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldSubnet)
	return u
}

// SetDefaultGateway sets the "default_gateway" field.
func (u *NetworkAdapterUpsert) SetDefaultGateway(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDefaultGateway, v)
	return u
}

// UpdateDefaultGateway sets the "default_gateway" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDefaultGateway() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDefaultGateway)
	return u
}

// ClearDefaultGateway clears the value of the "default_gateway" field.
func (u *NetworkAdapterUpsert) ClearDefaultGateway() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDefaultGateway)
	return u
}

// SetDNSServers sets the "dns_servers" field.
func (u *NetworkAdapterUpsert) SetDNSServers(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDNSServers, v)
	return u
}

// UpdateDNSServers sets the "dns_servers" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDNSServers() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDNSServers)
	return u
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (u *NetworkAdapterUpsert) ClearDNSServers() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDNSServers)
	return u
}

// SetDNSDomain sets the "dns_domain" field.
func (u *NetworkAdapterUpsert) SetDNSDomain(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDNSDomain, v)
	return u
}

// UpdateDNSDomain sets the "dns_domain" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDNSDomain() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDNSDomain)
	return u
}

// ClearDNSDomain clears the value of the "dns_domain" field.
func (u *NetworkAdapterUpsert) ClearDNSDomain() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDNSDomain)
	return u
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (u *NetworkAdapterUpsert) SetDhcpEnabled(v bool) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDhcpEnabled, v)
	return u
}

// UpdateDhcpEnabled sets the "dhcp_enabled" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDhcpEnabled() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDhcpEnabled)
	return u
}

// ClearDhcpEnabled clears the value of the "dhcp_enabled" field.
func (u *NetworkAdapterUpsert) ClearDhcpEnabled() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDhcpEnabled)
	return u
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsert) SetDhcpLeaseObtained(v time.Time) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDhcpLeaseObtained, v)
	return u
}

// UpdateDhcpLeaseObtained sets the "dhcp_lease_obtained" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDhcpLeaseObtained() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDhcpLeaseObtained)
	return u
}

// ClearDhcpLeaseObtained clears the value of the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsert) ClearDhcpLeaseObtained() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDhcpLeaseObtained)
	return u
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsert) SetDhcpLeaseExpired(v time.Time) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldDhcpLeaseExpired, v)
	return u
}

// UpdateDhcpLeaseExpired sets the "dhcp_lease_expired" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateDhcpLeaseExpired() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldDhcpLeaseExpired)
	return u
}

// ClearDhcpLeaseExpired clears the value of the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsert) ClearDhcpLeaseExpired() *NetworkAdapterUpsert {
	u.SetNull(networkadapter.FieldDhcpLeaseExpired)
	return u
}

// SetSpeed sets the "speed" field.
func (u *NetworkAdapterUpsert) SetSpeed(v string) *NetworkAdapterUpsert {
	u.Set(networkadapter.FieldSpeed, v)
	return u
}

// UpdateSpeed sets the "speed" field to the value that was provided on create.
func (u *NetworkAdapterUpsert) UpdateSpeed() *NetworkAdapterUpsert {
	u.SetExcluded(networkadapter.FieldSpeed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NetworkAdapterUpsertOne) UpdateNewValues() *NetworkAdapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NetworkAdapterUpsertOne) Ignore() *NetworkAdapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NetworkAdapterUpsertOne) DoNothing() *NetworkAdapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NetworkAdapterCreate.OnConflict
// documentation for more info.
func (u *NetworkAdapterUpsertOne) Update(set func(*NetworkAdapterUpsert)) *NetworkAdapterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NetworkAdapterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NetworkAdapterUpsertOne) SetName(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateName() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateName()
	})
}

// SetMACAddress sets the "mac_address" field.
func (u *NetworkAdapterUpsertOne) SetMACAddress(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetMACAddress(v)
	})
}

// UpdateMACAddress sets the "mac_address" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateMACAddress() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateMACAddress()
	})
}

// SetAddresses sets the "addresses" field.
func (u *NetworkAdapterUpsertOne) SetAddresses(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetAddresses(v)
	})
}

// UpdateAddresses sets the "addresses" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateAddresses() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateAddresses()
	})
}

// SetSubnet sets the "subnet" field.
func (u *NetworkAdapterUpsertOne) SetSubnet(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetSubnet(v)
	})
}

// UpdateSubnet sets the "subnet" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateSubnet() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateSubnet()
	})
}

// ClearSubnet clears the value of the "subnet" field.
func (u *NetworkAdapterUpsertOne) ClearSubnet() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearSubnet()
	})
}

// SetDefaultGateway sets the "default_gateway" field.
func (u *NetworkAdapterUpsertOne) SetDefaultGateway(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDefaultGateway(v)
	})
}

// UpdateDefaultGateway sets the "default_gateway" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDefaultGateway() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDefaultGateway()
	})
}

// ClearDefaultGateway clears the value of the "default_gateway" field.
func (u *NetworkAdapterUpsertOne) ClearDefaultGateway() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDefaultGateway()
	})
}

// SetDNSServers sets the "dns_servers" field.
func (u *NetworkAdapterUpsertOne) SetDNSServers(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDNSServers(v)
	})
}

// UpdateDNSServers sets the "dns_servers" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDNSServers() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDNSServers()
	})
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (u *NetworkAdapterUpsertOne) ClearDNSServers() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDNSServers()
	})
}

// SetDNSDomain sets the "dns_domain" field.
func (u *NetworkAdapterUpsertOne) SetDNSDomain(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDNSDomain(v)
	})
}

// UpdateDNSDomain sets the "dns_domain" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDNSDomain() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDNSDomain()
	})
}

// ClearDNSDomain clears the value of the "dns_domain" field.
func (u *NetworkAdapterUpsertOne) ClearDNSDomain() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDNSDomain()
	})
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (u *NetworkAdapterUpsertOne) SetDhcpEnabled(v bool) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpEnabled(v)
	})
}

// UpdateDhcpEnabled sets the "dhcp_enabled" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDhcpEnabled() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpEnabled()
	})
}

// ClearDhcpEnabled clears the value of the "dhcp_enabled" field.
func (u *NetworkAdapterUpsertOne) ClearDhcpEnabled() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpEnabled()
	})
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsertOne) SetDhcpLeaseObtained(v time.Time) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpLeaseObtained(v)
	})
}

// UpdateDhcpLeaseObtained sets the "dhcp_lease_obtained" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDhcpLeaseObtained() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpLeaseObtained()
	})
}

// ClearDhcpLeaseObtained clears the value of the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsertOne) ClearDhcpLeaseObtained() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpLeaseObtained()
	})
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsertOne) SetDhcpLeaseExpired(v time.Time) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpLeaseExpired(v)
	})
}

// UpdateDhcpLeaseExpired sets the "dhcp_lease_expired" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateDhcpLeaseExpired() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpLeaseExpired()
	})
}

// ClearDhcpLeaseExpired clears the value of the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsertOne) ClearDhcpLeaseExpired() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpLeaseExpired()
	})
}

// SetSpeed sets the "speed" field.
func (u *NetworkAdapterUpsertOne) SetSpeed(v string) *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetSpeed(v)
	})
}

// UpdateSpeed sets the "speed" field to the value that was provided on create.
func (u *NetworkAdapterUpsertOne) UpdateSpeed() *NetworkAdapterUpsertOne {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateSpeed()
	})
}

// Exec executes the query.
func (u *NetworkAdapterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for NetworkAdapterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NetworkAdapterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NetworkAdapterUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NetworkAdapterUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NetworkAdapterCreateBulk is the builder for creating many NetworkAdapter entities in bulk.
type NetworkAdapterCreateBulk struct {
	config
	err      error
	builders []*NetworkAdapterCreate
	conflict []sql.ConflictOption
}

// Save creates the NetworkAdapter entities in the database.
func (nacb *NetworkAdapterCreateBulk) Save(ctx context.Context) ([]*NetworkAdapter, error) {
	if nacb.err != nil {
		return nil, nacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nacb.builders))
	nodes := make([]*NetworkAdapter, len(nacb.builders))
	mutators := make([]Mutator, len(nacb.builders))
	for i := range nacb.builders {
		func(i int, root context.Context) {
			builder := nacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkAdapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nacb *NetworkAdapterCreateBulk) SaveX(ctx context.Context) []*NetworkAdapter {
	v, err := nacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nacb *NetworkAdapterCreateBulk) Exec(ctx context.Context) error {
	_, err := nacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nacb *NetworkAdapterCreateBulk) ExecX(ctx context.Context) {
	if err := nacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NetworkAdapter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NetworkAdapterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (nacb *NetworkAdapterCreateBulk) OnConflict(opts ...sql.ConflictOption) *NetworkAdapterUpsertBulk {
	nacb.conflict = opts
	return &NetworkAdapterUpsertBulk{
		create: nacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nacb *NetworkAdapterCreateBulk) OnConflictColumns(columns ...string) *NetworkAdapterUpsertBulk {
	nacb.conflict = append(nacb.conflict, sql.ConflictColumns(columns...))
	return &NetworkAdapterUpsertBulk{
		create: nacb,
	}
}

// NetworkAdapterUpsertBulk is the builder for "upsert"-ing
// a bulk of NetworkAdapter nodes.
type NetworkAdapterUpsertBulk struct {
	create *NetworkAdapterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NetworkAdapterUpsertBulk) UpdateNewValues() *NetworkAdapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NetworkAdapter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NetworkAdapterUpsertBulk) Ignore() *NetworkAdapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NetworkAdapterUpsertBulk) DoNothing() *NetworkAdapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NetworkAdapterCreateBulk.OnConflict
// documentation for more info.
func (u *NetworkAdapterUpsertBulk) Update(set func(*NetworkAdapterUpsert)) *NetworkAdapterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NetworkAdapterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NetworkAdapterUpsertBulk) SetName(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateName() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateName()
	})
}

// SetMACAddress sets the "mac_address" field.
func (u *NetworkAdapterUpsertBulk) SetMACAddress(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetMACAddress(v)
	})
}

// UpdateMACAddress sets the "mac_address" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateMACAddress() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateMACAddress()
	})
}

// SetAddresses sets the "addresses" field.
func (u *NetworkAdapterUpsertBulk) SetAddresses(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetAddresses(v)
	})
}

// UpdateAddresses sets the "addresses" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateAddresses() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateAddresses()
	})
}

// SetSubnet sets the "subnet" field.
func (u *NetworkAdapterUpsertBulk) SetSubnet(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetSubnet(v)
	})
}

// UpdateSubnet sets the "subnet" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateSubnet() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateSubnet()
	})
}

// ClearSubnet clears the value of the "subnet" field.
func (u *NetworkAdapterUpsertBulk) ClearSubnet() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearSubnet()
	})
}

// SetDefaultGateway sets the "default_gateway" field.
func (u *NetworkAdapterUpsertBulk) SetDefaultGateway(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDefaultGateway(v)
	})
}

// UpdateDefaultGateway sets the "default_gateway" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDefaultGateway() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDefaultGateway()
	})
}

// ClearDefaultGateway clears the value of the "default_gateway" field.
func (u *NetworkAdapterUpsertBulk) ClearDefaultGateway() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDefaultGateway()
	})
}

// SetDNSServers sets the "dns_servers" field.
func (u *NetworkAdapterUpsertBulk) SetDNSServers(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDNSServers(v)
	})
}

// UpdateDNSServers sets the "dns_servers" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDNSServers() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDNSServers()
	})
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (u *NetworkAdapterUpsertBulk) ClearDNSServers() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDNSServers()
	})
}

// SetDNSDomain sets the "dns_domain" field.
func (u *NetworkAdapterUpsertBulk) SetDNSDomain(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDNSDomain(v)
	})
}

// UpdateDNSDomain sets the "dns_domain" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDNSDomain() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDNSDomain()
	})
}

// ClearDNSDomain clears the value of the "dns_domain" field.
func (u *NetworkAdapterUpsertBulk) ClearDNSDomain() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDNSDomain()
	})
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (u *NetworkAdapterUpsertBulk) SetDhcpEnabled(v bool) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpEnabled(v)
	})
}

// UpdateDhcpEnabled sets the "dhcp_enabled" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDhcpEnabled() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpEnabled()
	})
}

// ClearDhcpEnabled clears the value of the "dhcp_enabled" field.
func (u *NetworkAdapterUpsertBulk) ClearDhcpEnabled() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpEnabled()
	})
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsertBulk) SetDhcpLeaseObtained(v time.Time) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpLeaseObtained(v)
	})
}

// UpdateDhcpLeaseObtained sets the "dhcp_lease_obtained" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDhcpLeaseObtained() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpLeaseObtained()
	})
}

// ClearDhcpLeaseObtained clears the value of the "dhcp_lease_obtained" field.
func (u *NetworkAdapterUpsertBulk) ClearDhcpLeaseObtained() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpLeaseObtained()
	})
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsertBulk) SetDhcpLeaseExpired(v time.Time) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetDhcpLeaseExpired(v)
	})
}

// UpdateDhcpLeaseExpired sets the "dhcp_lease_expired" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateDhcpLeaseExpired() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateDhcpLeaseExpired()
	})
}

// ClearDhcpLeaseExpired clears the value of the "dhcp_lease_expired" field.
func (u *NetworkAdapterUpsertBulk) ClearDhcpLeaseExpired() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.ClearDhcpLeaseExpired()
	})
}

// SetSpeed sets the "speed" field.
func (u *NetworkAdapterUpsertBulk) SetSpeed(v string) *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.SetSpeed(v)
	})
}

// UpdateSpeed sets the "speed" field to the value that was provided on create.
func (u *NetworkAdapterUpsertBulk) UpdateSpeed() *NetworkAdapterUpsertBulk {
	return u.Update(func(s *NetworkAdapterUpsert) {
		s.UpdateSpeed()
	})
}

// Exec executes the query.
func (u *NetworkAdapterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the NetworkAdapterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for NetworkAdapterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NetworkAdapterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
