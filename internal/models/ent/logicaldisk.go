// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/logicaldisk"
)

// LogicalDisk is the model entity for the LogicalDisk schema.
type LogicalDisk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Filesystem holds the value of the "filesystem" field.
	Filesystem string `json:"filesystem,omitempty"`
	// Usage holds the value of the "usage" field.
	Usage int8 `json:"usage,omitempty"`
	// SizeInUnits holds the value of the "size_in_units" field.
	SizeInUnits string `json:"size_in_units,omitempty"`
	// RemainingSpaceInUnits holds the value of the "remaining_space_in_units" field.
	RemainingSpaceInUnits string `json:"remaining_space_in_units,omitempty"`
	// VolumeName holds the value of the "volume_name" field.
	VolumeName string `json:"volume_name,omitempty"`
	// BitlockerStatus holds the value of the "bitlocker_status" field.
	BitlockerStatus string `json:"bitlocker_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LogicalDiskQuery when eager-loading is set.
	Edges              LogicalDiskEdges `json:"edges"`
	agent_logicaldisks *string
	selectValues       sql.SelectValues
}

// LogicalDiskEdges holds the relations/edges for other nodes in the graph.
type LogicalDiskEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LogicalDiskEdges) OwnerOrErr() (*Agent, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogicalDisk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logicaldisk.FieldID, logicaldisk.FieldUsage:
			values[i] = new(sql.NullInt64)
		case logicaldisk.FieldLabel, logicaldisk.FieldFilesystem, logicaldisk.FieldSizeInUnits, logicaldisk.FieldRemainingSpaceInUnits, logicaldisk.FieldVolumeName, logicaldisk.FieldBitlockerStatus:
			values[i] = new(sql.NullString)
		case logicaldisk.ForeignKeys[0]: // agent_logicaldisks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogicalDisk fields.
func (ld *LogicalDisk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logicaldisk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ld.ID = int(value.Int64)
		case logicaldisk.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				ld.Label = value.String
			}
		case logicaldisk.FieldFilesystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filesystem", values[i])
			} else if value.Valid {
				ld.Filesystem = value.String
			}
		case logicaldisk.FieldUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage", values[i])
			} else if value.Valid {
				ld.Usage = int8(value.Int64)
			}
		case logicaldisk.FieldSizeInUnits:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size_in_units", values[i])
			} else if value.Valid {
				ld.SizeInUnits = value.String
			}
		case logicaldisk.FieldRemainingSpaceInUnits:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remaining_space_in_units", values[i])
			} else if value.Valid {
				ld.RemainingSpaceInUnits = value.String
			}
		case logicaldisk.FieldVolumeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field volume_name", values[i])
			} else if value.Valid {
				ld.VolumeName = value.String
			}
		case logicaldisk.FieldBitlockerStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bitlocker_status", values[i])
			} else if value.Valid {
				ld.BitlockerStatus = value.String
			}
		case logicaldisk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_logicaldisks", values[i])
			} else if value.Valid {
				ld.agent_logicaldisks = new(string)
				*ld.agent_logicaldisks = value.String
			}
		default:
			ld.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogicalDisk.
// This includes values selected through modifiers, order, etc.
func (ld *LogicalDisk) Value(name string) (ent.Value, error) {
	return ld.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the LogicalDisk entity.
func (ld *LogicalDisk) QueryOwner() *AgentQuery {
	return NewLogicalDiskClient(ld.config).QueryOwner(ld)
}

// Update returns a builder for updating this LogicalDisk.
// Note that you need to call LogicalDisk.Unwrap() before calling this method if this LogicalDisk
// was returned from a transaction, and the transaction was committed or rolled back.
func (ld *LogicalDisk) Update() *LogicalDiskUpdateOne {
	return NewLogicalDiskClient(ld.config).UpdateOne(ld)
}

// Unwrap unwraps the LogicalDisk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ld *LogicalDisk) Unwrap() *LogicalDisk {
	_tx, ok := ld.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: LogicalDisk is not a transactional entity")
	}
	ld.config.driver = _tx.drv
	return ld
}

// String implements the fmt.Stringer.
func (ld *LogicalDisk) String() string {
	var builder strings.Builder
	builder.WriteString("LogicalDisk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ld.ID))
	builder.WriteString("label=")
	builder.WriteString(ld.Label)
	builder.WriteString(", ")
	builder.WriteString("filesystem=")
	builder.WriteString(ld.Filesystem)
	builder.WriteString(", ")
	builder.WriteString("usage=")
	builder.WriteString(fmt.Sprintf("%v", ld.Usage))
	builder.WriteString(", ")
	builder.WriteString("size_in_units=")
	builder.WriteString(ld.SizeInUnits)
	builder.WriteString(", ")
	builder.WriteString("remaining_space_in_units=")
	builder.WriteString(ld.RemainingSpaceInUnits)
	builder.WriteString(", ")
	builder.WriteString("volume_name=")
	builder.WriteString(ld.VolumeName)
	builder.WriteString(", ")
	builder.WriteString("bitlocker_status=")
	builder.WriteString(ld.BitlockerStatus)
	builder.WriteByte(')')
	return builder.String()
}

// LogicalDisks is a parsable slice of LogicalDisk.
type LogicalDisks []*LogicalDisk
