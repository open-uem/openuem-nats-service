// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/component"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ComponentUpdate is the builder for updating Component entities.
type ComponentUpdate struct {
	config
	hooks     []Hook
	mutation  *ComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ComponentUpdate builder.
func (cu *ComponentUpdate) Where(ps ...predicate.Component) *ComponentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetHostname sets the "hostname" field.
func (cu *ComponentUpdate) SetHostname(s string) *ComponentUpdate {
	cu.mutation.SetHostname(s)
	return cu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableHostname(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetHostname(*s)
	}
	return cu
}

// SetArch sets the "arch" field.
func (cu *ComponentUpdate) SetArch(s string) *ComponentUpdate {
	cu.mutation.SetArch(s)
	return cu
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableArch(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetArch(*s)
	}
	return cu
}

// SetOs sets the "os" field.
func (cu *ComponentUpdate) SetOs(s string) *ComponentUpdate {
	cu.mutation.SetOs(s)
	return cu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableOs(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetOs(*s)
	}
	return cu
}

// SetComponent sets the "component" field.
func (cu *ComponentUpdate) SetComponent(c component.Component) *ComponentUpdate {
	cu.mutation.SetComponent(c)
	return cu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableComponent(c *component.Component) *ComponentUpdate {
	if c != nil {
		cu.SetComponent(*c)
	}
	return cu
}

// SetVersion sets the "version" field.
func (cu *ComponentUpdate) SetVersion(s string) *ComponentUpdate {
	cu.mutation.SetVersion(s)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableVersion(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetVersion(*s)
	}
	return cu
}

// SetChannel sets the "channel" field.
func (cu *ComponentUpdate) SetChannel(c component.Channel) *ComponentUpdate {
	cu.mutation.SetChannel(c)
	return cu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableChannel(c *component.Channel) *ComponentUpdate {
	if c != nil {
		cu.SetChannel(*c)
	}
	return cu
}

// SetUpdateStatus sets the "update_status" field.
func (cu *ComponentUpdate) SetUpdateStatus(cs component.UpdateStatus) *ComponentUpdate {
	cu.mutation.SetUpdateStatus(cs)
	return cu
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableUpdateStatus(cs *component.UpdateStatus) *ComponentUpdate {
	if cs != nil {
		cu.SetUpdateStatus(*cs)
	}
	return cu
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (cu *ComponentUpdate) ClearUpdateStatus() *ComponentUpdate {
	cu.mutation.ClearUpdateStatus()
	return cu
}

// SetUpdateMessage sets the "update_message" field.
func (cu *ComponentUpdate) SetUpdateMessage(s string) *ComponentUpdate {
	cu.mutation.SetUpdateMessage(s)
	return cu
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableUpdateMessage(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetUpdateMessage(*s)
	}
	return cu
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (cu *ComponentUpdate) ClearUpdateMessage() *ComponentUpdate {
	cu.mutation.ClearUpdateMessage()
	return cu
}

// SetUpdateWhen sets the "update_when" field.
func (cu *ComponentUpdate) SetUpdateWhen(t time.Time) *ComponentUpdate {
	cu.mutation.SetUpdateWhen(t)
	return cu
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableUpdateWhen(t *time.Time) *ComponentUpdate {
	if t != nil {
		cu.SetUpdateWhen(*t)
	}
	return cu
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (cu *ComponentUpdate) ClearUpdateWhen() *ComponentUpdate {
	cu.mutation.ClearUpdateWhen()
	return cu
}

// Mutation returns the ComponentMutation object of the builder.
func (cu *ComponentUpdate) Mutation() *ComponentMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ComponentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComponentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComponentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ComponentUpdate) check() error {
	if v, ok := cu.mutation.Component(); ok {
		if err := component.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.component": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Channel(); ok {
		if err := component.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.channel": %w`, err)}
		}
	}
	if v, ok := cu.mutation.UpdateStatus(); ok {
		if err := component.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.update_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ComponentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ComponentUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Hostname(); ok {
		_spec.SetField(component.FieldHostname, field.TypeString, value)
	}
	if value, ok := cu.mutation.Arch(); ok {
		_spec.SetField(component.FieldArch, field.TypeString, value)
	}
	if value, ok := cu.mutation.Os(); ok {
		_spec.SetField(component.FieldOs, field.TypeString, value)
	}
	if value, ok := cu.mutation.Component(); ok {
		_spec.SetField(component.FieldComponent, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.Channel(); ok {
		_spec.SetField(component.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.UpdateStatus(); ok {
		_spec.SetField(component.FieldUpdateStatus, field.TypeEnum, value)
	}
	if cu.mutation.UpdateStatusCleared() {
		_spec.ClearField(component.FieldUpdateStatus, field.TypeEnum)
	}
	if value, ok := cu.mutation.UpdateMessage(); ok {
		_spec.SetField(component.FieldUpdateMessage, field.TypeString, value)
	}
	if cu.mutation.UpdateMessageCleared() {
		_spec.ClearField(component.FieldUpdateMessage, field.TypeString)
	}
	if value, ok := cu.mutation.UpdateWhen(); ok {
		_spec.SetField(component.FieldUpdateWhen, field.TypeTime, value)
	}
	if cu.mutation.UpdateWhenCleared() {
		_spec.ClearField(component.FieldUpdateWhen, field.TypeTime)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ComponentUpdateOne is the builder for updating a single Component entity.
type ComponentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetHostname sets the "hostname" field.
func (cuo *ComponentUpdateOne) SetHostname(s string) *ComponentUpdateOne {
	cuo.mutation.SetHostname(s)
	return cuo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableHostname(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetHostname(*s)
	}
	return cuo
}

// SetArch sets the "arch" field.
func (cuo *ComponentUpdateOne) SetArch(s string) *ComponentUpdateOne {
	cuo.mutation.SetArch(s)
	return cuo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableArch(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetArch(*s)
	}
	return cuo
}

// SetOs sets the "os" field.
func (cuo *ComponentUpdateOne) SetOs(s string) *ComponentUpdateOne {
	cuo.mutation.SetOs(s)
	return cuo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableOs(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetOs(*s)
	}
	return cuo
}

// SetComponent sets the "component" field.
func (cuo *ComponentUpdateOne) SetComponent(c component.Component) *ComponentUpdateOne {
	cuo.mutation.SetComponent(c)
	return cuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableComponent(c *component.Component) *ComponentUpdateOne {
	if c != nil {
		cuo.SetComponent(*c)
	}
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *ComponentUpdateOne) SetVersion(s string) *ComponentUpdateOne {
	cuo.mutation.SetVersion(s)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableVersion(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetVersion(*s)
	}
	return cuo
}

// SetChannel sets the "channel" field.
func (cuo *ComponentUpdateOne) SetChannel(c component.Channel) *ComponentUpdateOne {
	cuo.mutation.SetChannel(c)
	return cuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableChannel(c *component.Channel) *ComponentUpdateOne {
	if c != nil {
		cuo.SetChannel(*c)
	}
	return cuo
}

// SetUpdateStatus sets the "update_status" field.
func (cuo *ComponentUpdateOne) SetUpdateStatus(cs component.UpdateStatus) *ComponentUpdateOne {
	cuo.mutation.SetUpdateStatus(cs)
	return cuo
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableUpdateStatus(cs *component.UpdateStatus) *ComponentUpdateOne {
	if cs != nil {
		cuo.SetUpdateStatus(*cs)
	}
	return cuo
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (cuo *ComponentUpdateOne) ClearUpdateStatus() *ComponentUpdateOne {
	cuo.mutation.ClearUpdateStatus()
	return cuo
}

// SetUpdateMessage sets the "update_message" field.
func (cuo *ComponentUpdateOne) SetUpdateMessage(s string) *ComponentUpdateOne {
	cuo.mutation.SetUpdateMessage(s)
	return cuo
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableUpdateMessage(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetUpdateMessage(*s)
	}
	return cuo
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (cuo *ComponentUpdateOne) ClearUpdateMessage() *ComponentUpdateOne {
	cuo.mutation.ClearUpdateMessage()
	return cuo
}

// SetUpdateWhen sets the "update_when" field.
func (cuo *ComponentUpdateOne) SetUpdateWhen(t time.Time) *ComponentUpdateOne {
	cuo.mutation.SetUpdateWhen(t)
	return cuo
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableUpdateWhen(t *time.Time) *ComponentUpdateOne {
	if t != nil {
		cuo.SetUpdateWhen(*t)
	}
	return cuo
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (cuo *ComponentUpdateOne) ClearUpdateWhen() *ComponentUpdateOne {
	cuo.mutation.ClearUpdateWhen()
	return cuo
}

// Mutation returns the ComponentMutation object of the builder.
func (cuo *ComponentUpdateOne) Mutation() *ComponentMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ComponentUpdate builder.
func (cuo *ComponentUpdateOne) Where(ps ...predicate.Component) *ComponentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ComponentUpdateOne) Select(field string, fields ...string) *ComponentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Component entity.
func (cuo *ComponentUpdateOne) Save(ctx context.Context) (*Component, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComponentUpdateOne) SaveX(ctx context.Context) *Component {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComponentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ComponentUpdateOne) check() error {
	if v, ok := cuo.mutation.Component(); ok {
		if err := component.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.component": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Channel(); ok {
		if err := component.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.channel": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.UpdateStatus(); ok {
		if err := component.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.update_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ComponentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ComponentUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ComponentUpdateOne) sqlSave(ctx context.Context) (_node *Component, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "Component.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, component.FieldID)
		for _, f := range fields {
			if !component.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != component.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Hostname(); ok {
		_spec.SetField(component.FieldHostname, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Arch(); ok {
		_spec.SetField(component.FieldArch, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Os(); ok {
		_spec.SetField(component.FieldOs, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Component(); ok {
		_spec.SetField(component.FieldComponent, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Channel(); ok {
		_spec.SetField(component.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.UpdateStatus(); ok {
		_spec.SetField(component.FieldUpdateStatus, field.TypeEnum, value)
	}
	if cuo.mutation.UpdateStatusCleared() {
		_spec.ClearField(component.FieldUpdateStatus, field.TypeEnum)
	}
	if value, ok := cuo.mutation.UpdateMessage(); ok {
		_spec.SetField(component.FieldUpdateMessage, field.TypeString, value)
	}
	if cuo.mutation.UpdateMessageCleared() {
		_spec.ClearField(component.FieldUpdateMessage, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdateWhen(); ok {
		_spec.SetField(component.FieldUpdateWhen, field.TypeTime, value)
	}
	if cuo.mutation.UpdateWhenCleared() {
		_spec.ClearField(component.FieldUpdateWhen, field.TypeTime)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Component{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
