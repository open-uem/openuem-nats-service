// Code generated by ent, DO NOT EDIT.

package networkadapter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the networkadapter type in the database.
	Label = "network_adapter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMACAddress holds the string denoting the mac_address field in the database.
	FieldMACAddress = "mac_address"
	// FieldAddresses holds the string denoting the addresses field in the database.
	FieldAddresses = "addresses"
	// FieldSubnet holds the string denoting the subnet field in the database.
	FieldSubnet = "subnet"
	// FieldDefaultGateway holds the string denoting the default_gateway field in the database.
	FieldDefaultGateway = "default_gateway"
	// FieldDNSServers holds the string denoting the dns_servers field in the database.
	FieldDNSServers = "dns_servers"
	// FieldDNSDomain holds the string denoting the dns_domain field in the database.
	FieldDNSDomain = "dns_domain"
	// FieldDhcpEnabled holds the string denoting the dhcp_enabled field in the database.
	FieldDhcpEnabled = "dhcp_enabled"
	// FieldDhcpLeaseObtained holds the string denoting the dhcp_lease_obtained field in the database.
	FieldDhcpLeaseObtained = "dhcp_lease_obtained"
	// FieldDhcpLeaseExpired holds the string denoting the dhcp_lease_expired field in the database.
	FieldDhcpLeaseExpired = "dhcp_lease_expired"
	// FieldSpeed holds the string denoting the speed field in the database.
	FieldSpeed = "speed"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "oid"
	// Table holds the table name of the networkadapter in the database.
	Table = "network_adapters"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "network_adapters"
	// OwnerInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OwnerInverseTable = "agents"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "agent_networkadapters"
)

// Columns holds all SQL columns for networkadapter fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMACAddress,
	FieldAddresses,
	FieldSubnet,
	FieldDefaultGateway,
	FieldDNSServers,
	FieldDNSDomain,
	FieldDhcpEnabled,
	FieldDhcpLeaseObtained,
	FieldDhcpLeaseExpired,
	FieldSpeed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "network_adapters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_networkadapters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NetworkAdapter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMACAddress orders the results by the mac_address field.
func ByMACAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMACAddress, opts...).ToFunc()
}

// ByAddresses orders the results by the addresses field.
func ByAddresses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddresses, opts...).ToFunc()
}

// BySubnet orders the results by the subnet field.
func BySubnet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubnet, opts...).ToFunc()
}

// ByDefaultGateway orders the results by the default_gateway field.
func ByDefaultGateway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultGateway, opts...).ToFunc()
}

// ByDNSServers orders the results by the dns_servers field.
func ByDNSServers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSServers, opts...).ToFunc()
}

// ByDNSDomain orders the results by the dns_domain field.
func ByDNSDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSDomain, opts...).ToFunc()
}

// ByDhcpEnabled orders the results by the dhcp_enabled field.
func ByDhcpEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDhcpEnabled, opts...).ToFunc()
}

// ByDhcpLeaseObtained orders the results by the dhcp_lease_obtained field.
func ByDhcpLeaseObtained(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDhcpLeaseObtained, opts...).ToFunc()
}

// ByDhcpLeaseExpired orders the results by the dhcp_lease_expired field.
func ByDhcpLeaseExpired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDhcpLeaseExpired, opts...).ToFunc()
}

// BySpeed orders the results by the speed field.
func BySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeed, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
