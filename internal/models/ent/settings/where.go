// Code generated by ent, DO NOT EDIT.

package settings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldID, id))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLanguage, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldOrganization, v))
}

// PostalAddress applies equality check predicate on the "postal_address" field. It's identical to PostalAddressEQ.
func PostalAddress(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldPostalAddress, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldPostalCode, v))
}

// Locality applies equality check predicate on the "locality" field. It's identical to LocalityEQ.
func Locality(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLocality, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldProvince, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldState, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCountry, v))
}

// SMTPServer applies equality check predicate on the "smtp_server" field. It's identical to SMTPServerEQ.
func SMTPServer(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPServer, v))
}

// SMTPPort applies equality check predicate on the "smtp_port" field. It's identical to SMTPPortEQ.
func SMTPPort(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPPort, v))
}

// SMTPUser applies equality check predicate on the "smtp_user" field. It's identical to SMTPUserEQ.
func SMTPUser(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPUser, v))
}

// SMTPPassword applies equality check predicate on the "smtp_password" field. It's identical to SMTPPasswordEQ.
func SMTPPassword(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPPassword, v))
}

// SMTPAuth applies equality check predicate on the "smtp_auth" field. It's identical to SMTPAuthEQ.
func SMTPAuth(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPAuth, v))
}

// SMTPTLS applies equality check predicate on the "smtp_tls" field. It's identical to SMTPTLSEQ.
func SMTPTLS(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPTLS, v))
}

// SMTPStarttls applies equality check predicate on the "smtp_starttls" field. It's identical to SMTPStarttlsEQ.
func SMTPStarttls(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPStarttls, v))
}

// NatsServer applies equality check predicate on the "nats_server" field. It's identical to NatsServerEQ.
func NatsServer(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsServer, v))
}

// NatsPort applies equality check predicate on the "nats_port" field. It's identical to NatsPortEQ.
func NatsPort(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsPort, v))
}

// MessageFrom applies equality check predicate on the "message_from" field. It's identical to MessageFromEQ.
func MessageFrom(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldMessageFrom, v))
}

// MaxUploadSize applies equality check predicate on the "max_upload_size" field. It's identical to MaxUploadSizeEQ.
func MaxUploadSize(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldMaxUploadSize, v))
}

// UserCertYearsValid applies equality check predicate on the "user_cert_years_valid" field. It's identical to UserCertYearsValidEQ.
func UserCertYearsValid(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUserCertYearsValid, v))
}

// NatsRequestTimeoutSeconds applies equality check predicate on the "nats_request_timeout_seconds" field. It's identical to NatsRequestTimeoutSecondsEQ.
func NatsRequestTimeoutSeconds(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsRequestTimeoutSeconds, v))
}

// RefreshTimeInMinutes applies equality check predicate on the "refresh_time_in_minutes" field. It's identical to RefreshTimeInMinutesEQ.
func RefreshTimeInMinutes(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldRefreshTimeInMinutes, v))
}

// SessionLifetimeInMinutes applies equality check predicate on the "session_lifetime_in_minutes" field. It's identical to SessionLifetimeInMinutesEQ.
func SessionLifetimeInMinutes(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSessionLifetimeInMinutes, v))
}

// UpdateChannel applies equality check predicate on the "update_channel" field. It's identical to UpdateChannelEQ.
func UpdateChannel(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUpdateChannel, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreated, v))
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldModified, v))
}

// AgentReportFrequenceInMinutes applies equality check predicate on the "agent_report_frequence_in_minutes" field. It's identical to AgentReportFrequenceInMinutesEQ.
func AgentReportFrequenceInMinutes(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAgentReportFrequenceInMinutes, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldLanguage, v))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationIsNil applies the IsNil predicate on the "organization" field.
func OrganizationIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldOrganization))
}

// OrganizationNotNil applies the NotNil predicate on the "organization" field.
func OrganizationNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldOrganization))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldOrganization, v))
}

// PostalAddressEQ applies the EQ predicate on the "postal_address" field.
func PostalAddressEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldPostalAddress, v))
}

// PostalAddressNEQ applies the NEQ predicate on the "postal_address" field.
func PostalAddressNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldPostalAddress, v))
}

// PostalAddressIn applies the In predicate on the "postal_address" field.
func PostalAddressIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldPostalAddress, vs...))
}

// PostalAddressNotIn applies the NotIn predicate on the "postal_address" field.
func PostalAddressNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldPostalAddress, vs...))
}

// PostalAddressGT applies the GT predicate on the "postal_address" field.
func PostalAddressGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldPostalAddress, v))
}

// PostalAddressGTE applies the GTE predicate on the "postal_address" field.
func PostalAddressGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldPostalAddress, v))
}

// PostalAddressLT applies the LT predicate on the "postal_address" field.
func PostalAddressLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldPostalAddress, v))
}

// PostalAddressLTE applies the LTE predicate on the "postal_address" field.
func PostalAddressLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldPostalAddress, v))
}

// PostalAddressContains applies the Contains predicate on the "postal_address" field.
func PostalAddressContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldPostalAddress, v))
}

// PostalAddressHasPrefix applies the HasPrefix predicate on the "postal_address" field.
func PostalAddressHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldPostalAddress, v))
}

// PostalAddressHasSuffix applies the HasSuffix predicate on the "postal_address" field.
func PostalAddressHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldPostalAddress, v))
}

// PostalAddressIsNil applies the IsNil predicate on the "postal_address" field.
func PostalAddressIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldPostalAddress))
}

// PostalAddressNotNil applies the NotNil predicate on the "postal_address" field.
func PostalAddressNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldPostalAddress))
}

// PostalAddressEqualFold applies the EqualFold predicate on the "postal_address" field.
func PostalAddressEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldPostalAddress, v))
}

// PostalAddressContainsFold applies the ContainsFold predicate on the "postal_address" field.
func PostalAddressContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldPostalAddress, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeIsNil applies the IsNil predicate on the "postal_code" field.
func PostalCodeIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldPostalCode))
}

// PostalCodeNotNil applies the NotNil predicate on the "postal_code" field.
func PostalCodeNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldPostalCode))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldPostalCode, v))
}

// LocalityEQ applies the EQ predicate on the "locality" field.
func LocalityEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLocality, v))
}

// LocalityNEQ applies the NEQ predicate on the "locality" field.
func LocalityNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLocality, v))
}

// LocalityIn applies the In predicate on the "locality" field.
func LocalityIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLocality, vs...))
}

// LocalityNotIn applies the NotIn predicate on the "locality" field.
func LocalityNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLocality, vs...))
}

// LocalityGT applies the GT predicate on the "locality" field.
func LocalityGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLocality, v))
}

// LocalityGTE applies the GTE predicate on the "locality" field.
func LocalityGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLocality, v))
}

// LocalityLT applies the LT predicate on the "locality" field.
func LocalityLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLocality, v))
}

// LocalityLTE applies the LTE predicate on the "locality" field.
func LocalityLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLocality, v))
}

// LocalityContains applies the Contains predicate on the "locality" field.
func LocalityContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldLocality, v))
}

// LocalityHasPrefix applies the HasPrefix predicate on the "locality" field.
func LocalityHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldLocality, v))
}

// LocalityHasSuffix applies the HasSuffix predicate on the "locality" field.
func LocalityHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldLocality, v))
}

// LocalityIsNil applies the IsNil predicate on the "locality" field.
func LocalityIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldLocality))
}

// LocalityNotNil applies the NotNil predicate on the "locality" field.
func LocalityNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldLocality))
}

// LocalityEqualFold applies the EqualFold predicate on the "locality" field.
func LocalityEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldLocality, v))
}

// LocalityContainsFold applies the ContainsFold predicate on the "locality" field.
func LocalityContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldLocality, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldProvince))
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldProvince))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldProvince, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldState, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldCountry, v))
}

// SMTPServerEQ applies the EQ predicate on the "smtp_server" field.
func SMTPServerEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPServer, v))
}

// SMTPServerNEQ applies the NEQ predicate on the "smtp_server" field.
func SMTPServerNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPServer, v))
}

// SMTPServerIn applies the In predicate on the "smtp_server" field.
func SMTPServerIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSMTPServer, vs...))
}

// SMTPServerNotIn applies the NotIn predicate on the "smtp_server" field.
func SMTPServerNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSMTPServer, vs...))
}

// SMTPServerGT applies the GT predicate on the "smtp_server" field.
func SMTPServerGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSMTPServer, v))
}

// SMTPServerGTE applies the GTE predicate on the "smtp_server" field.
func SMTPServerGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSMTPServer, v))
}

// SMTPServerLT applies the LT predicate on the "smtp_server" field.
func SMTPServerLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSMTPServer, v))
}

// SMTPServerLTE applies the LTE predicate on the "smtp_server" field.
func SMTPServerLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSMTPServer, v))
}

// SMTPServerContains applies the Contains predicate on the "smtp_server" field.
func SMTPServerContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldSMTPServer, v))
}

// SMTPServerHasPrefix applies the HasPrefix predicate on the "smtp_server" field.
func SMTPServerHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldSMTPServer, v))
}

// SMTPServerHasSuffix applies the HasSuffix predicate on the "smtp_server" field.
func SMTPServerHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldSMTPServer, v))
}

// SMTPServerIsNil applies the IsNil predicate on the "smtp_server" field.
func SMTPServerIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPServer))
}

// SMTPServerNotNil applies the NotNil predicate on the "smtp_server" field.
func SMTPServerNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPServer))
}

// SMTPServerEqualFold applies the EqualFold predicate on the "smtp_server" field.
func SMTPServerEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldSMTPServer, v))
}

// SMTPServerContainsFold applies the ContainsFold predicate on the "smtp_server" field.
func SMTPServerContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldSMTPServer, v))
}

// SMTPPortEQ applies the EQ predicate on the "smtp_port" field.
func SMTPPortEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPPort, v))
}

// SMTPPortNEQ applies the NEQ predicate on the "smtp_port" field.
func SMTPPortNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPPort, v))
}

// SMTPPortIn applies the In predicate on the "smtp_port" field.
func SMTPPortIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSMTPPort, vs...))
}

// SMTPPortNotIn applies the NotIn predicate on the "smtp_port" field.
func SMTPPortNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSMTPPort, vs...))
}

// SMTPPortGT applies the GT predicate on the "smtp_port" field.
func SMTPPortGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSMTPPort, v))
}

// SMTPPortGTE applies the GTE predicate on the "smtp_port" field.
func SMTPPortGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSMTPPort, v))
}

// SMTPPortLT applies the LT predicate on the "smtp_port" field.
func SMTPPortLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSMTPPort, v))
}

// SMTPPortLTE applies the LTE predicate on the "smtp_port" field.
func SMTPPortLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSMTPPort, v))
}

// SMTPPortIsNil applies the IsNil predicate on the "smtp_port" field.
func SMTPPortIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPPort))
}

// SMTPPortNotNil applies the NotNil predicate on the "smtp_port" field.
func SMTPPortNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPPort))
}

// SMTPUserEQ applies the EQ predicate on the "smtp_user" field.
func SMTPUserEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPUser, v))
}

// SMTPUserNEQ applies the NEQ predicate on the "smtp_user" field.
func SMTPUserNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPUser, v))
}

// SMTPUserIn applies the In predicate on the "smtp_user" field.
func SMTPUserIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSMTPUser, vs...))
}

// SMTPUserNotIn applies the NotIn predicate on the "smtp_user" field.
func SMTPUserNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSMTPUser, vs...))
}

// SMTPUserGT applies the GT predicate on the "smtp_user" field.
func SMTPUserGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSMTPUser, v))
}

// SMTPUserGTE applies the GTE predicate on the "smtp_user" field.
func SMTPUserGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSMTPUser, v))
}

// SMTPUserLT applies the LT predicate on the "smtp_user" field.
func SMTPUserLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSMTPUser, v))
}

// SMTPUserLTE applies the LTE predicate on the "smtp_user" field.
func SMTPUserLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSMTPUser, v))
}

// SMTPUserContains applies the Contains predicate on the "smtp_user" field.
func SMTPUserContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldSMTPUser, v))
}

// SMTPUserHasPrefix applies the HasPrefix predicate on the "smtp_user" field.
func SMTPUserHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldSMTPUser, v))
}

// SMTPUserHasSuffix applies the HasSuffix predicate on the "smtp_user" field.
func SMTPUserHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldSMTPUser, v))
}

// SMTPUserIsNil applies the IsNil predicate on the "smtp_user" field.
func SMTPUserIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPUser))
}

// SMTPUserNotNil applies the NotNil predicate on the "smtp_user" field.
func SMTPUserNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPUser))
}

// SMTPUserEqualFold applies the EqualFold predicate on the "smtp_user" field.
func SMTPUserEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldSMTPUser, v))
}

// SMTPUserContainsFold applies the ContainsFold predicate on the "smtp_user" field.
func SMTPUserContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldSMTPUser, v))
}

// SMTPPasswordEQ applies the EQ predicate on the "smtp_password" field.
func SMTPPasswordEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPPassword, v))
}

// SMTPPasswordNEQ applies the NEQ predicate on the "smtp_password" field.
func SMTPPasswordNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPPassword, v))
}

// SMTPPasswordIn applies the In predicate on the "smtp_password" field.
func SMTPPasswordIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSMTPPassword, vs...))
}

// SMTPPasswordNotIn applies the NotIn predicate on the "smtp_password" field.
func SMTPPasswordNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSMTPPassword, vs...))
}

// SMTPPasswordGT applies the GT predicate on the "smtp_password" field.
func SMTPPasswordGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSMTPPassword, v))
}

// SMTPPasswordGTE applies the GTE predicate on the "smtp_password" field.
func SMTPPasswordGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSMTPPassword, v))
}

// SMTPPasswordLT applies the LT predicate on the "smtp_password" field.
func SMTPPasswordLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSMTPPassword, v))
}

// SMTPPasswordLTE applies the LTE predicate on the "smtp_password" field.
func SMTPPasswordLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSMTPPassword, v))
}

// SMTPPasswordContains applies the Contains predicate on the "smtp_password" field.
func SMTPPasswordContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldSMTPPassword, v))
}

// SMTPPasswordHasPrefix applies the HasPrefix predicate on the "smtp_password" field.
func SMTPPasswordHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldSMTPPassword, v))
}

// SMTPPasswordHasSuffix applies the HasSuffix predicate on the "smtp_password" field.
func SMTPPasswordHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldSMTPPassword, v))
}

// SMTPPasswordIsNil applies the IsNil predicate on the "smtp_password" field.
func SMTPPasswordIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPPassword))
}

// SMTPPasswordNotNil applies the NotNil predicate on the "smtp_password" field.
func SMTPPasswordNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPPassword))
}

// SMTPPasswordEqualFold applies the EqualFold predicate on the "smtp_password" field.
func SMTPPasswordEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldSMTPPassword, v))
}

// SMTPPasswordContainsFold applies the ContainsFold predicate on the "smtp_password" field.
func SMTPPasswordContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldSMTPPassword, v))
}

// SMTPAuthEQ applies the EQ predicate on the "smtp_auth" field.
func SMTPAuthEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPAuth, v))
}

// SMTPAuthNEQ applies the NEQ predicate on the "smtp_auth" field.
func SMTPAuthNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPAuth, v))
}

// SMTPAuthIn applies the In predicate on the "smtp_auth" field.
func SMTPAuthIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSMTPAuth, vs...))
}

// SMTPAuthNotIn applies the NotIn predicate on the "smtp_auth" field.
func SMTPAuthNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSMTPAuth, vs...))
}

// SMTPAuthGT applies the GT predicate on the "smtp_auth" field.
func SMTPAuthGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSMTPAuth, v))
}

// SMTPAuthGTE applies the GTE predicate on the "smtp_auth" field.
func SMTPAuthGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSMTPAuth, v))
}

// SMTPAuthLT applies the LT predicate on the "smtp_auth" field.
func SMTPAuthLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSMTPAuth, v))
}

// SMTPAuthLTE applies the LTE predicate on the "smtp_auth" field.
func SMTPAuthLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSMTPAuth, v))
}

// SMTPAuthContains applies the Contains predicate on the "smtp_auth" field.
func SMTPAuthContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldSMTPAuth, v))
}

// SMTPAuthHasPrefix applies the HasPrefix predicate on the "smtp_auth" field.
func SMTPAuthHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldSMTPAuth, v))
}

// SMTPAuthHasSuffix applies the HasSuffix predicate on the "smtp_auth" field.
func SMTPAuthHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldSMTPAuth, v))
}

// SMTPAuthIsNil applies the IsNil predicate on the "smtp_auth" field.
func SMTPAuthIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPAuth))
}

// SMTPAuthNotNil applies the NotNil predicate on the "smtp_auth" field.
func SMTPAuthNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPAuth))
}

// SMTPAuthEqualFold applies the EqualFold predicate on the "smtp_auth" field.
func SMTPAuthEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldSMTPAuth, v))
}

// SMTPAuthContainsFold applies the ContainsFold predicate on the "smtp_auth" field.
func SMTPAuthContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldSMTPAuth, v))
}

// SMTPTLSEQ applies the EQ predicate on the "smtp_tls" field.
func SMTPTLSEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPTLS, v))
}

// SMTPTLSNEQ applies the NEQ predicate on the "smtp_tls" field.
func SMTPTLSNEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPTLS, v))
}

// SMTPTLSIsNil applies the IsNil predicate on the "smtp_tls" field.
func SMTPTLSIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPTLS))
}

// SMTPTLSNotNil applies the NotNil predicate on the "smtp_tls" field.
func SMTPTLSNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPTLS))
}

// SMTPStarttlsEQ applies the EQ predicate on the "smtp_starttls" field.
func SMTPStarttlsEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSMTPStarttls, v))
}

// SMTPStarttlsNEQ applies the NEQ predicate on the "smtp_starttls" field.
func SMTPStarttlsNEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSMTPStarttls, v))
}

// SMTPStarttlsIsNil applies the IsNil predicate on the "smtp_starttls" field.
func SMTPStarttlsIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSMTPStarttls))
}

// SMTPStarttlsNotNil applies the NotNil predicate on the "smtp_starttls" field.
func SMTPStarttlsNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSMTPStarttls))
}

// NatsServerEQ applies the EQ predicate on the "nats_server" field.
func NatsServerEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsServer, v))
}

// NatsServerNEQ applies the NEQ predicate on the "nats_server" field.
func NatsServerNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldNatsServer, v))
}

// NatsServerIn applies the In predicate on the "nats_server" field.
func NatsServerIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldNatsServer, vs...))
}

// NatsServerNotIn applies the NotIn predicate on the "nats_server" field.
func NatsServerNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldNatsServer, vs...))
}

// NatsServerGT applies the GT predicate on the "nats_server" field.
func NatsServerGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldNatsServer, v))
}

// NatsServerGTE applies the GTE predicate on the "nats_server" field.
func NatsServerGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldNatsServer, v))
}

// NatsServerLT applies the LT predicate on the "nats_server" field.
func NatsServerLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldNatsServer, v))
}

// NatsServerLTE applies the LTE predicate on the "nats_server" field.
func NatsServerLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldNatsServer, v))
}

// NatsServerContains applies the Contains predicate on the "nats_server" field.
func NatsServerContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldNatsServer, v))
}

// NatsServerHasPrefix applies the HasPrefix predicate on the "nats_server" field.
func NatsServerHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldNatsServer, v))
}

// NatsServerHasSuffix applies the HasSuffix predicate on the "nats_server" field.
func NatsServerHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldNatsServer, v))
}

// NatsServerIsNil applies the IsNil predicate on the "nats_server" field.
func NatsServerIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldNatsServer))
}

// NatsServerNotNil applies the NotNil predicate on the "nats_server" field.
func NatsServerNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldNatsServer))
}

// NatsServerEqualFold applies the EqualFold predicate on the "nats_server" field.
func NatsServerEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldNatsServer, v))
}

// NatsServerContainsFold applies the ContainsFold predicate on the "nats_server" field.
func NatsServerContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldNatsServer, v))
}

// NatsPortEQ applies the EQ predicate on the "nats_port" field.
func NatsPortEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsPort, v))
}

// NatsPortNEQ applies the NEQ predicate on the "nats_port" field.
func NatsPortNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldNatsPort, v))
}

// NatsPortIn applies the In predicate on the "nats_port" field.
func NatsPortIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldNatsPort, vs...))
}

// NatsPortNotIn applies the NotIn predicate on the "nats_port" field.
func NatsPortNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldNatsPort, vs...))
}

// NatsPortGT applies the GT predicate on the "nats_port" field.
func NatsPortGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldNatsPort, v))
}

// NatsPortGTE applies the GTE predicate on the "nats_port" field.
func NatsPortGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldNatsPort, v))
}

// NatsPortLT applies the LT predicate on the "nats_port" field.
func NatsPortLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldNatsPort, v))
}

// NatsPortLTE applies the LTE predicate on the "nats_port" field.
func NatsPortLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldNatsPort, v))
}

// NatsPortContains applies the Contains predicate on the "nats_port" field.
func NatsPortContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldNatsPort, v))
}

// NatsPortHasPrefix applies the HasPrefix predicate on the "nats_port" field.
func NatsPortHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldNatsPort, v))
}

// NatsPortHasSuffix applies the HasSuffix predicate on the "nats_port" field.
func NatsPortHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldNatsPort, v))
}

// NatsPortIsNil applies the IsNil predicate on the "nats_port" field.
func NatsPortIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldNatsPort))
}

// NatsPortNotNil applies the NotNil predicate on the "nats_port" field.
func NatsPortNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldNatsPort))
}

// NatsPortEqualFold applies the EqualFold predicate on the "nats_port" field.
func NatsPortEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldNatsPort, v))
}

// NatsPortContainsFold applies the ContainsFold predicate on the "nats_port" field.
func NatsPortContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldNatsPort, v))
}

// MessageFromEQ applies the EQ predicate on the "message_from" field.
func MessageFromEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldMessageFrom, v))
}

// MessageFromNEQ applies the NEQ predicate on the "message_from" field.
func MessageFromNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldMessageFrom, v))
}

// MessageFromIn applies the In predicate on the "message_from" field.
func MessageFromIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldMessageFrom, vs...))
}

// MessageFromNotIn applies the NotIn predicate on the "message_from" field.
func MessageFromNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldMessageFrom, vs...))
}

// MessageFromGT applies the GT predicate on the "message_from" field.
func MessageFromGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldMessageFrom, v))
}

// MessageFromGTE applies the GTE predicate on the "message_from" field.
func MessageFromGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldMessageFrom, v))
}

// MessageFromLT applies the LT predicate on the "message_from" field.
func MessageFromLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldMessageFrom, v))
}

// MessageFromLTE applies the LTE predicate on the "message_from" field.
func MessageFromLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldMessageFrom, v))
}

// MessageFromContains applies the Contains predicate on the "message_from" field.
func MessageFromContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldMessageFrom, v))
}

// MessageFromHasPrefix applies the HasPrefix predicate on the "message_from" field.
func MessageFromHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldMessageFrom, v))
}

// MessageFromHasSuffix applies the HasSuffix predicate on the "message_from" field.
func MessageFromHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldMessageFrom, v))
}

// MessageFromIsNil applies the IsNil predicate on the "message_from" field.
func MessageFromIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldMessageFrom))
}

// MessageFromNotNil applies the NotNil predicate on the "message_from" field.
func MessageFromNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldMessageFrom))
}

// MessageFromEqualFold applies the EqualFold predicate on the "message_from" field.
func MessageFromEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldMessageFrom, v))
}

// MessageFromContainsFold applies the ContainsFold predicate on the "message_from" field.
func MessageFromContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldMessageFrom, v))
}

// MaxUploadSizeEQ applies the EQ predicate on the "max_upload_size" field.
func MaxUploadSizeEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldMaxUploadSize, v))
}

// MaxUploadSizeNEQ applies the NEQ predicate on the "max_upload_size" field.
func MaxUploadSizeNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldMaxUploadSize, v))
}

// MaxUploadSizeIn applies the In predicate on the "max_upload_size" field.
func MaxUploadSizeIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldMaxUploadSize, vs...))
}

// MaxUploadSizeNotIn applies the NotIn predicate on the "max_upload_size" field.
func MaxUploadSizeNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldMaxUploadSize, vs...))
}

// MaxUploadSizeGT applies the GT predicate on the "max_upload_size" field.
func MaxUploadSizeGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldMaxUploadSize, v))
}

// MaxUploadSizeGTE applies the GTE predicate on the "max_upload_size" field.
func MaxUploadSizeGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldMaxUploadSize, v))
}

// MaxUploadSizeLT applies the LT predicate on the "max_upload_size" field.
func MaxUploadSizeLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldMaxUploadSize, v))
}

// MaxUploadSizeLTE applies the LTE predicate on the "max_upload_size" field.
func MaxUploadSizeLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldMaxUploadSize, v))
}

// MaxUploadSizeContains applies the Contains predicate on the "max_upload_size" field.
func MaxUploadSizeContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldMaxUploadSize, v))
}

// MaxUploadSizeHasPrefix applies the HasPrefix predicate on the "max_upload_size" field.
func MaxUploadSizeHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldMaxUploadSize, v))
}

// MaxUploadSizeHasSuffix applies the HasSuffix predicate on the "max_upload_size" field.
func MaxUploadSizeHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldMaxUploadSize, v))
}

// MaxUploadSizeIsNil applies the IsNil predicate on the "max_upload_size" field.
func MaxUploadSizeIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldMaxUploadSize))
}

// MaxUploadSizeNotNil applies the NotNil predicate on the "max_upload_size" field.
func MaxUploadSizeNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldMaxUploadSize))
}

// MaxUploadSizeEqualFold applies the EqualFold predicate on the "max_upload_size" field.
func MaxUploadSizeEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldMaxUploadSize, v))
}

// MaxUploadSizeContainsFold applies the ContainsFold predicate on the "max_upload_size" field.
func MaxUploadSizeContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldMaxUploadSize, v))
}

// UserCertYearsValidEQ applies the EQ predicate on the "user_cert_years_valid" field.
func UserCertYearsValidEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUserCertYearsValid, v))
}

// UserCertYearsValidNEQ applies the NEQ predicate on the "user_cert_years_valid" field.
func UserCertYearsValidNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldUserCertYearsValid, v))
}

// UserCertYearsValidIn applies the In predicate on the "user_cert_years_valid" field.
func UserCertYearsValidIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldUserCertYearsValid, vs...))
}

// UserCertYearsValidNotIn applies the NotIn predicate on the "user_cert_years_valid" field.
func UserCertYearsValidNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldUserCertYearsValid, vs...))
}

// UserCertYearsValidGT applies the GT predicate on the "user_cert_years_valid" field.
func UserCertYearsValidGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldUserCertYearsValid, v))
}

// UserCertYearsValidGTE applies the GTE predicate on the "user_cert_years_valid" field.
func UserCertYearsValidGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldUserCertYearsValid, v))
}

// UserCertYearsValidLT applies the LT predicate on the "user_cert_years_valid" field.
func UserCertYearsValidLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldUserCertYearsValid, v))
}

// UserCertYearsValidLTE applies the LTE predicate on the "user_cert_years_valid" field.
func UserCertYearsValidLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldUserCertYearsValid, v))
}

// UserCertYearsValidIsNil applies the IsNil predicate on the "user_cert_years_valid" field.
func UserCertYearsValidIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldUserCertYearsValid))
}

// UserCertYearsValidNotNil applies the NotNil predicate on the "user_cert_years_valid" field.
func UserCertYearsValidNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldUserCertYearsValid))
}

// NatsRequestTimeoutSecondsEQ applies the EQ predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsNEQ applies the NEQ predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsIn applies the In predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldNatsRequestTimeoutSeconds, vs...))
}

// NatsRequestTimeoutSecondsNotIn applies the NotIn predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldNatsRequestTimeoutSeconds, vs...))
}

// NatsRequestTimeoutSecondsGT applies the GT predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsGTE applies the GTE predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsLT applies the LT predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsLTE applies the LTE predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldNatsRequestTimeoutSeconds, v))
}

// NatsRequestTimeoutSecondsIsNil applies the IsNil predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldNatsRequestTimeoutSeconds))
}

// NatsRequestTimeoutSecondsNotNil applies the NotNil predicate on the "nats_request_timeout_seconds" field.
func NatsRequestTimeoutSecondsNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldNatsRequestTimeoutSeconds))
}

// RefreshTimeInMinutesEQ applies the EQ predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesNEQ applies the NEQ predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesIn applies the In predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldRefreshTimeInMinutes, vs...))
}

// RefreshTimeInMinutesNotIn applies the NotIn predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldRefreshTimeInMinutes, vs...))
}

// RefreshTimeInMinutesGT applies the GT predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesGTE applies the GTE predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesLT applies the LT predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesLTE applies the LTE predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldRefreshTimeInMinutes, v))
}

// RefreshTimeInMinutesIsNil applies the IsNil predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldRefreshTimeInMinutes))
}

// RefreshTimeInMinutesNotNil applies the NotNil predicate on the "refresh_time_in_minutes" field.
func RefreshTimeInMinutesNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldRefreshTimeInMinutes))
}

// SessionLifetimeInMinutesEQ applies the EQ predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesNEQ applies the NEQ predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesIn applies the In predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSessionLifetimeInMinutes, vs...))
}

// SessionLifetimeInMinutesNotIn applies the NotIn predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSessionLifetimeInMinutes, vs...))
}

// SessionLifetimeInMinutesGT applies the GT predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesGTE applies the GTE predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesLT applies the LT predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesLTE applies the LTE predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSessionLifetimeInMinutes, v))
}

// SessionLifetimeInMinutesIsNil applies the IsNil predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldSessionLifetimeInMinutes))
}

// SessionLifetimeInMinutesNotNil applies the NotNil predicate on the "session_lifetime_in_minutes" field.
func SessionLifetimeInMinutesNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldSessionLifetimeInMinutes))
}

// UpdateChannelEQ applies the EQ predicate on the "update_channel" field.
func UpdateChannelEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUpdateChannel, v))
}

// UpdateChannelNEQ applies the NEQ predicate on the "update_channel" field.
func UpdateChannelNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldUpdateChannel, v))
}

// UpdateChannelIn applies the In predicate on the "update_channel" field.
func UpdateChannelIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldUpdateChannel, vs...))
}

// UpdateChannelNotIn applies the NotIn predicate on the "update_channel" field.
func UpdateChannelNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldUpdateChannel, vs...))
}

// UpdateChannelGT applies the GT predicate on the "update_channel" field.
func UpdateChannelGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldUpdateChannel, v))
}

// UpdateChannelGTE applies the GTE predicate on the "update_channel" field.
func UpdateChannelGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldUpdateChannel, v))
}

// UpdateChannelLT applies the LT predicate on the "update_channel" field.
func UpdateChannelLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldUpdateChannel, v))
}

// UpdateChannelLTE applies the LTE predicate on the "update_channel" field.
func UpdateChannelLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldUpdateChannel, v))
}

// UpdateChannelContains applies the Contains predicate on the "update_channel" field.
func UpdateChannelContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldUpdateChannel, v))
}

// UpdateChannelHasPrefix applies the HasPrefix predicate on the "update_channel" field.
func UpdateChannelHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldUpdateChannel, v))
}

// UpdateChannelHasSuffix applies the HasSuffix predicate on the "update_channel" field.
func UpdateChannelHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldUpdateChannel, v))
}

// UpdateChannelIsNil applies the IsNil predicate on the "update_channel" field.
func UpdateChannelIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldUpdateChannel))
}

// UpdateChannelNotNil applies the NotNil predicate on the "update_channel" field.
func UpdateChannelNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldUpdateChannel))
}

// UpdateChannelEqualFold applies the EqualFold predicate on the "update_channel" field.
func UpdateChannelEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldUpdateChannel, v))
}

// UpdateChannelContainsFold applies the ContainsFold predicate on the "update_channel" field.
func UpdateChannelContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldUpdateChannel, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCreated, v))
}

// CreatedIsNil applies the IsNil predicate on the "created" field.
func CreatedIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldCreated))
}

// CreatedNotNil applies the NotNil predicate on the "created" field.
func CreatedNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldCreated))
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldModified, v))
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldModified, v))
}

// ModifiedIn applies the In predicate on the "modified" field.
func ModifiedIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldModified, vs...))
}

// ModifiedNotIn applies the NotIn predicate on the "modified" field.
func ModifiedNotIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldModified, vs...))
}

// ModifiedGT applies the GT predicate on the "modified" field.
func ModifiedGT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldModified, v))
}

// ModifiedGTE applies the GTE predicate on the "modified" field.
func ModifiedGTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldModified, v))
}

// ModifiedLT applies the LT predicate on the "modified" field.
func ModifiedLT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldModified, v))
}

// ModifiedLTE applies the LTE predicate on the "modified" field.
func ModifiedLTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldModified, v))
}

// ModifiedIsNil applies the IsNil predicate on the "modified" field.
func ModifiedIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldModified))
}

// ModifiedNotNil applies the NotNil predicate on the "modified" field.
func ModifiedNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldModified))
}

// AgentReportFrequenceInMinutesEQ applies the EQ predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesNEQ applies the NEQ predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesIn applies the In predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldAgentReportFrequenceInMinutes, vs...))
}

// AgentReportFrequenceInMinutesNotIn applies the NotIn predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldAgentReportFrequenceInMinutes, vs...))
}

// AgentReportFrequenceInMinutesGT applies the GT predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesGTE applies the GTE predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesLT applies the LT predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesLTE applies the LTE predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldAgentReportFrequenceInMinutes, v))
}

// AgentReportFrequenceInMinutesIsNil applies the IsNil predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesIsNil() predicate.Settings {
	return predicate.Settings(sql.FieldIsNull(FieldAgentReportFrequenceInMinutes))
}

// AgentReportFrequenceInMinutesNotNil applies the NotNil predicate on the "agent_report_frequence_in_minutes" field.
func AgentReportFrequenceInMinutesNotNil() predicate.Settings {
	return predicate.Settings(sql.FieldNotNull(FieldAgentReportFrequenceInMinutes))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.NotPredicates(p))
}
