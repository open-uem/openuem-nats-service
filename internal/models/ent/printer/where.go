// Code generated by ent, DO NOT EDIT.

package printer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Printer {
	return predicate.Printer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Printer {
	return predicate.Printer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Printer {
	return predicate.Printer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Printer {
	return predicate.Printer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Printer {
	return predicate.Printer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Printer {
	return predicate.Printer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Printer {
	return predicate.Printer(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldName, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldPort, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldIsDefault, v))
}

// IsNetwork applies equality check predicate on the "is_network" field. It's identical to IsNetworkEQ.
func IsNetwork(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldIsNetwork, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Printer {
	return predicate.Printer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Printer {
	return predicate.Printer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Printer {
	return predicate.Printer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Printer {
	return predicate.Printer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Printer {
	return predicate.Printer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Printer {
	return predicate.Printer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Printer {
	return predicate.Printer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Printer {
	return predicate.Printer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Printer {
	return predicate.Printer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Printer {
	return predicate.Printer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Printer {
	return predicate.Printer(sql.FieldContainsFold(FieldName, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v string) predicate.Printer {
	return predicate.Printer(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...string) predicate.Printer {
	return predicate.Printer(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...string) predicate.Printer {
	return predicate.Printer(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v string) predicate.Printer {
	return predicate.Printer(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v string) predicate.Printer {
	return predicate.Printer(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v string) predicate.Printer {
	return predicate.Printer(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v string) predicate.Printer {
	return predicate.Printer(sql.FieldLTE(FieldPort, v))
}

// PortContains applies the Contains predicate on the "port" field.
func PortContains(v string) predicate.Printer {
	return predicate.Printer(sql.FieldContains(FieldPort, v))
}

// PortHasPrefix applies the HasPrefix predicate on the "port" field.
func PortHasPrefix(v string) predicate.Printer {
	return predicate.Printer(sql.FieldHasPrefix(FieldPort, v))
}

// PortHasSuffix applies the HasSuffix predicate on the "port" field.
func PortHasSuffix(v string) predicate.Printer {
	return predicate.Printer(sql.FieldHasSuffix(FieldPort, v))
}

// PortIsNil applies the IsNil predicate on the "port" field.
func PortIsNil() predicate.Printer {
	return predicate.Printer(sql.FieldIsNull(FieldPort))
}

// PortNotNil applies the NotNil predicate on the "port" field.
func PortNotNil() predicate.Printer {
	return predicate.Printer(sql.FieldNotNull(FieldPort))
}

// PortEqualFold applies the EqualFold predicate on the "port" field.
func PortEqualFold(v string) predicate.Printer {
	return predicate.Printer(sql.FieldEqualFold(FieldPort, v))
}

// PortContainsFold applies the ContainsFold predicate on the "port" field.
func PortContainsFold(v string) predicate.Printer {
	return predicate.Printer(sql.FieldContainsFold(FieldPort, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldNEQ(FieldIsDefault, v))
}

// IsDefaultIsNil applies the IsNil predicate on the "is_default" field.
func IsDefaultIsNil() predicate.Printer {
	return predicate.Printer(sql.FieldIsNull(FieldIsDefault))
}

// IsDefaultNotNil applies the NotNil predicate on the "is_default" field.
func IsDefaultNotNil() predicate.Printer {
	return predicate.Printer(sql.FieldNotNull(FieldIsDefault))
}

// IsNetworkEQ applies the EQ predicate on the "is_network" field.
func IsNetworkEQ(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldEQ(FieldIsNetwork, v))
}

// IsNetworkNEQ applies the NEQ predicate on the "is_network" field.
func IsNetworkNEQ(v bool) predicate.Printer {
	return predicate.Printer(sql.FieldNEQ(FieldIsNetwork, v))
}

// IsNetworkIsNil applies the IsNil predicate on the "is_network" field.
func IsNetworkIsNil() predicate.Printer {
	return predicate.Printer(sql.FieldIsNull(FieldIsNetwork))
}

// IsNetworkNotNil applies the NotNil predicate on the "is_network" field.
func IsNetworkNotNil() predicate.Printer {
	return predicate.Printer(sql.FieldNotNull(FieldIsNetwork))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Printer {
	return predicate.Printer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Agent) predicate.Printer {
	return predicate.Printer(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Printer) predicate.Printer {
	return predicate.Printer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Printer) predicate.Printer {
	return predicate.Printer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Printer) predicate.Printer {
	return predicate.Printer(sql.NotPredicates(p))
}
