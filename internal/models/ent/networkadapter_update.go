// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/networkadapter"
	"github.com/doncicuto/openuem_ent/predicate"
)

// NetworkAdapterUpdate is the builder for updating NetworkAdapter entities.
type NetworkAdapterUpdate struct {
	config
	hooks     []Hook
	mutation  *NetworkAdapterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NetworkAdapterUpdate builder.
func (nau *NetworkAdapterUpdate) Where(ps ...predicate.NetworkAdapter) *NetworkAdapterUpdate {
	nau.mutation.Where(ps...)
	return nau
}

// SetName sets the "name" field.
func (nau *NetworkAdapterUpdate) SetName(s string) *NetworkAdapterUpdate {
	nau.mutation.SetName(s)
	return nau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableName(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetName(*s)
	}
	return nau
}

// SetMACAddress sets the "mac_address" field.
func (nau *NetworkAdapterUpdate) SetMACAddress(s string) *NetworkAdapterUpdate {
	nau.mutation.SetMACAddress(s)
	return nau
}

// SetNillableMACAddress sets the "mac_address" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableMACAddress(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetMACAddress(*s)
	}
	return nau
}

// SetAddresses sets the "addresses" field.
func (nau *NetworkAdapterUpdate) SetAddresses(s string) *NetworkAdapterUpdate {
	nau.mutation.SetAddresses(s)
	return nau
}

// SetNillableAddresses sets the "addresses" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableAddresses(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetAddresses(*s)
	}
	return nau
}

// SetSubnet sets the "subnet" field.
func (nau *NetworkAdapterUpdate) SetSubnet(s string) *NetworkAdapterUpdate {
	nau.mutation.SetSubnet(s)
	return nau
}

// SetNillableSubnet sets the "subnet" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableSubnet(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetSubnet(*s)
	}
	return nau
}

// ClearSubnet clears the value of the "subnet" field.
func (nau *NetworkAdapterUpdate) ClearSubnet() *NetworkAdapterUpdate {
	nau.mutation.ClearSubnet()
	return nau
}

// SetDefaultGateway sets the "default_gateway" field.
func (nau *NetworkAdapterUpdate) SetDefaultGateway(s string) *NetworkAdapterUpdate {
	nau.mutation.SetDefaultGateway(s)
	return nau
}

// SetNillableDefaultGateway sets the "default_gateway" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDefaultGateway(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetDefaultGateway(*s)
	}
	return nau
}

// ClearDefaultGateway clears the value of the "default_gateway" field.
func (nau *NetworkAdapterUpdate) ClearDefaultGateway() *NetworkAdapterUpdate {
	nau.mutation.ClearDefaultGateway()
	return nau
}

// SetDNSServers sets the "dns_servers" field.
func (nau *NetworkAdapterUpdate) SetDNSServers(s string) *NetworkAdapterUpdate {
	nau.mutation.SetDNSServers(s)
	return nau
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDNSServers(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetDNSServers(*s)
	}
	return nau
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (nau *NetworkAdapterUpdate) ClearDNSServers() *NetworkAdapterUpdate {
	nau.mutation.ClearDNSServers()
	return nau
}

// SetDNSDomain sets the "dns_domain" field.
func (nau *NetworkAdapterUpdate) SetDNSDomain(s string) *NetworkAdapterUpdate {
	nau.mutation.SetDNSDomain(s)
	return nau
}

// SetNillableDNSDomain sets the "dns_domain" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDNSDomain(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetDNSDomain(*s)
	}
	return nau
}

// ClearDNSDomain clears the value of the "dns_domain" field.
func (nau *NetworkAdapterUpdate) ClearDNSDomain() *NetworkAdapterUpdate {
	nau.mutation.ClearDNSDomain()
	return nau
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (nau *NetworkAdapterUpdate) SetDhcpEnabled(b bool) *NetworkAdapterUpdate {
	nau.mutation.SetDhcpEnabled(b)
	return nau
}

// SetNillableDhcpEnabled sets the "dhcp_enabled" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDhcpEnabled(b *bool) *NetworkAdapterUpdate {
	if b != nil {
		nau.SetDhcpEnabled(*b)
	}
	return nau
}

// ClearDhcpEnabled clears the value of the "dhcp_enabled" field.
func (nau *NetworkAdapterUpdate) ClearDhcpEnabled() *NetworkAdapterUpdate {
	nau.mutation.ClearDhcpEnabled()
	return nau
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (nau *NetworkAdapterUpdate) SetDhcpLeaseObtained(t time.Time) *NetworkAdapterUpdate {
	nau.mutation.SetDhcpLeaseObtained(t)
	return nau
}

// SetNillableDhcpLeaseObtained sets the "dhcp_lease_obtained" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDhcpLeaseObtained(t *time.Time) *NetworkAdapterUpdate {
	if t != nil {
		nau.SetDhcpLeaseObtained(*t)
	}
	return nau
}

// ClearDhcpLeaseObtained clears the value of the "dhcp_lease_obtained" field.
func (nau *NetworkAdapterUpdate) ClearDhcpLeaseObtained() *NetworkAdapterUpdate {
	nau.mutation.ClearDhcpLeaseObtained()
	return nau
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (nau *NetworkAdapterUpdate) SetDhcpLeaseExpired(t time.Time) *NetworkAdapterUpdate {
	nau.mutation.SetDhcpLeaseExpired(t)
	return nau
}

// SetNillableDhcpLeaseExpired sets the "dhcp_lease_expired" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableDhcpLeaseExpired(t *time.Time) *NetworkAdapterUpdate {
	if t != nil {
		nau.SetDhcpLeaseExpired(*t)
	}
	return nau
}

// ClearDhcpLeaseExpired clears the value of the "dhcp_lease_expired" field.
func (nau *NetworkAdapterUpdate) ClearDhcpLeaseExpired() *NetworkAdapterUpdate {
	nau.mutation.ClearDhcpLeaseExpired()
	return nau
}

// SetSpeed sets the "speed" field.
func (nau *NetworkAdapterUpdate) SetSpeed(s string) *NetworkAdapterUpdate {
	nau.mutation.SetSpeed(s)
	return nau
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (nau *NetworkAdapterUpdate) SetNillableSpeed(s *string) *NetworkAdapterUpdate {
	if s != nil {
		nau.SetSpeed(*s)
	}
	return nau
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (nau *NetworkAdapterUpdate) SetOwnerID(id string) *NetworkAdapterUpdate {
	nau.mutation.SetOwnerID(id)
	return nau
}

// SetOwner sets the "owner" edge to the Agent entity.
func (nau *NetworkAdapterUpdate) SetOwner(a *Agent) *NetworkAdapterUpdate {
	return nau.SetOwnerID(a.ID)
}

// Mutation returns the NetworkAdapterMutation object of the builder.
func (nau *NetworkAdapterUpdate) Mutation() *NetworkAdapterMutation {
	return nau.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (nau *NetworkAdapterUpdate) ClearOwner() *NetworkAdapterUpdate {
	nau.mutation.ClearOwner()
	return nau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nau *NetworkAdapterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nau.sqlSave, nau.mutation, nau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nau *NetworkAdapterUpdate) SaveX(ctx context.Context) int {
	affected, err := nau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nau *NetworkAdapterUpdate) Exec(ctx context.Context) error {
	_, err := nau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nau *NetworkAdapterUpdate) ExecX(ctx context.Context) {
	if err := nau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nau *NetworkAdapterUpdate) check() error {
	if nau.mutation.OwnerCleared() && len(nau.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "NetworkAdapter.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nau *NetworkAdapterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NetworkAdapterUpdate {
	nau.modifiers = append(nau.modifiers, modifiers...)
	return nau
}

func (nau *NetworkAdapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkadapter.Table, networkadapter.Columns, sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt))
	if ps := nau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nau.mutation.Name(); ok {
		_spec.SetField(networkadapter.FieldName, field.TypeString, value)
	}
	if value, ok := nau.mutation.MACAddress(); ok {
		_spec.SetField(networkadapter.FieldMACAddress, field.TypeString, value)
	}
	if value, ok := nau.mutation.Addresses(); ok {
		_spec.SetField(networkadapter.FieldAddresses, field.TypeString, value)
	}
	if value, ok := nau.mutation.Subnet(); ok {
		_spec.SetField(networkadapter.FieldSubnet, field.TypeString, value)
	}
	if nau.mutation.SubnetCleared() {
		_spec.ClearField(networkadapter.FieldSubnet, field.TypeString)
	}
	if value, ok := nau.mutation.DefaultGateway(); ok {
		_spec.SetField(networkadapter.FieldDefaultGateway, field.TypeString, value)
	}
	if nau.mutation.DefaultGatewayCleared() {
		_spec.ClearField(networkadapter.FieldDefaultGateway, field.TypeString)
	}
	if value, ok := nau.mutation.DNSServers(); ok {
		_spec.SetField(networkadapter.FieldDNSServers, field.TypeString, value)
	}
	if nau.mutation.DNSServersCleared() {
		_spec.ClearField(networkadapter.FieldDNSServers, field.TypeString)
	}
	if value, ok := nau.mutation.DNSDomain(); ok {
		_spec.SetField(networkadapter.FieldDNSDomain, field.TypeString, value)
	}
	if nau.mutation.DNSDomainCleared() {
		_spec.ClearField(networkadapter.FieldDNSDomain, field.TypeString)
	}
	if value, ok := nau.mutation.DhcpEnabled(); ok {
		_spec.SetField(networkadapter.FieldDhcpEnabled, field.TypeBool, value)
	}
	if nau.mutation.DhcpEnabledCleared() {
		_spec.ClearField(networkadapter.FieldDhcpEnabled, field.TypeBool)
	}
	if value, ok := nau.mutation.DhcpLeaseObtained(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseObtained, field.TypeTime, value)
	}
	if nau.mutation.DhcpLeaseObtainedCleared() {
		_spec.ClearField(networkadapter.FieldDhcpLeaseObtained, field.TypeTime)
	}
	if value, ok := nau.mutation.DhcpLeaseExpired(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseExpired, field.TypeTime, value)
	}
	if nau.mutation.DhcpLeaseExpiredCleared() {
		_spec.ClearField(networkadapter.FieldDhcpLeaseExpired, field.TypeTime)
	}
	if value, ok := nau.mutation.Speed(); ok {
		_spec.SetField(networkadapter.FieldSpeed, field.TypeString, value)
	}
	if nau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkadapter.OwnerTable,
			Columns: []string{networkadapter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkadapter.OwnerTable,
			Columns: []string{networkadapter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkadapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nau.mutation.done = true
	return n, nil
}

// NetworkAdapterUpdateOne is the builder for updating a single NetworkAdapter entity.
type NetworkAdapterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NetworkAdapterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (nauo *NetworkAdapterUpdateOne) SetName(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetName(s)
	return nauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableName(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetName(*s)
	}
	return nauo
}

// SetMACAddress sets the "mac_address" field.
func (nauo *NetworkAdapterUpdateOne) SetMACAddress(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetMACAddress(s)
	return nauo
}

// SetNillableMACAddress sets the "mac_address" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableMACAddress(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetMACAddress(*s)
	}
	return nauo
}

// SetAddresses sets the "addresses" field.
func (nauo *NetworkAdapterUpdateOne) SetAddresses(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetAddresses(s)
	return nauo
}

// SetNillableAddresses sets the "addresses" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableAddresses(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetAddresses(*s)
	}
	return nauo
}

// SetSubnet sets the "subnet" field.
func (nauo *NetworkAdapterUpdateOne) SetSubnet(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetSubnet(s)
	return nauo
}

// SetNillableSubnet sets the "subnet" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableSubnet(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetSubnet(*s)
	}
	return nauo
}

// ClearSubnet clears the value of the "subnet" field.
func (nauo *NetworkAdapterUpdateOne) ClearSubnet() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearSubnet()
	return nauo
}

// SetDefaultGateway sets the "default_gateway" field.
func (nauo *NetworkAdapterUpdateOne) SetDefaultGateway(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDefaultGateway(s)
	return nauo
}

// SetNillableDefaultGateway sets the "default_gateway" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDefaultGateway(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetDefaultGateway(*s)
	}
	return nauo
}

// ClearDefaultGateway clears the value of the "default_gateway" field.
func (nauo *NetworkAdapterUpdateOne) ClearDefaultGateway() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDefaultGateway()
	return nauo
}

// SetDNSServers sets the "dns_servers" field.
func (nauo *NetworkAdapterUpdateOne) SetDNSServers(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDNSServers(s)
	return nauo
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDNSServers(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetDNSServers(*s)
	}
	return nauo
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (nauo *NetworkAdapterUpdateOne) ClearDNSServers() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDNSServers()
	return nauo
}

// SetDNSDomain sets the "dns_domain" field.
func (nauo *NetworkAdapterUpdateOne) SetDNSDomain(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDNSDomain(s)
	return nauo
}

// SetNillableDNSDomain sets the "dns_domain" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDNSDomain(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetDNSDomain(*s)
	}
	return nauo
}

// ClearDNSDomain clears the value of the "dns_domain" field.
func (nauo *NetworkAdapterUpdateOne) ClearDNSDomain() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDNSDomain()
	return nauo
}

// SetDhcpEnabled sets the "dhcp_enabled" field.
func (nauo *NetworkAdapterUpdateOne) SetDhcpEnabled(b bool) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDhcpEnabled(b)
	return nauo
}

// SetNillableDhcpEnabled sets the "dhcp_enabled" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDhcpEnabled(b *bool) *NetworkAdapterUpdateOne {
	if b != nil {
		nauo.SetDhcpEnabled(*b)
	}
	return nauo
}

// ClearDhcpEnabled clears the value of the "dhcp_enabled" field.
func (nauo *NetworkAdapterUpdateOne) ClearDhcpEnabled() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDhcpEnabled()
	return nauo
}

// SetDhcpLeaseObtained sets the "dhcp_lease_obtained" field.
func (nauo *NetworkAdapterUpdateOne) SetDhcpLeaseObtained(t time.Time) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDhcpLeaseObtained(t)
	return nauo
}

// SetNillableDhcpLeaseObtained sets the "dhcp_lease_obtained" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDhcpLeaseObtained(t *time.Time) *NetworkAdapterUpdateOne {
	if t != nil {
		nauo.SetDhcpLeaseObtained(*t)
	}
	return nauo
}

// ClearDhcpLeaseObtained clears the value of the "dhcp_lease_obtained" field.
func (nauo *NetworkAdapterUpdateOne) ClearDhcpLeaseObtained() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDhcpLeaseObtained()
	return nauo
}

// SetDhcpLeaseExpired sets the "dhcp_lease_expired" field.
func (nauo *NetworkAdapterUpdateOne) SetDhcpLeaseExpired(t time.Time) *NetworkAdapterUpdateOne {
	nauo.mutation.SetDhcpLeaseExpired(t)
	return nauo
}

// SetNillableDhcpLeaseExpired sets the "dhcp_lease_expired" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableDhcpLeaseExpired(t *time.Time) *NetworkAdapterUpdateOne {
	if t != nil {
		nauo.SetDhcpLeaseExpired(*t)
	}
	return nauo
}

// ClearDhcpLeaseExpired clears the value of the "dhcp_lease_expired" field.
func (nauo *NetworkAdapterUpdateOne) ClearDhcpLeaseExpired() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearDhcpLeaseExpired()
	return nauo
}

// SetSpeed sets the "speed" field.
func (nauo *NetworkAdapterUpdateOne) SetSpeed(s string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetSpeed(s)
	return nauo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (nauo *NetworkAdapterUpdateOne) SetNillableSpeed(s *string) *NetworkAdapterUpdateOne {
	if s != nil {
		nauo.SetSpeed(*s)
	}
	return nauo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (nauo *NetworkAdapterUpdateOne) SetOwnerID(id string) *NetworkAdapterUpdateOne {
	nauo.mutation.SetOwnerID(id)
	return nauo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (nauo *NetworkAdapterUpdateOne) SetOwner(a *Agent) *NetworkAdapterUpdateOne {
	return nauo.SetOwnerID(a.ID)
}

// Mutation returns the NetworkAdapterMutation object of the builder.
func (nauo *NetworkAdapterUpdateOne) Mutation() *NetworkAdapterMutation {
	return nauo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (nauo *NetworkAdapterUpdateOne) ClearOwner() *NetworkAdapterUpdateOne {
	nauo.mutation.ClearOwner()
	return nauo
}

// Where appends a list predicates to the NetworkAdapterUpdate builder.
func (nauo *NetworkAdapterUpdateOne) Where(ps ...predicate.NetworkAdapter) *NetworkAdapterUpdateOne {
	nauo.mutation.Where(ps...)
	return nauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nauo *NetworkAdapterUpdateOne) Select(field string, fields ...string) *NetworkAdapterUpdateOne {
	nauo.fields = append([]string{field}, fields...)
	return nauo
}

// Save executes the query and returns the updated NetworkAdapter entity.
func (nauo *NetworkAdapterUpdateOne) Save(ctx context.Context) (*NetworkAdapter, error) {
	return withHooks(ctx, nauo.sqlSave, nauo.mutation, nauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nauo *NetworkAdapterUpdateOne) SaveX(ctx context.Context) *NetworkAdapter {
	node, err := nauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nauo *NetworkAdapterUpdateOne) Exec(ctx context.Context) error {
	_, err := nauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nauo *NetworkAdapterUpdateOne) ExecX(ctx context.Context) {
	if err := nauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nauo *NetworkAdapterUpdateOne) check() error {
	if nauo.mutation.OwnerCleared() && len(nauo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "NetworkAdapter.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nauo *NetworkAdapterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NetworkAdapterUpdateOne {
	nauo.modifiers = append(nauo.modifiers, modifiers...)
	return nauo
}

func (nauo *NetworkAdapterUpdateOne) sqlSave(ctx context.Context) (_node *NetworkAdapter, err error) {
	if err := nauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkadapter.Table, networkadapter.Columns, sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt))
	id, ok := nauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "NetworkAdapter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networkadapter.FieldID)
		for _, f := range fields {
			if !networkadapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != networkadapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nauo.mutation.Name(); ok {
		_spec.SetField(networkadapter.FieldName, field.TypeString, value)
	}
	if value, ok := nauo.mutation.MACAddress(); ok {
		_spec.SetField(networkadapter.FieldMACAddress, field.TypeString, value)
	}
	if value, ok := nauo.mutation.Addresses(); ok {
		_spec.SetField(networkadapter.FieldAddresses, field.TypeString, value)
	}
	if value, ok := nauo.mutation.Subnet(); ok {
		_spec.SetField(networkadapter.FieldSubnet, field.TypeString, value)
	}
	if nauo.mutation.SubnetCleared() {
		_spec.ClearField(networkadapter.FieldSubnet, field.TypeString)
	}
	if value, ok := nauo.mutation.DefaultGateway(); ok {
		_spec.SetField(networkadapter.FieldDefaultGateway, field.TypeString, value)
	}
	if nauo.mutation.DefaultGatewayCleared() {
		_spec.ClearField(networkadapter.FieldDefaultGateway, field.TypeString)
	}
	if value, ok := nauo.mutation.DNSServers(); ok {
		_spec.SetField(networkadapter.FieldDNSServers, field.TypeString, value)
	}
	if nauo.mutation.DNSServersCleared() {
		_spec.ClearField(networkadapter.FieldDNSServers, field.TypeString)
	}
	if value, ok := nauo.mutation.DNSDomain(); ok {
		_spec.SetField(networkadapter.FieldDNSDomain, field.TypeString, value)
	}
	if nauo.mutation.DNSDomainCleared() {
		_spec.ClearField(networkadapter.FieldDNSDomain, field.TypeString)
	}
	if value, ok := nauo.mutation.DhcpEnabled(); ok {
		_spec.SetField(networkadapter.FieldDhcpEnabled, field.TypeBool, value)
	}
	if nauo.mutation.DhcpEnabledCleared() {
		_spec.ClearField(networkadapter.FieldDhcpEnabled, field.TypeBool)
	}
	if value, ok := nauo.mutation.DhcpLeaseObtained(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseObtained, field.TypeTime, value)
	}
	if nauo.mutation.DhcpLeaseObtainedCleared() {
		_spec.ClearField(networkadapter.FieldDhcpLeaseObtained, field.TypeTime)
	}
	if value, ok := nauo.mutation.DhcpLeaseExpired(); ok {
		_spec.SetField(networkadapter.FieldDhcpLeaseExpired, field.TypeTime, value)
	}
	if nauo.mutation.DhcpLeaseExpiredCleared() {
		_spec.ClearField(networkadapter.FieldDhcpLeaseExpired, field.TypeTime)
	}
	if value, ok := nauo.mutation.Speed(); ok {
		_spec.SetField(networkadapter.FieldSpeed, field.TypeString, value)
	}
	if nauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkadapter.OwnerTable,
			Columns: []string{networkadapter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkadapter.OwnerTable,
			Columns: []string{networkadapter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nauo.modifiers...)
	_node = &NetworkAdapter{config: nauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkadapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nauo.mutation.done = true
	return _node, nil
}
