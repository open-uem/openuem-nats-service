// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/logicaldisk"
)

// LogicalDiskCreate is the builder for creating a LogicalDisk entity.
type LogicalDiskCreate struct {
	config
	mutation *LogicalDiskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (ldc *LogicalDiskCreate) SetLabel(s string) *LogicalDiskCreate {
	ldc.mutation.SetLabel(s)
	return ldc
}

// SetFilesystem sets the "filesystem" field.
func (ldc *LogicalDiskCreate) SetFilesystem(s string) *LogicalDiskCreate {
	ldc.mutation.SetFilesystem(s)
	return ldc
}

// SetNillableFilesystem sets the "filesystem" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableFilesystem(s *string) *LogicalDiskCreate {
	if s != nil {
		ldc.SetFilesystem(*s)
	}
	return ldc
}

// SetUsage sets the "usage" field.
func (ldc *LogicalDiskCreate) SetUsage(i int8) *LogicalDiskCreate {
	ldc.mutation.SetUsage(i)
	return ldc
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableUsage(i *int8) *LogicalDiskCreate {
	if i != nil {
		ldc.SetUsage(*i)
	}
	return ldc
}

// SetSizeInUnits sets the "size_in_units" field.
func (ldc *LogicalDiskCreate) SetSizeInUnits(s string) *LogicalDiskCreate {
	ldc.mutation.SetSizeInUnits(s)
	return ldc
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableSizeInUnits(s *string) *LogicalDiskCreate {
	if s != nil {
		ldc.SetSizeInUnits(*s)
	}
	return ldc
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (ldc *LogicalDiskCreate) SetRemainingSpaceInUnits(s string) *LogicalDiskCreate {
	ldc.mutation.SetRemainingSpaceInUnits(s)
	return ldc
}

// SetNillableRemainingSpaceInUnits sets the "remaining_space_in_units" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableRemainingSpaceInUnits(s *string) *LogicalDiskCreate {
	if s != nil {
		ldc.SetRemainingSpaceInUnits(*s)
	}
	return ldc
}

// SetVolumeName sets the "volume_name" field.
func (ldc *LogicalDiskCreate) SetVolumeName(s string) *LogicalDiskCreate {
	ldc.mutation.SetVolumeName(s)
	return ldc
}

// SetNillableVolumeName sets the "volume_name" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableVolumeName(s *string) *LogicalDiskCreate {
	if s != nil {
		ldc.SetVolumeName(*s)
	}
	return ldc
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (ldc *LogicalDiskCreate) SetBitlockerStatus(s string) *LogicalDiskCreate {
	ldc.mutation.SetBitlockerStatus(s)
	return ldc
}

// SetNillableBitlockerStatus sets the "bitlocker_status" field if the given value is not nil.
func (ldc *LogicalDiskCreate) SetNillableBitlockerStatus(s *string) *LogicalDiskCreate {
	if s != nil {
		ldc.SetBitlockerStatus(*s)
	}
	return ldc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (ldc *LogicalDiskCreate) SetOwnerID(id string) *LogicalDiskCreate {
	ldc.mutation.SetOwnerID(id)
	return ldc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (ldc *LogicalDiskCreate) SetOwner(a *Agent) *LogicalDiskCreate {
	return ldc.SetOwnerID(a.ID)
}

// Mutation returns the LogicalDiskMutation object of the builder.
func (ldc *LogicalDiskCreate) Mutation() *LogicalDiskMutation {
	return ldc.mutation
}

// Save creates the LogicalDisk in the database.
func (ldc *LogicalDiskCreate) Save(ctx context.Context) (*LogicalDisk, error) {
	ldc.defaults()
	return withHooks(ctx, ldc.sqlSave, ldc.mutation, ldc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ldc *LogicalDiskCreate) SaveX(ctx context.Context) *LogicalDisk {
	v, err := ldc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ldc *LogicalDiskCreate) Exec(ctx context.Context) error {
	_, err := ldc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldc *LogicalDiskCreate) ExecX(ctx context.Context) {
	if err := ldc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ldc *LogicalDiskCreate) defaults() {
	if _, ok := ldc.mutation.Usage(); !ok {
		v := logicaldisk.DefaultUsage
		ldc.mutation.SetUsage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ldc *LogicalDiskCreate) check() error {
	if _, ok := ldc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`openuem_ent: missing required field "LogicalDisk.label"`)}
	}
	if _, ok := ldc.mutation.Usage(); !ok {
		return &ValidationError{Name: "usage", err: errors.New(`openuem_ent: missing required field "LogicalDisk.usage"`)}
	}
	if len(ldc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "LogicalDisk.owner"`)}
	}
	return nil
}

func (ldc *LogicalDiskCreate) sqlSave(ctx context.Context) (*LogicalDisk, error) {
	if err := ldc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ldc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ldc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ldc.mutation.id = &_node.ID
	ldc.mutation.done = true
	return _node, nil
}

func (ldc *LogicalDiskCreate) createSpec() (*LogicalDisk, *sqlgraph.CreateSpec) {
	var (
		_node = &LogicalDisk{config: ldc.config}
		_spec = sqlgraph.NewCreateSpec(logicaldisk.Table, sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ldc.conflict
	if value, ok := ldc.mutation.Label(); ok {
		_spec.SetField(logicaldisk.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := ldc.mutation.Filesystem(); ok {
		_spec.SetField(logicaldisk.FieldFilesystem, field.TypeString, value)
		_node.Filesystem = value
	}
	if value, ok := ldc.mutation.Usage(); ok {
		_spec.SetField(logicaldisk.FieldUsage, field.TypeInt8, value)
		_node.Usage = value
	}
	if value, ok := ldc.mutation.SizeInUnits(); ok {
		_spec.SetField(logicaldisk.FieldSizeInUnits, field.TypeString, value)
		_node.SizeInUnits = value
	}
	if value, ok := ldc.mutation.RemainingSpaceInUnits(); ok {
		_spec.SetField(logicaldisk.FieldRemainingSpaceInUnits, field.TypeString, value)
		_node.RemainingSpaceInUnits = value
	}
	if value, ok := ldc.mutation.VolumeName(); ok {
		_spec.SetField(logicaldisk.FieldVolumeName, field.TypeString, value)
		_node.VolumeName = value
	}
	if value, ok := ldc.mutation.BitlockerStatus(); ok {
		_spec.SetField(logicaldisk.FieldBitlockerStatus, field.TypeString, value)
		_node.BitlockerStatus = value
	}
	if nodes := ldc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logicaldisk.OwnerTable,
			Columns: []string{logicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_logicaldisks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogicalDisk.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogicalDiskUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (ldc *LogicalDiskCreate) OnConflict(opts ...sql.ConflictOption) *LogicalDiskUpsertOne {
	ldc.conflict = opts
	return &LogicalDiskUpsertOne{
		create: ldc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ldc *LogicalDiskCreate) OnConflictColumns(columns ...string) *LogicalDiskUpsertOne {
	ldc.conflict = append(ldc.conflict, sql.ConflictColumns(columns...))
	return &LogicalDiskUpsertOne{
		create: ldc,
	}
}

type (
	// LogicalDiskUpsertOne is the builder for "upsert"-ing
	//  one LogicalDisk node.
	LogicalDiskUpsertOne struct {
		create *LogicalDiskCreate
	}

	// LogicalDiskUpsert is the "OnConflict" setter.
	LogicalDiskUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *LogicalDiskUpsert) SetLabel(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateLabel() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldLabel)
	return u
}

// SetFilesystem sets the "filesystem" field.
func (u *LogicalDiskUpsert) SetFilesystem(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldFilesystem, v)
	return u
}

// UpdateFilesystem sets the "filesystem" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateFilesystem() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldFilesystem)
	return u
}

// ClearFilesystem clears the value of the "filesystem" field.
func (u *LogicalDiskUpsert) ClearFilesystem() *LogicalDiskUpsert {
	u.SetNull(logicaldisk.FieldFilesystem)
	return u
}

// SetUsage sets the "usage" field.
func (u *LogicalDiskUpsert) SetUsage(v int8) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldUsage, v)
	return u
}

// UpdateUsage sets the "usage" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateUsage() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldUsage)
	return u
}

// AddUsage adds v to the "usage" field.
func (u *LogicalDiskUpsert) AddUsage(v int8) *LogicalDiskUpsert {
	u.Add(logicaldisk.FieldUsage, v)
	return u
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *LogicalDiskUpsert) SetSizeInUnits(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldSizeInUnits, v)
	return u
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateSizeInUnits() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldSizeInUnits)
	return u
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *LogicalDiskUpsert) ClearSizeInUnits() *LogicalDiskUpsert {
	u.SetNull(logicaldisk.FieldSizeInUnits)
	return u
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (u *LogicalDiskUpsert) SetRemainingSpaceInUnits(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldRemainingSpaceInUnits, v)
	return u
}

// UpdateRemainingSpaceInUnits sets the "remaining_space_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateRemainingSpaceInUnits() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldRemainingSpaceInUnits)
	return u
}

// ClearRemainingSpaceInUnits clears the value of the "remaining_space_in_units" field.
func (u *LogicalDiskUpsert) ClearRemainingSpaceInUnits() *LogicalDiskUpsert {
	u.SetNull(logicaldisk.FieldRemainingSpaceInUnits)
	return u
}

// SetVolumeName sets the "volume_name" field.
func (u *LogicalDiskUpsert) SetVolumeName(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldVolumeName, v)
	return u
}

// UpdateVolumeName sets the "volume_name" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateVolumeName() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldVolumeName)
	return u
}

// ClearVolumeName clears the value of the "volume_name" field.
func (u *LogicalDiskUpsert) ClearVolumeName() *LogicalDiskUpsert {
	u.SetNull(logicaldisk.FieldVolumeName)
	return u
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (u *LogicalDiskUpsert) SetBitlockerStatus(v string) *LogicalDiskUpsert {
	u.Set(logicaldisk.FieldBitlockerStatus, v)
	return u
}

// UpdateBitlockerStatus sets the "bitlocker_status" field to the value that was provided on create.
func (u *LogicalDiskUpsert) UpdateBitlockerStatus() *LogicalDiskUpsert {
	u.SetExcluded(logicaldisk.FieldBitlockerStatus)
	return u
}

// ClearBitlockerStatus clears the value of the "bitlocker_status" field.
func (u *LogicalDiskUpsert) ClearBitlockerStatus() *LogicalDiskUpsert {
	u.SetNull(logicaldisk.FieldBitlockerStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LogicalDiskUpsertOne) UpdateNewValues() *LogicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LogicalDiskUpsertOne) Ignore() *LogicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogicalDiskUpsertOne) DoNothing() *LogicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogicalDiskCreate.OnConflict
// documentation for more info.
func (u *LogicalDiskUpsertOne) Update(set func(*LogicalDiskUpsert)) *LogicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogicalDiskUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *LogicalDiskUpsertOne) SetLabel(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateLabel() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateLabel()
	})
}

// SetFilesystem sets the "filesystem" field.
func (u *LogicalDiskUpsertOne) SetFilesystem(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetFilesystem(v)
	})
}

// UpdateFilesystem sets the "filesystem" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateFilesystem() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateFilesystem()
	})
}

// ClearFilesystem clears the value of the "filesystem" field.
func (u *LogicalDiskUpsertOne) ClearFilesystem() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearFilesystem()
	})
}

// SetUsage sets the "usage" field.
func (u *LogicalDiskUpsertOne) SetUsage(v int8) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetUsage(v)
	})
}

// AddUsage adds v to the "usage" field.
func (u *LogicalDiskUpsertOne) AddUsage(v int8) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.AddUsage(v)
	})
}

// UpdateUsage sets the "usage" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateUsage() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateUsage()
	})
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *LogicalDiskUpsertOne) SetSizeInUnits(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetSizeInUnits(v)
	})
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateSizeInUnits() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateSizeInUnits()
	})
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *LogicalDiskUpsertOne) ClearSizeInUnits() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearSizeInUnits()
	})
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (u *LogicalDiskUpsertOne) SetRemainingSpaceInUnits(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetRemainingSpaceInUnits(v)
	})
}

// UpdateRemainingSpaceInUnits sets the "remaining_space_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateRemainingSpaceInUnits() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateRemainingSpaceInUnits()
	})
}

// ClearRemainingSpaceInUnits clears the value of the "remaining_space_in_units" field.
func (u *LogicalDiskUpsertOne) ClearRemainingSpaceInUnits() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearRemainingSpaceInUnits()
	})
}

// SetVolumeName sets the "volume_name" field.
func (u *LogicalDiskUpsertOne) SetVolumeName(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetVolumeName(v)
	})
}

// UpdateVolumeName sets the "volume_name" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateVolumeName() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateVolumeName()
	})
}

// ClearVolumeName clears the value of the "volume_name" field.
func (u *LogicalDiskUpsertOne) ClearVolumeName() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearVolumeName()
	})
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (u *LogicalDiskUpsertOne) SetBitlockerStatus(v string) *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetBitlockerStatus(v)
	})
}

// UpdateBitlockerStatus sets the "bitlocker_status" field to the value that was provided on create.
func (u *LogicalDiskUpsertOne) UpdateBitlockerStatus() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateBitlockerStatus()
	})
}

// ClearBitlockerStatus clears the value of the "bitlocker_status" field.
func (u *LogicalDiskUpsertOne) ClearBitlockerStatus() *LogicalDiskUpsertOne {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearBitlockerStatus()
	})
}

// Exec executes the query.
func (u *LogicalDiskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for LogicalDiskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogicalDiskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LogicalDiskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LogicalDiskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LogicalDiskCreateBulk is the builder for creating many LogicalDisk entities in bulk.
type LogicalDiskCreateBulk struct {
	config
	err      error
	builders []*LogicalDiskCreate
	conflict []sql.ConflictOption
}

// Save creates the LogicalDisk entities in the database.
func (ldcb *LogicalDiskCreateBulk) Save(ctx context.Context) ([]*LogicalDisk, error) {
	if ldcb.err != nil {
		return nil, ldcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ldcb.builders))
	nodes := make([]*LogicalDisk, len(ldcb.builders))
	mutators := make([]Mutator, len(ldcb.builders))
	for i := range ldcb.builders {
		func(i int, root context.Context) {
			builder := ldcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogicalDiskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ldcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ldcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ldcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ldcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ldcb *LogicalDiskCreateBulk) SaveX(ctx context.Context) []*LogicalDisk {
	v, err := ldcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ldcb *LogicalDiskCreateBulk) Exec(ctx context.Context) error {
	_, err := ldcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldcb *LogicalDiskCreateBulk) ExecX(ctx context.Context) {
	if err := ldcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogicalDisk.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogicalDiskUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (ldcb *LogicalDiskCreateBulk) OnConflict(opts ...sql.ConflictOption) *LogicalDiskUpsertBulk {
	ldcb.conflict = opts
	return &LogicalDiskUpsertBulk{
		create: ldcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ldcb *LogicalDiskCreateBulk) OnConflictColumns(columns ...string) *LogicalDiskUpsertBulk {
	ldcb.conflict = append(ldcb.conflict, sql.ConflictColumns(columns...))
	return &LogicalDiskUpsertBulk{
		create: ldcb,
	}
}

// LogicalDiskUpsertBulk is the builder for "upsert"-ing
// a bulk of LogicalDisk nodes.
type LogicalDiskUpsertBulk struct {
	create *LogicalDiskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LogicalDiskUpsertBulk) UpdateNewValues() *LogicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogicalDisk.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LogicalDiskUpsertBulk) Ignore() *LogicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogicalDiskUpsertBulk) DoNothing() *LogicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogicalDiskCreateBulk.OnConflict
// documentation for more info.
func (u *LogicalDiskUpsertBulk) Update(set func(*LogicalDiskUpsert)) *LogicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogicalDiskUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *LogicalDiskUpsertBulk) SetLabel(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateLabel() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateLabel()
	})
}

// SetFilesystem sets the "filesystem" field.
func (u *LogicalDiskUpsertBulk) SetFilesystem(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetFilesystem(v)
	})
}

// UpdateFilesystem sets the "filesystem" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateFilesystem() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateFilesystem()
	})
}

// ClearFilesystem clears the value of the "filesystem" field.
func (u *LogicalDiskUpsertBulk) ClearFilesystem() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearFilesystem()
	})
}

// SetUsage sets the "usage" field.
func (u *LogicalDiskUpsertBulk) SetUsage(v int8) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetUsage(v)
	})
}

// AddUsage adds v to the "usage" field.
func (u *LogicalDiskUpsertBulk) AddUsage(v int8) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.AddUsage(v)
	})
}

// UpdateUsage sets the "usage" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateUsage() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateUsage()
	})
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *LogicalDiskUpsertBulk) SetSizeInUnits(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetSizeInUnits(v)
	})
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateSizeInUnits() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateSizeInUnits()
	})
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *LogicalDiskUpsertBulk) ClearSizeInUnits() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearSizeInUnits()
	})
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (u *LogicalDiskUpsertBulk) SetRemainingSpaceInUnits(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetRemainingSpaceInUnits(v)
	})
}

// UpdateRemainingSpaceInUnits sets the "remaining_space_in_units" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateRemainingSpaceInUnits() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateRemainingSpaceInUnits()
	})
}

// ClearRemainingSpaceInUnits clears the value of the "remaining_space_in_units" field.
func (u *LogicalDiskUpsertBulk) ClearRemainingSpaceInUnits() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearRemainingSpaceInUnits()
	})
}

// SetVolumeName sets the "volume_name" field.
func (u *LogicalDiskUpsertBulk) SetVolumeName(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetVolumeName(v)
	})
}

// UpdateVolumeName sets the "volume_name" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateVolumeName() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateVolumeName()
	})
}

// ClearVolumeName clears the value of the "volume_name" field.
func (u *LogicalDiskUpsertBulk) ClearVolumeName() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearVolumeName()
	})
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (u *LogicalDiskUpsertBulk) SetBitlockerStatus(v string) *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.SetBitlockerStatus(v)
	})
}

// UpdateBitlockerStatus sets the "bitlocker_status" field to the value that was provided on create.
func (u *LogicalDiskUpsertBulk) UpdateBitlockerStatus() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.UpdateBitlockerStatus()
	})
}

// ClearBitlockerStatus clears the value of the "bitlocker_status" field.
func (u *LogicalDiskUpsertBulk) ClearBitlockerStatus() *LogicalDiskUpsertBulk {
	return u.Update(func(s *LogicalDiskUpsert) {
		s.ClearBitlockerStatus()
	})
}

// Exec executes the query.
func (u *LogicalDiskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the LogicalDiskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for LogicalDiskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogicalDiskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
