// Code generated by ent, DO NOT EDIT.

package operatingsystem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the operatingsystem type in the database.
	Label = "operating_system"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEdition holds the string denoting the edition field in the database.
	FieldEdition = "edition"
	// FieldInstallDate holds the string denoting the install_date field in the database.
	FieldInstallDate = "install_date"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldLastBootupTime holds the string denoting the last_bootup_time field in the database.
	FieldLastBootupTime = "last_bootup_time"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "oid"
	// Table holds the table name of the operatingsystem in the database.
	Table = "operating_systems"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "operating_systems"
	// OwnerInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OwnerInverseTable = "agents"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "agent_operatingsystem"
)

// Columns holds all SQL columns for operatingsystem fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldVersion,
	FieldDescription,
	FieldEdition,
	FieldInstallDate,
	FieldArch,
	FieldUsername,
	FieldLastBootupTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "operating_systems"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_operatingsystem",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OperatingSystem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEdition orders the results by the edition field.
func ByEdition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEdition, opts...).ToFunc()
}

// ByInstallDate orders the results by the install_date field.
func ByInstallDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallDate, opts...).ToFunc()
}

// ByArch orders the results by the arch field.
func ByArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArch, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByLastBootupTime orders the results by the last_bootup_time field.
func ByLastBootupTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastBootupTime, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
	)
}
