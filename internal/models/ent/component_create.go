// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/component"
)

// ComponentCreate is the builder for creating a Component entity.
type ComponentCreate struct {
	config
	mutation *ComponentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHostname sets the "hostname" field.
func (cc *ComponentCreate) SetHostname(s string) *ComponentCreate {
	cc.mutation.SetHostname(s)
	return cc
}

// SetArch sets the "arch" field.
func (cc *ComponentCreate) SetArch(s string) *ComponentCreate {
	cc.mutation.SetArch(s)
	return cc
}

// SetOs sets the "os" field.
func (cc *ComponentCreate) SetOs(s string) *ComponentCreate {
	cc.mutation.SetOs(s)
	return cc
}

// SetComponent sets the "component" field.
func (cc *ComponentCreate) SetComponent(c component.Component) *ComponentCreate {
	cc.mutation.SetComponent(c)
	return cc
}

// SetVersion sets the "version" field.
func (cc *ComponentCreate) SetVersion(s string) *ComponentCreate {
	cc.mutation.SetVersion(s)
	return cc
}

// SetChannel sets the "channel" field.
func (cc *ComponentCreate) SetChannel(c component.Channel) *ComponentCreate {
	cc.mutation.SetChannel(c)
	return cc
}

// SetUpdateStatus sets the "update_status" field.
func (cc *ComponentCreate) SetUpdateStatus(cs component.UpdateStatus) *ComponentCreate {
	cc.mutation.SetUpdateStatus(cs)
	return cc
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableUpdateStatus(cs *component.UpdateStatus) *ComponentCreate {
	if cs != nil {
		cc.SetUpdateStatus(*cs)
	}
	return cc
}

// SetUpdateMessage sets the "update_message" field.
func (cc *ComponentCreate) SetUpdateMessage(s string) *ComponentCreate {
	cc.mutation.SetUpdateMessage(s)
	return cc
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableUpdateMessage(s *string) *ComponentCreate {
	if s != nil {
		cc.SetUpdateMessage(*s)
	}
	return cc
}

// SetUpdateWhen sets the "update_when" field.
func (cc *ComponentCreate) SetUpdateWhen(t time.Time) *ComponentCreate {
	cc.mutation.SetUpdateWhen(t)
	return cc
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableUpdateWhen(t *time.Time) *ComponentCreate {
	if t != nil {
		cc.SetUpdateWhen(*t)
	}
	return cc
}

// Mutation returns the ComponentMutation object of the builder.
func (cc *ComponentCreate) Mutation() *ComponentMutation {
	return cc.mutation
}

// Save creates the Component in the database.
func (cc *ComponentCreate) Save(ctx context.Context) (*Component, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComponentCreate) SaveX(ctx context.Context) *Component {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ComponentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ComponentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComponentCreate) check() error {
	if _, ok := cc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`openuem_ent: missing required field "Component.hostname"`)}
	}
	if _, ok := cc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`openuem_ent: missing required field "Component.arch"`)}
	}
	if _, ok := cc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`openuem_ent: missing required field "Component.os"`)}
	}
	if _, ok := cc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`openuem_ent: missing required field "Component.component"`)}
	}
	if v, ok := cc.mutation.Component(); ok {
		if err := component.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.component": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`openuem_ent: missing required field "Component.version"`)}
	}
	if _, ok := cc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`openuem_ent: missing required field "Component.channel"`)}
	}
	if v, ok := cc.mutation.Channel(); ok {
		if err := component.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.channel": %w`, err)}
		}
	}
	if v, ok := cc.mutation.UpdateStatus(); ok {
		if err := component.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`openuem_ent: validator failed for field "Component.update_status": %w`, err)}
		}
	}
	return nil
}

func (cc *ComponentCreate) sqlSave(ctx context.Context) (*Component, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ComponentCreate) createSpec() (*Component, *sqlgraph.CreateSpec) {
	var (
		_node = &Component{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(component.Table, sqlgraph.NewFieldSpec(component.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Hostname(); ok {
		_spec.SetField(component.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := cc.mutation.Arch(); ok {
		_spec.SetField(component.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := cc.mutation.Os(); ok {
		_spec.SetField(component.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := cc.mutation.Component(); ok {
		_spec.SetField(component.FieldComponent, field.TypeEnum, value)
		_node.Component = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.Channel(); ok {
		_spec.SetField(component.FieldChannel, field.TypeEnum, value)
		_node.Channel = value
	}
	if value, ok := cc.mutation.UpdateStatus(); ok {
		_spec.SetField(component.FieldUpdateStatus, field.TypeEnum, value)
		_node.UpdateStatus = value
	}
	if value, ok := cc.mutation.UpdateMessage(); ok {
		_spec.SetField(component.FieldUpdateMessage, field.TypeString, value)
		_node.UpdateMessage = value
	}
	if value, ok := cc.mutation.UpdateWhen(); ok {
		_spec.SetField(component.FieldUpdateWhen, field.TypeTime, value)
		_node.UpdateWhen = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Component.Create().
//		SetHostname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ComponentUpsert) {
//			SetHostname(v+v).
//		}).
//		Exec(ctx)
func (cc *ComponentCreate) OnConflict(opts ...sql.ConflictOption) *ComponentUpsertOne {
	cc.conflict = opts
	return &ComponentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Component.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ComponentCreate) OnConflictColumns(columns ...string) *ComponentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ComponentUpsertOne{
		create: cc,
	}
}

type (
	// ComponentUpsertOne is the builder for "upsert"-ing
	//  one Component node.
	ComponentUpsertOne struct {
		create *ComponentCreate
	}

	// ComponentUpsert is the "OnConflict" setter.
	ComponentUpsert struct {
		*sql.UpdateSet
	}
)

// SetHostname sets the "hostname" field.
func (u *ComponentUpsert) SetHostname(v string) *ComponentUpsert {
	u.Set(component.FieldHostname, v)
	return u
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateHostname() *ComponentUpsert {
	u.SetExcluded(component.FieldHostname)
	return u
}

// SetArch sets the "arch" field.
func (u *ComponentUpsert) SetArch(v string) *ComponentUpsert {
	u.Set(component.FieldArch, v)
	return u
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateArch() *ComponentUpsert {
	u.SetExcluded(component.FieldArch)
	return u
}

// SetOs sets the "os" field.
func (u *ComponentUpsert) SetOs(v string) *ComponentUpsert {
	u.Set(component.FieldOs, v)
	return u
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateOs() *ComponentUpsert {
	u.SetExcluded(component.FieldOs)
	return u
}

// SetComponent sets the "component" field.
func (u *ComponentUpsert) SetComponent(v component.Component) *ComponentUpsert {
	u.Set(component.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateComponent() *ComponentUpsert {
	u.SetExcluded(component.FieldComponent)
	return u
}

// SetVersion sets the "version" field.
func (u *ComponentUpsert) SetVersion(v string) *ComponentUpsert {
	u.Set(component.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateVersion() *ComponentUpsert {
	u.SetExcluded(component.FieldVersion)
	return u
}

// SetChannel sets the "channel" field.
func (u *ComponentUpsert) SetChannel(v component.Channel) *ComponentUpsert {
	u.Set(component.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateChannel() *ComponentUpsert {
	u.SetExcluded(component.FieldChannel)
	return u
}

// SetUpdateStatus sets the "update_status" field.
func (u *ComponentUpsert) SetUpdateStatus(v component.UpdateStatus) *ComponentUpsert {
	u.Set(component.FieldUpdateStatus, v)
	return u
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateUpdateStatus() *ComponentUpsert {
	u.SetExcluded(component.FieldUpdateStatus)
	return u
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ComponentUpsert) ClearUpdateStatus() *ComponentUpsert {
	u.SetNull(component.FieldUpdateStatus)
	return u
}

// SetUpdateMessage sets the "update_message" field.
func (u *ComponentUpsert) SetUpdateMessage(v string) *ComponentUpsert {
	u.Set(component.FieldUpdateMessage, v)
	return u
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateUpdateMessage() *ComponentUpsert {
	u.SetExcluded(component.FieldUpdateMessage)
	return u
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ComponentUpsert) ClearUpdateMessage() *ComponentUpsert {
	u.SetNull(component.FieldUpdateMessage)
	return u
}

// SetUpdateWhen sets the "update_when" field.
func (u *ComponentUpsert) SetUpdateWhen(v time.Time) *ComponentUpsert {
	u.Set(component.FieldUpdateWhen, v)
	return u
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ComponentUpsert) UpdateUpdateWhen() *ComponentUpsert {
	u.SetExcluded(component.FieldUpdateWhen)
	return u
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ComponentUpsert) ClearUpdateWhen() *ComponentUpsert {
	u.SetNull(component.FieldUpdateWhen)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Component.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ComponentUpsertOne) UpdateNewValues() *ComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Component.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ComponentUpsertOne) Ignore() *ComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ComponentUpsertOne) DoNothing() *ComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ComponentCreate.OnConflict
// documentation for more info.
func (u *ComponentUpsertOne) Update(set func(*ComponentUpsert)) *ComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetHostname sets the "hostname" field.
func (u *ComponentUpsertOne) SetHostname(v string) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateHostname() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateHostname()
	})
}

// SetArch sets the "arch" field.
func (u *ComponentUpsertOne) SetArch(v string) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateArch() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateArch()
	})
}

// SetOs sets the "os" field.
func (u *ComponentUpsertOne) SetOs(v string) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateOs() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateOs()
	})
}

// SetComponent sets the "component" field.
func (u *ComponentUpsertOne) SetComponent(v component.Component) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateComponent() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateComponent()
	})
}

// SetVersion sets the "version" field.
func (u *ComponentUpsertOne) SetVersion(v string) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateVersion() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateVersion()
	})
}

// SetChannel sets the "channel" field.
func (u *ComponentUpsertOne) SetChannel(v component.Channel) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateChannel() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateChannel()
	})
}

// SetUpdateStatus sets the "update_status" field.
func (u *ComponentUpsertOne) SetUpdateStatus(v component.UpdateStatus) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateStatus(v)
	})
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateUpdateStatus() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateStatus()
	})
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ComponentUpsertOne) ClearUpdateStatus() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateStatus()
	})
}

// SetUpdateMessage sets the "update_message" field.
func (u *ComponentUpsertOne) SetUpdateMessage(v string) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateMessage(v)
	})
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateUpdateMessage() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateMessage()
	})
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ComponentUpsertOne) ClearUpdateMessage() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateMessage()
	})
}

// SetUpdateWhen sets the "update_when" field.
func (u *ComponentUpsertOne) SetUpdateWhen(v time.Time) *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateWhen(v)
	})
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ComponentUpsertOne) UpdateUpdateWhen() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateWhen()
	})
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ComponentUpsertOne) ClearUpdateWhen() *ComponentUpsertOne {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateWhen()
	})
}

// Exec executes the query.
func (u *ComponentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for ComponentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ComponentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ComponentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ComponentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ComponentCreateBulk is the builder for creating many Component entities in bulk.
type ComponentCreateBulk struct {
	config
	err      error
	builders []*ComponentCreate
	conflict []sql.ConflictOption
}

// Save creates the Component entities in the database.
func (ccb *ComponentCreateBulk) Save(ctx context.Context) ([]*Component, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Component, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ComponentCreateBulk) SaveX(ctx context.Context) []*Component {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ComponentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Component.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ComponentUpsert) {
//			SetHostname(v+v).
//		}).
//		Exec(ctx)
func (ccb *ComponentCreateBulk) OnConflict(opts ...sql.ConflictOption) *ComponentUpsertBulk {
	ccb.conflict = opts
	return &ComponentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Component.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ComponentCreateBulk) OnConflictColumns(columns ...string) *ComponentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ComponentUpsertBulk{
		create: ccb,
	}
}

// ComponentUpsertBulk is the builder for "upsert"-ing
// a bulk of Component nodes.
type ComponentUpsertBulk struct {
	create *ComponentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Component.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ComponentUpsertBulk) UpdateNewValues() *ComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Component.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ComponentUpsertBulk) Ignore() *ComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ComponentUpsertBulk) DoNothing() *ComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ComponentCreateBulk.OnConflict
// documentation for more info.
func (u *ComponentUpsertBulk) Update(set func(*ComponentUpsert)) *ComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetHostname sets the "hostname" field.
func (u *ComponentUpsertBulk) SetHostname(v string) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateHostname() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateHostname()
	})
}

// SetArch sets the "arch" field.
func (u *ComponentUpsertBulk) SetArch(v string) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateArch() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateArch()
	})
}

// SetOs sets the "os" field.
func (u *ComponentUpsertBulk) SetOs(v string) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateOs() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateOs()
	})
}

// SetComponent sets the "component" field.
func (u *ComponentUpsertBulk) SetComponent(v component.Component) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateComponent() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateComponent()
	})
}

// SetVersion sets the "version" field.
func (u *ComponentUpsertBulk) SetVersion(v string) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateVersion() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateVersion()
	})
}

// SetChannel sets the "channel" field.
func (u *ComponentUpsertBulk) SetChannel(v component.Channel) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateChannel() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateChannel()
	})
}

// SetUpdateStatus sets the "update_status" field.
func (u *ComponentUpsertBulk) SetUpdateStatus(v component.UpdateStatus) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateStatus(v)
	})
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateUpdateStatus() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateStatus()
	})
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ComponentUpsertBulk) ClearUpdateStatus() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateStatus()
	})
}

// SetUpdateMessage sets the "update_message" field.
func (u *ComponentUpsertBulk) SetUpdateMessage(v string) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateMessage(v)
	})
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateUpdateMessage() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateMessage()
	})
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ComponentUpsertBulk) ClearUpdateMessage() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateMessage()
	})
}

// SetUpdateWhen sets the "update_when" field.
func (u *ComponentUpsertBulk) SetUpdateWhen(v time.Time) *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.SetUpdateWhen(v)
	})
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ComponentUpsertBulk) UpdateUpdateWhen() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.UpdateUpdateWhen()
	})
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ComponentUpsertBulk) ClearUpdateWhen() *ComponentUpsertBulk {
	return u.Update(func(s *ComponentUpsert) {
		s.ClearUpdateWhen()
	})
}

// Exec executes the query.
func (u *ComponentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the ComponentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for ComponentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ComponentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
