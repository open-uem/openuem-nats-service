// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/certificate"
)

// CertificateCreate is the builder for creating a Certificate entity.
type CertificateCreate struct {
	config
	mutation *CertificateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (cc *CertificateCreate) SetType(c certificate.Type) *CertificateCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CertificateCreate) SetDescription(s string) *CertificateCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableDescription(s *string) *CertificateCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetExpiry sets the "expiry" field.
func (cc *CertificateCreate) SetExpiry(t time.Time) *CertificateCreate {
	cc.mutation.SetExpiry(t)
	return cc
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableExpiry(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetExpiry(*t)
	}
	return cc
}

// SetUID sets the "uid" field.
func (cc *CertificateCreate) SetUID(s string) *CertificateCreate {
	cc.mutation.SetUID(s)
	return cc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableUID(s *string) *CertificateCreate {
	if s != nil {
		cc.SetUID(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CertificateCreate) SetID(i int64) *CertificateCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the CertificateMutation object of the builder.
func (cc *CertificateCreate) Mutation() *CertificateMutation {
	return cc.mutation
}

// Save creates the Certificate in the database.
func (cc *CertificateCreate) Save(ctx context.Context) (*Certificate, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificateCreate) SaveX(ctx context.Context) *Certificate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificateCreate) check() error {
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`openuem_ent: missing required field "Certificate.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := certificate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`openuem_ent: validator failed for field "Certificate.type": %w`, err)}
		}
	}
	return nil
}

func (cc *CertificateCreate) sqlSave(ctx context.Context) (*Certificate, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificateCreate) createSpec() (*Certificate, *sqlgraph.CreateSpec) {
	var (
		_node = &Certificate{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certificate.Table, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(certificate.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(certificate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Expiry(); ok {
		_spec.SetField(certificate.FieldExpiry, field.TypeTime, value)
		_node.Expiry = value
	}
	if value, ok := cc.mutation.UID(); ok {
		_spec.SetField(certificate.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certificate.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificateUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (cc *CertificateCreate) OnConflict(opts ...sql.ConflictOption) *CertificateUpsertOne {
	cc.conflict = opts
	return &CertificateUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CertificateCreate) OnConflictColumns(columns ...string) *CertificateUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CertificateUpsertOne{
		create: cc,
	}
}

type (
	// CertificateUpsertOne is the builder for "upsert"-ing
	//  one Certificate node.
	CertificateUpsertOne struct {
		create *CertificateCreate
	}

	// CertificateUpsert is the "OnConflict" setter.
	CertificateUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *CertificateUpsert) SetType(v certificate.Type) *CertificateUpsert {
	u.Set(certificate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificateUpsert) UpdateType() *CertificateUpsert {
	u.SetExcluded(certificate.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *CertificateUpsert) SetDescription(v string) *CertificateUpsert {
	u.Set(certificate.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CertificateUpsert) UpdateDescription() *CertificateUpsert {
	u.SetExcluded(certificate.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CertificateUpsert) ClearDescription() *CertificateUpsert {
	u.SetNull(certificate.FieldDescription)
	return u
}

// SetExpiry sets the "expiry" field.
func (u *CertificateUpsert) SetExpiry(v time.Time) *CertificateUpsert {
	u.Set(certificate.FieldExpiry, v)
	return u
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *CertificateUpsert) UpdateExpiry() *CertificateUpsert {
	u.SetExcluded(certificate.FieldExpiry)
	return u
}

// ClearExpiry clears the value of the "expiry" field.
func (u *CertificateUpsert) ClearExpiry() *CertificateUpsert {
	u.SetNull(certificate.FieldExpiry)
	return u
}

// SetUID sets the "uid" field.
func (u *CertificateUpsert) SetUID(v string) *CertificateUpsert {
	u.Set(certificate.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CertificateUpsert) UpdateUID() *CertificateUpsert {
	u.SetExcluded(certificate.FieldUID)
	return u
}

// ClearUID clears the value of the "uid" field.
func (u *CertificateUpsert) ClearUID() *CertificateUpsert {
	u.SetNull(certificate.FieldUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Certificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(certificate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CertificateUpsertOne) UpdateNewValues() *CertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(certificate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certificate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertificateUpsertOne) Ignore() *CertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificateUpsertOne) DoNothing() *CertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificateCreate.OnConflict
// documentation for more info.
func (u *CertificateUpsertOne) Update(set func(*CertificateUpsert)) *CertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *CertificateUpsertOne) SetType(v certificate.Type) *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificateUpsertOne) UpdateType() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *CertificateUpsertOne) SetDescription(v string) *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CertificateUpsertOne) UpdateDescription() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CertificateUpsertOne) ClearDescription() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearDescription()
	})
}

// SetExpiry sets the "expiry" field.
func (u *CertificateUpsertOne) SetExpiry(v time.Time) *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.SetExpiry(v)
	})
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *CertificateUpsertOne) UpdateExpiry() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateExpiry()
	})
}

// ClearExpiry clears the value of the "expiry" field.
func (u *CertificateUpsertOne) ClearExpiry() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearExpiry()
	})
}

// SetUID sets the "uid" field.
func (u *CertificateUpsertOne) SetUID(v string) *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CertificateUpsertOne) UpdateUID() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateUID()
	})
}

// ClearUID clears the value of the "uid" field.
func (u *CertificateUpsertOne) ClearUID() *CertificateUpsertOne {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearUID()
	})
}

// Exec executes the query.
func (u *CertificateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for CertificateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertificateUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertificateUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertificateCreateBulk is the builder for creating many Certificate entities in bulk.
type CertificateCreateBulk struct {
	config
	err      error
	builders []*CertificateCreate
	conflict []sql.ConflictOption
}

// Save creates the Certificate entities in the database.
func (ccb *CertificateCreateBulk) Save(ctx context.Context) ([]*Certificate, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certificate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificateCreateBulk) SaveX(ctx context.Context) []*Certificate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certificate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificateUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ccb *CertificateCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertificateUpsertBulk {
	ccb.conflict = opts
	return &CertificateUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CertificateCreateBulk) OnConflictColumns(columns ...string) *CertificateUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CertificateUpsertBulk{
		create: ccb,
	}
}

// CertificateUpsertBulk is the builder for "upsert"-ing
// a bulk of Certificate nodes.
type CertificateUpsertBulk struct {
	create *CertificateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Certificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(certificate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CertificateUpsertBulk) UpdateNewValues() *CertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(certificate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certificate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertificateUpsertBulk) Ignore() *CertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificateUpsertBulk) DoNothing() *CertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificateCreateBulk.OnConflict
// documentation for more info.
func (u *CertificateUpsertBulk) Update(set func(*CertificateUpsert)) *CertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *CertificateUpsertBulk) SetType(v certificate.Type) *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificateUpsertBulk) UpdateType() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *CertificateUpsertBulk) SetDescription(v string) *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CertificateUpsertBulk) UpdateDescription() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CertificateUpsertBulk) ClearDescription() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearDescription()
	})
}

// SetExpiry sets the "expiry" field.
func (u *CertificateUpsertBulk) SetExpiry(v time.Time) *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.SetExpiry(v)
	})
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *CertificateUpsertBulk) UpdateExpiry() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateExpiry()
	})
}

// ClearExpiry clears the value of the "expiry" field.
func (u *CertificateUpsertBulk) ClearExpiry() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearExpiry()
	})
}

// SetUID sets the "uid" field.
func (u *CertificateUpsertBulk) SetUID(v string) *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CertificateUpsertBulk) UpdateUID() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.UpdateUID()
	})
}

// ClearUID clears the value of the "uid" field.
func (u *CertificateUpsertBulk) ClearUID() *CertificateUpsertBulk {
	return u.Update(func(s *CertificateUpsert) {
		s.ClearUID()
	})
}

// Exec executes the query.
func (u *CertificateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the CertificateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for CertificateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
