// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/update"
)

// UpdateCreate is the builder for creating a Update entity.
type UpdateCreate struct {
	config
	mutation *UpdateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (uc *UpdateCreate) SetTitle(s string) *UpdateCreate {
	uc.mutation.SetTitle(s)
	return uc
}

// SetDate sets the "date" field.
func (uc *UpdateCreate) SetDate(t time.Time) *UpdateCreate {
	uc.mutation.SetDate(t)
	return uc
}

// SetSupportURL sets the "support_url" field.
func (uc *UpdateCreate) SetSupportURL(s string) *UpdateCreate {
	uc.mutation.SetSupportURL(s)
	return uc
}

// SetNillableSupportURL sets the "support_url" field if the given value is not nil.
func (uc *UpdateCreate) SetNillableSupportURL(s *string) *UpdateCreate {
	if s != nil {
		uc.SetSupportURL(*s)
	}
	return uc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (uc *UpdateCreate) SetOwnerID(id string) *UpdateCreate {
	uc.mutation.SetOwnerID(id)
	return uc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (uc *UpdateCreate) SetOwner(a *Agent) *UpdateCreate {
	return uc.SetOwnerID(a.ID)
}

// Mutation returns the UpdateMutation object of the builder.
func (uc *UpdateCreate) Mutation() *UpdateMutation {
	return uc.mutation
}

// Save creates the Update in the database.
func (uc *UpdateCreate) Save(ctx context.Context) (*Update, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UpdateCreate) SaveX(ctx context.Context) *Update {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UpdateCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UpdateCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UpdateCreate) check() error {
	if _, ok := uc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`openuem_ent: missing required field "Update.title"`)}
	}
	if _, ok := uc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`openuem_ent: missing required field "Update.date"`)}
	}
	if len(uc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "Update.owner"`)}
	}
	return nil
}

func (uc *UpdateCreate) sqlSave(ctx context.Context) (*Update, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UpdateCreate) createSpec() (*Update, *sqlgraph.CreateSpec) {
	var (
		_node = &Update{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(update.Table, sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.Title(); ok {
		_spec.SetField(update.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := uc.mutation.Date(); ok {
		_spec.SetField(update.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := uc.mutation.SupportURL(); ok {
		_spec.SetField(update.FieldSupportURL, field.TypeString, value)
		_node.SupportURL = value
	}
	if nodes := uc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   update.OwnerTable,
			Columns: []string{update.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_updates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Update.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpdateUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (uc *UpdateCreate) OnConflict(opts ...sql.ConflictOption) *UpdateUpsertOne {
	uc.conflict = opts
	return &UpdateUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UpdateCreate) OnConflictColumns(columns ...string) *UpdateUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UpdateUpsertOne{
		create: uc,
	}
}

type (
	// UpdateUpsertOne is the builder for "upsert"-ing
	//  one Update node.
	UpdateUpsertOne struct {
		create *UpdateCreate
	}

	// UpdateUpsert is the "OnConflict" setter.
	UpdateUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *UpdateUpsert) SetTitle(v string) *UpdateUpsert {
	u.Set(update.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateTitle() *UpdateUpsert {
	u.SetExcluded(update.FieldTitle)
	return u
}

// SetDate sets the "date" field.
func (u *UpdateUpsert) SetDate(v time.Time) *UpdateUpsert {
	u.Set(update.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateDate() *UpdateUpsert {
	u.SetExcluded(update.FieldDate)
	return u
}

// SetSupportURL sets the "support_url" field.
func (u *UpdateUpsert) SetSupportURL(v string) *UpdateUpsert {
	u.Set(update.FieldSupportURL, v)
	return u
}

// UpdateSupportURL sets the "support_url" field to the value that was provided on create.
func (u *UpdateUpsert) UpdateSupportURL() *UpdateUpsert {
	u.SetExcluded(update.FieldSupportURL)
	return u
}

// ClearSupportURL clears the value of the "support_url" field.
func (u *UpdateUpsert) ClearSupportURL() *UpdateUpsert {
	u.SetNull(update.FieldSupportURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpdateUpsertOne) UpdateNewValues() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpdateUpsertOne) Ignore() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpdateUpsertOne) DoNothing() *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpdateCreate.OnConflict
// documentation for more info.
func (u *UpdateUpsertOne) Update(set func(*UpdateUpsert)) *UpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *UpdateUpsertOne) SetTitle(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateTitle() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTitle()
	})
}

// SetDate sets the "date" field.
func (u *UpdateUpsertOne) SetDate(v time.Time) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateDate() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDate()
	})
}

// SetSupportURL sets the "support_url" field.
func (u *UpdateUpsertOne) SetSupportURL(v string) *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.SetSupportURL(v)
	})
}

// UpdateSupportURL sets the "support_url" field to the value that was provided on create.
func (u *UpdateUpsertOne) UpdateSupportURL() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateSupportURL()
	})
}

// ClearSupportURL clears the value of the "support_url" field.
func (u *UpdateUpsertOne) ClearSupportURL() *UpdateUpsertOne {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearSupportURL()
	})
}

// Exec executes the query.
func (u *UpdateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for UpdateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpdateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpdateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpdateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpdateCreateBulk is the builder for creating many Update entities in bulk.
type UpdateCreateBulk struct {
	config
	err      error
	builders []*UpdateCreate
	conflict []sql.ConflictOption
}

// Save creates the Update entities in the database.
func (ucb *UpdateCreateBulk) Save(ctx context.Context) ([]*Update, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Update, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpdateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UpdateCreateBulk) SaveX(ctx context.Context) []*Update {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UpdateCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UpdateCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Update.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpdateUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ucb *UpdateCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpdateUpsertBulk {
	ucb.conflict = opts
	return &UpdateUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UpdateCreateBulk) OnConflictColumns(columns ...string) *UpdateUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UpdateUpsertBulk{
		create: ucb,
	}
}

// UpdateUpsertBulk is the builder for "upsert"-ing
// a bulk of Update nodes.
type UpdateUpsertBulk struct {
	create *UpdateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpdateUpsertBulk) UpdateNewValues() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Update.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpdateUpsertBulk) Ignore() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpdateUpsertBulk) DoNothing() *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpdateCreateBulk.OnConflict
// documentation for more info.
func (u *UpdateUpsertBulk) Update(set func(*UpdateUpsert)) *UpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *UpdateUpsertBulk) SetTitle(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateTitle() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateTitle()
	})
}

// SetDate sets the "date" field.
func (u *UpdateUpsertBulk) SetDate(v time.Time) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateDate() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateDate()
	})
}

// SetSupportURL sets the "support_url" field.
func (u *UpdateUpsertBulk) SetSupportURL(v string) *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.SetSupportURL(v)
	})
}

// UpdateSupportURL sets the "support_url" field to the value that was provided on create.
func (u *UpdateUpsertBulk) UpdateSupportURL() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.UpdateSupportURL()
	})
}

// ClearSupportURL clears the value of the "support_url" field.
func (u *UpdateUpsertBulk) ClearSupportURL() *UpdateUpsertBulk {
	return u.Update(func(s *UpdateUpsert) {
		s.ClearSupportURL()
	})
}

// Exec executes the query.
func (u *UpdateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the UpdateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for UpdateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpdateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
