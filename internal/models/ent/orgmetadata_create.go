// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/metadata"
	"github.com/doncicuto/openuem_ent/orgmetadata"
)

// OrgMetadataCreate is the builder for creating a OrgMetadata entity.
type OrgMetadataCreate struct {
	config
	mutation *OrgMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (omc *OrgMetadataCreate) SetName(s string) *OrgMetadataCreate {
	omc.mutation.SetName(s)
	return omc
}

// SetDescription sets the "description" field.
func (omc *OrgMetadataCreate) SetDescription(s string) *OrgMetadataCreate {
	omc.mutation.SetDescription(s)
	return omc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (omc *OrgMetadataCreate) SetNillableDescription(s *string) *OrgMetadataCreate {
	if s != nil {
		omc.SetDescription(*s)
	}
	return omc
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (omc *OrgMetadataCreate) AddMetadatumIDs(ids ...int) *OrgMetadataCreate {
	omc.mutation.AddMetadatumIDs(ids...)
	return omc
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (omc *OrgMetadataCreate) AddMetadata(m ...*Metadata) *OrgMetadataCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omc.AddMetadatumIDs(ids...)
}

// Mutation returns the OrgMetadataMutation object of the builder.
func (omc *OrgMetadataCreate) Mutation() *OrgMetadataMutation {
	return omc.mutation
}

// Save creates the OrgMetadata in the database.
func (omc *OrgMetadataCreate) Save(ctx context.Context) (*OrgMetadata, error) {
	return withHooks(ctx, omc.sqlSave, omc.mutation, omc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OrgMetadataCreate) SaveX(ctx context.Context) *OrgMetadata {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OrgMetadataCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OrgMetadataCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omc *OrgMetadataCreate) check() error {
	if _, ok := omc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`openuem_ent: missing required field "OrgMetadata.name"`)}
	}
	if v, ok := omc.mutation.Name(); ok {
		if err := orgmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`openuem_ent: validator failed for field "OrgMetadata.name": %w`, err)}
		}
	}
	return nil
}

func (omc *OrgMetadataCreate) sqlSave(ctx context.Context) (*OrgMetadata, error) {
	if err := omc.check(); err != nil {
		return nil, err
	}
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	omc.mutation.id = &_node.ID
	omc.mutation.done = true
	return _node, nil
}

func (omc *OrgMetadataCreate) createSpec() (*OrgMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgMetadata{config: omc.config}
		_spec = sqlgraph.NewCreateSpec(orgmetadata.Table, sqlgraph.NewFieldSpec(orgmetadata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = omc.conflict
	if value, ok := omc.mutation.Name(); ok {
		_spec.SetField(orgmetadata.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := omc.mutation.Description(); ok {
		_spec.SetField(orgmetadata.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := omc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgMetadata.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgMetadataUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (omc *OrgMetadataCreate) OnConflict(opts ...sql.ConflictOption) *OrgMetadataUpsertOne {
	omc.conflict = opts
	return &OrgMetadataUpsertOne{
		create: omc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (omc *OrgMetadataCreate) OnConflictColumns(columns ...string) *OrgMetadataUpsertOne {
	omc.conflict = append(omc.conflict, sql.ConflictColumns(columns...))
	return &OrgMetadataUpsertOne{
		create: omc,
	}
}

type (
	// OrgMetadataUpsertOne is the builder for "upsert"-ing
	//  one OrgMetadata node.
	OrgMetadataUpsertOne struct {
		create *OrgMetadataCreate
	}

	// OrgMetadataUpsert is the "OnConflict" setter.
	OrgMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *OrgMetadataUpsert) SetName(v string) *OrgMetadataUpsert {
	u.Set(orgmetadata.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgMetadataUpsert) UpdateName() *OrgMetadataUpsert {
	u.SetExcluded(orgmetadata.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *OrgMetadataUpsert) SetDescription(v string) *OrgMetadataUpsert {
	u.Set(orgmetadata.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrgMetadataUpsert) UpdateDescription() *OrgMetadataUpsert {
	u.SetExcluded(orgmetadata.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *OrgMetadataUpsert) ClearDescription() *OrgMetadataUpsert {
	u.SetNull(orgmetadata.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrgMetadataUpsertOne) UpdateNewValues() *OrgMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgMetadataUpsertOne) Ignore() *OrgMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgMetadataUpsertOne) DoNothing() *OrgMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgMetadataCreate.OnConflict
// documentation for more info.
func (u *OrgMetadataUpsertOne) Update(set func(*OrgMetadataUpsert)) *OrgMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OrgMetadataUpsertOne) SetName(v string) *OrgMetadataUpsertOne {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgMetadataUpsertOne) UpdateName() *OrgMetadataUpsertOne {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *OrgMetadataUpsertOne) SetDescription(v string) *OrgMetadataUpsertOne {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrgMetadataUpsertOne) UpdateDescription() *OrgMetadataUpsertOne {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *OrgMetadataUpsertOne) ClearDescription() *OrgMetadataUpsertOne {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *OrgMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for OrgMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgMetadataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgMetadataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgMetadataCreateBulk is the builder for creating many OrgMetadata entities in bulk.
type OrgMetadataCreateBulk struct {
	config
	err      error
	builders []*OrgMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgMetadata entities in the database.
func (omcb *OrgMetadataCreateBulk) Save(ctx context.Context) ([]*OrgMetadata, error) {
	if omcb.err != nil {
		return nil, omcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OrgMetadata, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = omcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OrgMetadataCreateBulk) SaveX(ctx context.Context) []*OrgMetadata {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OrgMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OrgMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgMetadataUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (omcb *OrgMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgMetadataUpsertBulk {
	omcb.conflict = opts
	return &OrgMetadataUpsertBulk{
		create: omcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (omcb *OrgMetadataCreateBulk) OnConflictColumns(columns ...string) *OrgMetadataUpsertBulk {
	omcb.conflict = append(omcb.conflict, sql.ConflictColumns(columns...))
	return &OrgMetadataUpsertBulk{
		create: omcb,
	}
}

// OrgMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgMetadata nodes.
type OrgMetadataUpsertBulk struct {
	create *OrgMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrgMetadataUpsertBulk) UpdateNewValues() *OrgMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgMetadataUpsertBulk) Ignore() *OrgMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgMetadataUpsertBulk) DoNothing() *OrgMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *OrgMetadataUpsertBulk) Update(set func(*OrgMetadataUpsert)) *OrgMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OrgMetadataUpsertBulk) SetName(v string) *OrgMetadataUpsertBulk {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgMetadataUpsertBulk) UpdateName() *OrgMetadataUpsertBulk {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *OrgMetadataUpsertBulk) SetDescription(v string) *OrgMetadataUpsertBulk {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrgMetadataUpsertBulk) UpdateDescription() *OrgMetadataUpsertBulk {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *OrgMetadataUpsertBulk) ClearDescription() *OrgMetadataUpsertBulk {
	return u.Update(func(s *OrgMetadataUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *OrgMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the OrgMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for OrgMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
