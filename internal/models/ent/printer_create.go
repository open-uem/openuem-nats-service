// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/printer"
)

// PrinterCreate is the builder for creating a Printer entity.
type PrinterCreate struct {
	config
	mutation *PrinterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pc *PrinterCreate) SetName(s string) *PrinterCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPort sets the "port" field.
func (pc *PrinterCreate) SetPort(s string) *PrinterCreate {
	pc.mutation.SetPort(s)
	return pc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pc *PrinterCreate) SetNillablePort(s *string) *PrinterCreate {
	if s != nil {
		pc.SetPort(*s)
	}
	return pc
}

// SetIsDefault sets the "is_default" field.
func (pc *PrinterCreate) SetIsDefault(b bool) *PrinterCreate {
	pc.mutation.SetIsDefault(b)
	return pc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableIsDefault(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetIsDefault(*b)
	}
	return pc
}

// SetIsNetwork sets the "is_network" field.
func (pc *PrinterCreate) SetIsNetwork(b bool) *PrinterCreate {
	pc.mutation.SetIsNetwork(b)
	return pc
}

// SetNillableIsNetwork sets the "is_network" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableIsNetwork(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetIsNetwork(*b)
	}
	return pc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (pc *PrinterCreate) SetOwnerID(id string) *PrinterCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (pc *PrinterCreate) SetOwner(a *Agent) *PrinterCreate {
	return pc.SetOwnerID(a.ID)
}

// Mutation returns the PrinterMutation object of the builder.
func (pc *PrinterCreate) Mutation() *PrinterMutation {
	return pc.mutation
}

// Save creates the Printer in the database.
func (pc *PrinterCreate) Save(ctx context.Context) (*Printer, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PrinterCreate) SaveX(ctx context.Context) *Printer {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PrinterCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PrinterCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PrinterCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`openuem_ent: missing required field "Printer.name"`)}
	}
	if len(pc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "Printer.owner"`)}
	}
	return nil
}

func (pc *PrinterCreate) sqlSave(ctx context.Context) (*Printer, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PrinterCreate) createSpec() (*Printer, *sqlgraph.CreateSpec) {
	var (
		_node = &Printer{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(printer.Table, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Port(); ok {
		_spec.SetField(printer.FieldPort, field.TypeString, value)
		_node.Port = value
	}
	if value, ok := pc.mutation.IsDefault(); ok {
		_spec.SetField(printer.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := pc.mutation.IsNetwork(); ok {
		_spec.SetField(printer.FieldIsNetwork, field.TypeBool, value)
		_node.IsNetwork = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.OwnerTable,
			Columns: []string{printer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_printers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Printer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrinterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pc *PrinterCreate) OnConflict(opts ...sql.ConflictOption) *PrinterUpsertOne {
	pc.conflict = opts
	return &PrinterUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PrinterCreate) OnConflictColumns(columns ...string) *PrinterUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PrinterUpsertOne{
		create: pc,
	}
}

type (
	// PrinterUpsertOne is the builder for "upsert"-ing
	//  one Printer node.
	PrinterUpsertOne struct {
		create *PrinterCreate
	}

	// PrinterUpsert is the "OnConflict" setter.
	PrinterUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PrinterUpsert) SetName(v string) *PrinterUpsert {
	u.Set(printer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateName() *PrinterUpsert {
	u.SetExcluded(printer.FieldName)
	return u
}

// SetPort sets the "port" field.
func (u *PrinterUpsert) SetPort(v string) *PrinterUpsert {
	u.Set(printer.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PrinterUpsert) UpdatePort() *PrinterUpsert {
	u.SetExcluded(printer.FieldPort)
	return u
}

// ClearPort clears the value of the "port" field.
func (u *PrinterUpsert) ClearPort() *PrinterUpsert {
	u.SetNull(printer.FieldPort)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *PrinterUpsert) SetIsDefault(v bool) *PrinterUpsert {
	u.Set(printer.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateIsDefault() *PrinterUpsert {
	u.SetExcluded(printer.FieldIsDefault)
	return u
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *PrinterUpsert) ClearIsDefault() *PrinterUpsert {
	u.SetNull(printer.FieldIsDefault)
	return u
}

// SetIsNetwork sets the "is_network" field.
func (u *PrinterUpsert) SetIsNetwork(v bool) *PrinterUpsert {
	u.Set(printer.FieldIsNetwork, v)
	return u
}

// UpdateIsNetwork sets the "is_network" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateIsNetwork() *PrinterUpsert {
	u.SetExcluded(printer.FieldIsNetwork)
	return u
}

// ClearIsNetwork clears the value of the "is_network" field.
func (u *PrinterUpsert) ClearIsNetwork() *PrinterUpsert {
	u.SetNull(printer.FieldIsNetwork)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PrinterUpsertOne) UpdateNewValues() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PrinterUpsertOne) Ignore() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrinterUpsertOne) DoNothing() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrinterCreate.OnConflict
// documentation for more info.
func (u *PrinterUpsertOne) Update(set func(*PrinterUpsert)) *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrinterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PrinterUpsertOne) SetName(v string) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateName() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateName()
	})
}

// SetPort sets the "port" field.
func (u *PrinterUpsertOne) SetPort(v string) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdatePort() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdatePort()
	})
}

// ClearPort clears the value of the "port" field.
func (u *PrinterUpsertOne) ClearPort() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearPort()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *PrinterUpsertOne) SetIsDefault(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateIsDefault() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateIsDefault()
	})
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *PrinterUpsertOne) ClearIsDefault() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearIsDefault()
	})
}

// SetIsNetwork sets the "is_network" field.
func (u *PrinterUpsertOne) SetIsNetwork(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetIsNetwork(v)
	})
}

// UpdateIsNetwork sets the "is_network" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateIsNetwork() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateIsNetwork()
	})
}

// ClearIsNetwork clears the value of the "is_network" field.
func (u *PrinterUpsertOne) ClearIsNetwork() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearIsNetwork()
	})
}

// Exec executes the query.
func (u *PrinterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for PrinterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrinterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PrinterUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PrinterUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PrinterCreateBulk is the builder for creating many Printer entities in bulk.
type PrinterCreateBulk struct {
	config
	err      error
	builders []*PrinterCreate
	conflict []sql.ConflictOption
}

// Save creates the Printer entities in the database.
func (pcb *PrinterCreateBulk) Save(ctx context.Context) ([]*Printer, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Printer, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrinterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PrinterCreateBulk) SaveX(ctx context.Context) []*Printer {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PrinterCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PrinterCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Printer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrinterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pcb *PrinterCreateBulk) OnConflict(opts ...sql.ConflictOption) *PrinterUpsertBulk {
	pcb.conflict = opts
	return &PrinterUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PrinterCreateBulk) OnConflictColumns(columns ...string) *PrinterUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PrinterUpsertBulk{
		create: pcb,
	}
}

// PrinterUpsertBulk is the builder for "upsert"-ing
// a bulk of Printer nodes.
type PrinterUpsertBulk struct {
	create *PrinterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PrinterUpsertBulk) UpdateNewValues() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PrinterUpsertBulk) Ignore() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrinterUpsertBulk) DoNothing() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrinterCreateBulk.OnConflict
// documentation for more info.
func (u *PrinterUpsertBulk) Update(set func(*PrinterUpsert)) *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrinterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PrinterUpsertBulk) SetName(v string) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateName() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateName()
	})
}

// SetPort sets the "port" field.
func (u *PrinterUpsertBulk) SetPort(v string) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdatePort() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdatePort()
	})
}

// ClearPort clears the value of the "port" field.
func (u *PrinterUpsertBulk) ClearPort() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearPort()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *PrinterUpsertBulk) SetIsDefault(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateIsDefault() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateIsDefault()
	})
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *PrinterUpsertBulk) ClearIsDefault() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearIsDefault()
	})
}

// SetIsNetwork sets the "is_network" field.
func (u *PrinterUpsertBulk) SetIsNetwork(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetIsNetwork(v)
	})
}

// UpdateIsNetwork sets the "is_network" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateIsNetwork() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateIsNetwork()
	})
}

// ClearIsNetwork clears the value of the "is_network" field.
func (u *PrinterUpsertBulk) ClearIsNetwork() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.ClearIsNetwork()
	})
}

// Exec executes the query.
func (u *PrinterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the PrinterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for PrinterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrinterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
