// Code generated by ent, DO NOT EDIT.

package agent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldID, id))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldHostname, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldIP, v))
}

// MAC applies equality check predicate on the "mac" field. It's identical to MACEQ.
func MAC(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldMAC, v))
}

// FirstContact applies equality check predicate on the "first_contact" field. It's identical to FirstContactEQ.
func FirstContact(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldFirstContact, v))
}

// LastContact applies equality check predicate on the "last_contact" field. It's identical to LastContactEQ.
func LastContact(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLastContact, v))
}

// Vnc applies equality check predicate on the "vnc" field. It's identical to VncEQ.
func Vnc(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVnc, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldNotes, v))
}

// UpdateTaskStatus applies equality check predicate on the "update_task_status" field. It's identical to UpdateTaskStatusEQ.
func UpdateTaskStatus(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskStatus, v))
}

// UpdateTaskDescription applies equality check predicate on the "update_task_description" field. It's identical to UpdateTaskDescriptionEQ.
func UpdateTaskDescription(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskDescription, v))
}

// UpdateTaskResult applies equality check predicate on the "update_task_result" field. It's identical to UpdateTaskResultEQ.
func UpdateTaskResult(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskResult, v))
}

// UpdateTaskExecution applies equality check predicate on the "update_task_execution" field. It's identical to UpdateTaskExecutionEQ.
func UpdateTaskExecution(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskExecution, v))
}

// UpdateTaskVersion applies equality check predicate on the "update_task_version" field. It's identical to UpdateTaskVersionEQ.
func UpdateTaskVersion(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskVersion, v))
}

// VncProxyPort applies equality check predicate on the "vnc_proxy_port" field. It's identical to VncProxyPortEQ.
func VncProxyPort(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVncProxyPort, v))
}

// SftpPort applies equality check predicate on the "sftp_port" field. It's identical to SftpPortEQ.
func SftpPort(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSftpPort, v))
}

// CertificateReady applies equality check predicate on the "certificate_ready" field. It's identical to CertificateReadyEQ.
func CertificateReady(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCertificateReady, v))
}

// RestartRequired applies equality check predicate on the "restart_required" field. It's identical to RestartRequiredEQ.
func RestartRequired(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldRestartRequired, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldOs, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldHostname, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldIP, v))
}

// MACEQ applies the EQ predicate on the "mac" field.
func MACEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldMAC, v))
}

// MACNEQ applies the NEQ predicate on the "mac" field.
func MACNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldMAC, v))
}

// MACIn applies the In predicate on the "mac" field.
func MACIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldMAC, vs...))
}

// MACNotIn applies the NotIn predicate on the "mac" field.
func MACNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldMAC, vs...))
}

// MACGT applies the GT predicate on the "mac" field.
func MACGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldMAC, v))
}

// MACGTE applies the GTE predicate on the "mac" field.
func MACGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldMAC, v))
}

// MACLT applies the LT predicate on the "mac" field.
func MACLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldMAC, v))
}

// MACLTE applies the LTE predicate on the "mac" field.
func MACLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldMAC, v))
}

// MACContains applies the Contains predicate on the "mac" field.
func MACContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldMAC, v))
}

// MACHasPrefix applies the HasPrefix predicate on the "mac" field.
func MACHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldMAC, v))
}

// MACHasSuffix applies the HasSuffix predicate on the "mac" field.
func MACHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldMAC, v))
}

// MACEqualFold applies the EqualFold predicate on the "mac" field.
func MACEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldMAC, v))
}

// MACContainsFold applies the ContainsFold predicate on the "mac" field.
func MACContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldMAC, v))
}

// FirstContactEQ applies the EQ predicate on the "first_contact" field.
func FirstContactEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldFirstContact, v))
}

// FirstContactNEQ applies the NEQ predicate on the "first_contact" field.
func FirstContactNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldFirstContact, v))
}

// FirstContactIn applies the In predicate on the "first_contact" field.
func FirstContactIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldFirstContact, vs...))
}

// FirstContactNotIn applies the NotIn predicate on the "first_contact" field.
func FirstContactNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldFirstContact, vs...))
}

// FirstContactGT applies the GT predicate on the "first_contact" field.
func FirstContactGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldFirstContact, v))
}

// FirstContactGTE applies the GTE predicate on the "first_contact" field.
func FirstContactGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldFirstContact, v))
}

// FirstContactLT applies the LT predicate on the "first_contact" field.
func FirstContactLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldFirstContact, v))
}

// FirstContactLTE applies the LTE predicate on the "first_contact" field.
func FirstContactLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldFirstContact, v))
}

// FirstContactIsNil applies the IsNil predicate on the "first_contact" field.
func FirstContactIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldFirstContact))
}

// FirstContactNotNil applies the NotNil predicate on the "first_contact" field.
func FirstContactNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldFirstContact))
}

// LastContactEQ applies the EQ predicate on the "last_contact" field.
func LastContactEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLastContact, v))
}

// LastContactNEQ applies the NEQ predicate on the "last_contact" field.
func LastContactNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldLastContact, v))
}

// LastContactIn applies the In predicate on the "last_contact" field.
func LastContactIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldLastContact, vs...))
}

// LastContactNotIn applies the NotIn predicate on the "last_contact" field.
func LastContactNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldLastContact, vs...))
}

// LastContactGT applies the GT predicate on the "last_contact" field.
func LastContactGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldLastContact, v))
}

// LastContactGTE applies the GTE predicate on the "last_contact" field.
func LastContactGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldLastContact, v))
}

// LastContactLT applies the LT predicate on the "last_contact" field.
func LastContactLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldLastContact, v))
}

// LastContactLTE applies the LTE predicate on the "last_contact" field.
func LastContactLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldLastContact, v))
}

// LastContactIsNil applies the IsNil predicate on the "last_contact" field.
func LastContactIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldLastContact))
}

// LastContactNotNil applies the NotNil predicate on the "last_contact" field.
func LastContactNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldLastContact))
}

// VncEQ applies the EQ predicate on the "vnc" field.
func VncEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVnc, v))
}

// VncNEQ applies the NEQ predicate on the "vnc" field.
func VncNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldVnc, v))
}

// VncIn applies the In predicate on the "vnc" field.
func VncIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldVnc, vs...))
}

// VncNotIn applies the NotIn predicate on the "vnc" field.
func VncNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldVnc, vs...))
}

// VncGT applies the GT predicate on the "vnc" field.
func VncGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldVnc, v))
}

// VncGTE applies the GTE predicate on the "vnc" field.
func VncGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldVnc, v))
}

// VncLT applies the LT predicate on the "vnc" field.
func VncLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldVnc, v))
}

// VncLTE applies the LTE predicate on the "vnc" field.
func VncLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldVnc, v))
}

// VncContains applies the Contains predicate on the "vnc" field.
func VncContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldVnc, v))
}

// VncHasPrefix applies the HasPrefix predicate on the "vnc" field.
func VncHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldVnc, v))
}

// VncHasSuffix applies the HasSuffix predicate on the "vnc" field.
func VncHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldVnc, v))
}

// VncIsNil applies the IsNil predicate on the "vnc" field.
func VncIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldVnc))
}

// VncNotNil applies the NotNil predicate on the "vnc" field.
func VncNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldVnc))
}

// VncEqualFold applies the EqualFold predicate on the "vnc" field.
func VncEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldVnc, v))
}

// VncContainsFold applies the ContainsFold predicate on the "vnc" field.
func VncContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldVnc, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldNotes, v))
}

// UpdateTaskStatusEQ applies the EQ predicate on the "update_task_status" field.
func UpdateTaskStatusEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusNEQ applies the NEQ predicate on the "update_task_status" field.
func UpdateTaskStatusNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusIn applies the In predicate on the "update_task_status" field.
func UpdateTaskStatusIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdateTaskStatus, vs...))
}

// UpdateTaskStatusNotIn applies the NotIn predicate on the "update_task_status" field.
func UpdateTaskStatusNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdateTaskStatus, vs...))
}

// UpdateTaskStatusGT applies the GT predicate on the "update_task_status" field.
func UpdateTaskStatusGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusGTE applies the GTE predicate on the "update_task_status" field.
func UpdateTaskStatusGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusLT applies the LT predicate on the "update_task_status" field.
func UpdateTaskStatusLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusLTE applies the LTE predicate on the "update_task_status" field.
func UpdateTaskStatusLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusContains applies the Contains predicate on the "update_task_status" field.
func UpdateTaskStatusContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusHasPrefix applies the HasPrefix predicate on the "update_task_status" field.
func UpdateTaskStatusHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusHasSuffix applies the HasSuffix predicate on the "update_task_status" field.
func UpdateTaskStatusHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusIsNil applies the IsNil predicate on the "update_task_status" field.
func UpdateTaskStatusIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldUpdateTaskStatus))
}

// UpdateTaskStatusNotNil applies the NotNil predicate on the "update_task_status" field.
func UpdateTaskStatusNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldUpdateTaskStatus))
}

// UpdateTaskStatusEqualFold applies the EqualFold predicate on the "update_task_status" field.
func UpdateTaskStatusEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldUpdateTaskStatus, v))
}

// UpdateTaskStatusContainsFold applies the ContainsFold predicate on the "update_task_status" field.
func UpdateTaskStatusContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldUpdateTaskStatus, v))
}

// UpdateTaskDescriptionEQ applies the EQ predicate on the "update_task_description" field.
func UpdateTaskDescriptionEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionNEQ applies the NEQ predicate on the "update_task_description" field.
func UpdateTaskDescriptionNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionIn applies the In predicate on the "update_task_description" field.
func UpdateTaskDescriptionIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdateTaskDescription, vs...))
}

// UpdateTaskDescriptionNotIn applies the NotIn predicate on the "update_task_description" field.
func UpdateTaskDescriptionNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdateTaskDescription, vs...))
}

// UpdateTaskDescriptionGT applies the GT predicate on the "update_task_description" field.
func UpdateTaskDescriptionGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionGTE applies the GTE predicate on the "update_task_description" field.
func UpdateTaskDescriptionGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionLT applies the LT predicate on the "update_task_description" field.
func UpdateTaskDescriptionLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionLTE applies the LTE predicate on the "update_task_description" field.
func UpdateTaskDescriptionLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionContains applies the Contains predicate on the "update_task_description" field.
func UpdateTaskDescriptionContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionHasPrefix applies the HasPrefix predicate on the "update_task_description" field.
func UpdateTaskDescriptionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionHasSuffix applies the HasSuffix predicate on the "update_task_description" field.
func UpdateTaskDescriptionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionIsNil applies the IsNil predicate on the "update_task_description" field.
func UpdateTaskDescriptionIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldUpdateTaskDescription))
}

// UpdateTaskDescriptionNotNil applies the NotNil predicate on the "update_task_description" field.
func UpdateTaskDescriptionNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldUpdateTaskDescription))
}

// UpdateTaskDescriptionEqualFold applies the EqualFold predicate on the "update_task_description" field.
func UpdateTaskDescriptionEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldUpdateTaskDescription, v))
}

// UpdateTaskDescriptionContainsFold applies the ContainsFold predicate on the "update_task_description" field.
func UpdateTaskDescriptionContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldUpdateTaskDescription, v))
}

// UpdateTaskResultEQ applies the EQ predicate on the "update_task_result" field.
func UpdateTaskResultEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskResult, v))
}

// UpdateTaskResultNEQ applies the NEQ predicate on the "update_task_result" field.
func UpdateTaskResultNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdateTaskResult, v))
}

// UpdateTaskResultIn applies the In predicate on the "update_task_result" field.
func UpdateTaskResultIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdateTaskResult, vs...))
}

// UpdateTaskResultNotIn applies the NotIn predicate on the "update_task_result" field.
func UpdateTaskResultNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdateTaskResult, vs...))
}

// UpdateTaskResultGT applies the GT predicate on the "update_task_result" field.
func UpdateTaskResultGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdateTaskResult, v))
}

// UpdateTaskResultGTE applies the GTE predicate on the "update_task_result" field.
func UpdateTaskResultGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdateTaskResult, v))
}

// UpdateTaskResultLT applies the LT predicate on the "update_task_result" field.
func UpdateTaskResultLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdateTaskResult, v))
}

// UpdateTaskResultLTE applies the LTE predicate on the "update_task_result" field.
func UpdateTaskResultLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdateTaskResult, v))
}

// UpdateTaskResultContains applies the Contains predicate on the "update_task_result" field.
func UpdateTaskResultContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldUpdateTaskResult, v))
}

// UpdateTaskResultHasPrefix applies the HasPrefix predicate on the "update_task_result" field.
func UpdateTaskResultHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldUpdateTaskResult, v))
}

// UpdateTaskResultHasSuffix applies the HasSuffix predicate on the "update_task_result" field.
func UpdateTaskResultHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldUpdateTaskResult, v))
}

// UpdateTaskResultIsNil applies the IsNil predicate on the "update_task_result" field.
func UpdateTaskResultIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldUpdateTaskResult))
}

// UpdateTaskResultNotNil applies the NotNil predicate on the "update_task_result" field.
func UpdateTaskResultNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldUpdateTaskResult))
}

// UpdateTaskResultEqualFold applies the EqualFold predicate on the "update_task_result" field.
func UpdateTaskResultEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldUpdateTaskResult, v))
}

// UpdateTaskResultContainsFold applies the ContainsFold predicate on the "update_task_result" field.
func UpdateTaskResultContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldUpdateTaskResult, v))
}

// UpdateTaskExecutionEQ applies the EQ predicate on the "update_task_execution" field.
func UpdateTaskExecutionEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionNEQ applies the NEQ predicate on the "update_task_execution" field.
func UpdateTaskExecutionNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionIn applies the In predicate on the "update_task_execution" field.
func UpdateTaskExecutionIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdateTaskExecution, vs...))
}

// UpdateTaskExecutionNotIn applies the NotIn predicate on the "update_task_execution" field.
func UpdateTaskExecutionNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdateTaskExecution, vs...))
}

// UpdateTaskExecutionGT applies the GT predicate on the "update_task_execution" field.
func UpdateTaskExecutionGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionGTE applies the GTE predicate on the "update_task_execution" field.
func UpdateTaskExecutionGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionLT applies the LT predicate on the "update_task_execution" field.
func UpdateTaskExecutionLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionLTE applies the LTE predicate on the "update_task_execution" field.
func UpdateTaskExecutionLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdateTaskExecution, v))
}

// UpdateTaskExecutionIsNil applies the IsNil predicate on the "update_task_execution" field.
func UpdateTaskExecutionIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldUpdateTaskExecution))
}

// UpdateTaskExecutionNotNil applies the NotNil predicate on the "update_task_execution" field.
func UpdateTaskExecutionNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldUpdateTaskExecution))
}

// UpdateTaskVersionEQ applies the EQ predicate on the "update_task_version" field.
func UpdateTaskVersionEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionNEQ applies the NEQ predicate on the "update_task_version" field.
func UpdateTaskVersionNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionIn applies the In predicate on the "update_task_version" field.
func UpdateTaskVersionIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdateTaskVersion, vs...))
}

// UpdateTaskVersionNotIn applies the NotIn predicate on the "update_task_version" field.
func UpdateTaskVersionNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdateTaskVersion, vs...))
}

// UpdateTaskVersionGT applies the GT predicate on the "update_task_version" field.
func UpdateTaskVersionGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionGTE applies the GTE predicate on the "update_task_version" field.
func UpdateTaskVersionGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionLT applies the LT predicate on the "update_task_version" field.
func UpdateTaskVersionLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionLTE applies the LTE predicate on the "update_task_version" field.
func UpdateTaskVersionLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionContains applies the Contains predicate on the "update_task_version" field.
func UpdateTaskVersionContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionHasPrefix applies the HasPrefix predicate on the "update_task_version" field.
func UpdateTaskVersionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionHasSuffix applies the HasSuffix predicate on the "update_task_version" field.
func UpdateTaskVersionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionIsNil applies the IsNil predicate on the "update_task_version" field.
func UpdateTaskVersionIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldUpdateTaskVersion))
}

// UpdateTaskVersionNotNil applies the NotNil predicate on the "update_task_version" field.
func UpdateTaskVersionNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldUpdateTaskVersion))
}

// UpdateTaskVersionEqualFold applies the EqualFold predicate on the "update_task_version" field.
func UpdateTaskVersionEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldUpdateTaskVersion, v))
}

// UpdateTaskVersionContainsFold applies the ContainsFold predicate on the "update_task_version" field.
func UpdateTaskVersionContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldUpdateTaskVersion, v))
}

// VncProxyPortEQ applies the EQ predicate on the "vnc_proxy_port" field.
func VncProxyPortEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVncProxyPort, v))
}

// VncProxyPortNEQ applies the NEQ predicate on the "vnc_proxy_port" field.
func VncProxyPortNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldVncProxyPort, v))
}

// VncProxyPortIn applies the In predicate on the "vnc_proxy_port" field.
func VncProxyPortIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldVncProxyPort, vs...))
}

// VncProxyPortNotIn applies the NotIn predicate on the "vnc_proxy_port" field.
func VncProxyPortNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldVncProxyPort, vs...))
}

// VncProxyPortGT applies the GT predicate on the "vnc_proxy_port" field.
func VncProxyPortGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldVncProxyPort, v))
}

// VncProxyPortGTE applies the GTE predicate on the "vnc_proxy_port" field.
func VncProxyPortGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldVncProxyPort, v))
}

// VncProxyPortLT applies the LT predicate on the "vnc_proxy_port" field.
func VncProxyPortLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldVncProxyPort, v))
}

// VncProxyPortLTE applies the LTE predicate on the "vnc_proxy_port" field.
func VncProxyPortLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldVncProxyPort, v))
}

// VncProxyPortContains applies the Contains predicate on the "vnc_proxy_port" field.
func VncProxyPortContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldVncProxyPort, v))
}

// VncProxyPortHasPrefix applies the HasPrefix predicate on the "vnc_proxy_port" field.
func VncProxyPortHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldVncProxyPort, v))
}

// VncProxyPortHasSuffix applies the HasSuffix predicate on the "vnc_proxy_port" field.
func VncProxyPortHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldVncProxyPort, v))
}

// VncProxyPortIsNil applies the IsNil predicate on the "vnc_proxy_port" field.
func VncProxyPortIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldVncProxyPort))
}

// VncProxyPortNotNil applies the NotNil predicate on the "vnc_proxy_port" field.
func VncProxyPortNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldVncProxyPort))
}

// VncProxyPortEqualFold applies the EqualFold predicate on the "vnc_proxy_port" field.
func VncProxyPortEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldVncProxyPort, v))
}

// VncProxyPortContainsFold applies the ContainsFold predicate on the "vnc_proxy_port" field.
func VncProxyPortContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldVncProxyPort, v))
}

// SftpPortEQ applies the EQ predicate on the "sftp_port" field.
func SftpPortEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSftpPort, v))
}

// SftpPortNEQ applies the NEQ predicate on the "sftp_port" field.
func SftpPortNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSftpPort, v))
}

// SftpPortIn applies the In predicate on the "sftp_port" field.
func SftpPortIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldSftpPort, vs...))
}

// SftpPortNotIn applies the NotIn predicate on the "sftp_port" field.
func SftpPortNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldSftpPort, vs...))
}

// SftpPortGT applies the GT predicate on the "sftp_port" field.
func SftpPortGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldSftpPort, v))
}

// SftpPortGTE applies the GTE predicate on the "sftp_port" field.
func SftpPortGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldSftpPort, v))
}

// SftpPortLT applies the LT predicate on the "sftp_port" field.
func SftpPortLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldSftpPort, v))
}

// SftpPortLTE applies the LTE predicate on the "sftp_port" field.
func SftpPortLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldSftpPort, v))
}

// SftpPortContains applies the Contains predicate on the "sftp_port" field.
func SftpPortContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldSftpPort, v))
}

// SftpPortHasPrefix applies the HasPrefix predicate on the "sftp_port" field.
func SftpPortHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldSftpPort, v))
}

// SftpPortHasSuffix applies the HasSuffix predicate on the "sftp_port" field.
func SftpPortHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldSftpPort, v))
}

// SftpPortIsNil applies the IsNil predicate on the "sftp_port" field.
func SftpPortIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldSftpPort))
}

// SftpPortNotNil applies the NotNil predicate on the "sftp_port" field.
func SftpPortNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldSftpPort))
}

// SftpPortEqualFold applies the EqualFold predicate on the "sftp_port" field.
func SftpPortEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldSftpPort, v))
}

// SftpPortContainsFold applies the ContainsFold predicate on the "sftp_port" field.
func SftpPortContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldSftpPort, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldStatus))
}

// CertificateReadyEQ applies the EQ predicate on the "certificate_ready" field.
func CertificateReadyEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCertificateReady, v))
}

// CertificateReadyNEQ applies the NEQ predicate on the "certificate_ready" field.
func CertificateReadyNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldCertificateReady, v))
}

// CertificateReadyIsNil applies the IsNil predicate on the "certificate_ready" field.
func CertificateReadyIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldCertificateReady))
}

// CertificateReadyNotNil applies the NotNil predicate on the "certificate_ready" field.
func CertificateReadyNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldCertificateReady))
}

// RestartRequiredEQ applies the EQ predicate on the "restart_required" field.
func RestartRequiredEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldRestartRequired, v))
}

// RestartRequiredNEQ applies the NEQ predicate on the "restart_required" field.
func RestartRequiredNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldRestartRequired, v))
}

// RestartRequiredIsNil applies the IsNil predicate on the "restart_required" field.
func RestartRequiredIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldRestartRequired))
}

// RestartRequiredNotNil applies the NotNil predicate on the "restart_required" field.
func RestartRequiredNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldRestartRequired))
}

// HasComputer applies the HasEdge predicate on the "computer" edge.
func HasComputer() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ComputerTable, ComputerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComputerWith applies the HasEdge predicate on the "computer" edge with a given conditions (other predicates).
func HasComputerWith(preds ...predicate.Computer) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newComputerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperatingsystem applies the HasEdge predicate on the "operatingsystem" edge.
func HasOperatingsystem() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OperatingsystemTable, OperatingsystemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatingsystemWith applies the HasEdge predicate on the "operatingsystem" edge with a given conditions (other predicates).
func HasOperatingsystemWith(preds ...predicate.OperatingSystem) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newOperatingsystemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSystemupdate applies the HasEdge predicate on the "systemupdate" edge.
func HasSystemupdate() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SystemupdateTable, SystemupdateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSystemupdateWith applies the HasEdge predicate on the "systemupdate" edge with a given conditions (other predicates).
func HasSystemupdateWith(preds ...predicate.SystemUpdate) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newSystemupdateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAntivirus applies the HasEdge predicate on the "antivirus" edge.
func HasAntivirus() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AntivirusTable, AntivirusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAntivirusWith applies the HasEdge predicate on the "antivirus" edge with a given conditions (other predicates).
func HasAntivirusWith(preds ...predicate.Antivirus) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newAntivirusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogicaldisks applies the HasEdge predicate on the "logicaldisks" edge.
func HasLogicaldisks() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogicaldisksTable, LogicaldisksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogicaldisksWith applies the HasEdge predicate on the "logicaldisks" edge with a given conditions (other predicates).
func HasLogicaldisksWith(preds ...predicate.LogicalDisk) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newLogicaldisksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApps applies the HasEdge predicate on the "apps" edge.
func HasApps() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppsTable, AppsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppsWith applies the HasEdge predicate on the "apps" edge with a given conditions (other predicates).
func HasAppsWith(preds ...predicate.App) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newAppsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMonitors applies the HasEdge predicate on the "monitors" edge.
func HasMonitors() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MonitorsTable, MonitorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMonitorsWith applies the HasEdge predicate on the "monitors" edge with a given conditions (other predicates).
func HasMonitorsWith(preds ...predicate.Monitor) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newMonitorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShares applies the HasEdge predicate on the "shares" edge.
func HasShares() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SharesTable, SharesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSharesWith applies the HasEdge predicate on the "shares" edge with a given conditions (other predicates).
func HasSharesWith(preds ...predicate.Share) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newSharesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrinters applies the HasEdge predicate on the "printers" edge.
func HasPrinters() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrintersTable, PrintersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrintersWith applies the HasEdge predicate on the "printers" edge with a given conditions (other predicates).
func HasPrintersWith(preds ...predicate.Printer) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newPrintersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNetworkadapters applies the HasEdge predicate on the "networkadapters" edge.
func HasNetworkadapters() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NetworkadaptersTable, NetworkadaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkadaptersWith applies the HasEdge predicate on the "networkadapters" edge with a given conditions (other predicates).
func HasNetworkadaptersWith(preds ...predicate.NetworkAdapter) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newNetworkadaptersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeployments applies the HasEdge predicate on the "deployments" edge.
func HasDeployments() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeploymentsTable, DeploymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentsWith applies the HasEdge predicate on the "deployments" edge with a given conditions (other predicates).
func HasDeploymentsWith(preds ...predicate.Deployment) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newDeploymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdates applies the HasEdge predicate on the "updates" edge.
func HasUpdates() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UpdatesTable, UpdatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatesWith applies the HasEdge predicate on the "updates" edge with a given conditions (other predicates).
func HasUpdatesWith(preds ...predicate.Update) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newUpdatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelease applies the HasEdge predicate on the "release" edge.
func HasRelease() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReleaseTable, ReleaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleaseWith applies the HasEdge predicate on the "release" edge with a given conditions (other predicates).
func HasReleaseWith(preds ...predicate.Release) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newReleaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.NotPredicates(p))
}
