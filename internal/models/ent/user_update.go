// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/sessions"
	"github.com/doncicuto/openuem_ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetCountry sets the "country" field.
func (uu *UserUpdate) SetCountry(s string) *UserUpdate {
	uu.mutation.SetCountry(s)
	return uu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetCountry(*s)
	}
	return uu
}

// ClearCountry clears the value of the "country" field.
func (uu *UserUpdate) ClearCountry() *UserUpdate {
	uu.mutation.ClearCountry()
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetRegister sets the "register" field.
func (uu *UserUpdate) SetRegister(s string) *UserUpdate {
	uu.mutation.SetRegister(s)
	return uu
}

// SetNillableRegister sets the "register" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegister(s *string) *UserUpdate {
	if s != nil {
		uu.SetRegister(*s)
	}
	return uu
}

// SetCertClearPassword sets the "cert_clear_password" field.
func (uu *UserUpdate) SetCertClearPassword(s string) *UserUpdate {
	uu.mutation.SetCertClearPassword(s)
	return uu
}

// SetNillableCertClearPassword sets the "cert_clear_password" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCertClearPassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetCertClearPassword(*s)
	}
	return uu
}

// ClearCertClearPassword clears the value of the "cert_clear_password" field.
func (uu *UserUpdate) ClearCertClearPassword() *UserUpdate {
	uu.mutation.ClearCertClearPassword()
	return uu
}

// SetExpiry sets the "expiry" field.
func (uu *UserUpdate) SetExpiry(t time.Time) *UserUpdate {
	uu.mutation.SetExpiry(t)
	return uu
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExpiry(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetExpiry(*t)
	}
	return uu
}

// ClearExpiry clears the value of the "expiry" field.
func (uu *UserUpdate) ClearExpiry() *UserUpdate {
	uu.mutation.ClearExpiry()
	return uu
}

// SetCreated sets the "created" field.
func (uu *UserUpdate) SetCreated(t time.Time) *UserUpdate {
	uu.mutation.SetCreated(t)
	return uu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreated(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreated(*t)
	}
	return uu
}

// ClearCreated clears the value of the "created" field.
func (uu *UserUpdate) ClearCreated() *UserUpdate {
	uu.mutation.ClearCreated()
	return uu
}

// SetModified sets the "modified" field.
func (uu *UserUpdate) SetModified(t time.Time) *UserUpdate {
	uu.mutation.SetModified(t)
	return uu
}

// ClearModified clears the value of the "modified" field.
func (uu *UserUpdate) ClearModified() *UserUpdate {
	uu.mutation.ClearModified()
	return uu
}

// AddSessionIDs adds the "sessions" edge to the Sessions entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Sessions entity.
func (uu *UserUpdate) AddSessions(s ...*Sessions) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSessions clears all "sessions" edges to the Sessions entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Sessions entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Sessions entities.
func (uu *UserUpdate) RemoveSessions(s ...*Sessions) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.Modified(); !ok && !uu.mutation.ModifiedCleared() {
		v := user.UpdateDefaultModified()
		uu.mutation.SetModified(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if uu.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Register(); ok {
		_spec.SetField(user.FieldRegister, field.TypeString, value)
	}
	if value, ok := uu.mutation.CertClearPassword(); ok {
		_spec.SetField(user.FieldCertClearPassword, field.TypeString, value)
	}
	if uu.mutation.CertClearPasswordCleared() {
		_spec.ClearField(user.FieldCertClearPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Expiry(); ok {
		_spec.SetField(user.FieldExpiry, field.TypeTime, value)
	}
	if uu.mutation.ExpiryCleared() {
		_spec.ClearField(user.FieldExpiry, field.TypeTime)
	}
	if value, ok := uu.mutation.Created(); ok {
		_spec.SetField(user.FieldCreated, field.TypeTime, value)
	}
	if uu.mutation.CreatedCleared() {
		_spec.ClearField(user.FieldCreated, field.TypeTime)
	}
	if value, ok := uu.mutation.Modified(); ok {
		_spec.SetField(user.FieldModified, field.TypeTime, value)
	}
	if uu.mutation.ModifiedCleared() {
		_spec.ClearField(user.FieldModified, field.TypeTime)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetCountry sets the "country" field.
func (uuo *UserUpdateOne) SetCountry(s string) *UserUpdateOne {
	uuo.mutation.SetCountry(s)
	return uuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCountry(*s)
	}
	return uuo
}

// ClearCountry clears the value of the "country" field.
func (uuo *UserUpdateOne) ClearCountry() *UserUpdateOne {
	uuo.mutation.ClearCountry()
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetRegister sets the "register" field.
func (uuo *UserUpdateOne) SetRegister(s string) *UserUpdateOne {
	uuo.mutation.SetRegister(s)
	return uuo
}

// SetNillableRegister sets the "register" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegister(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRegister(*s)
	}
	return uuo
}

// SetCertClearPassword sets the "cert_clear_password" field.
func (uuo *UserUpdateOne) SetCertClearPassword(s string) *UserUpdateOne {
	uuo.mutation.SetCertClearPassword(s)
	return uuo
}

// SetNillableCertClearPassword sets the "cert_clear_password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCertClearPassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCertClearPassword(*s)
	}
	return uuo
}

// ClearCertClearPassword clears the value of the "cert_clear_password" field.
func (uuo *UserUpdateOne) ClearCertClearPassword() *UserUpdateOne {
	uuo.mutation.ClearCertClearPassword()
	return uuo
}

// SetExpiry sets the "expiry" field.
func (uuo *UserUpdateOne) SetExpiry(t time.Time) *UserUpdateOne {
	uuo.mutation.SetExpiry(t)
	return uuo
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExpiry(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetExpiry(*t)
	}
	return uuo
}

// ClearExpiry clears the value of the "expiry" field.
func (uuo *UserUpdateOne) ClearExpiry() *UserUpdateOne {
	uuo.mutation.ClearExpiry()
	return uuo
}

// SetCreated sets the "created" field.
func (uuo *UserUpdateOne) SetCreated(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreated(t)
	return uuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreated(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreated(*t)
	}
	return uuo
}

// ClearCreated clears the value of the "created" field.
func (uuo *UserUpdateOne) ClearCreated() *UserUpdateOne {
	uuo.mutation.ClearCreated()
	return uuo
}

// SetModified sets the "modified" field.
func (uuo *UserUpdateOne) SetModified(t time.Time) *UserUpdateOne {
	uuo.mutation.SetModified(t)
	return uuo
}

// ClearModified clears the value of the "modified" field.
func (uuo *UserUpdateOne) ClearModified() *UserUpdateOne {
	uuo.mutation.ClearModified()
	return uuo
}

// AddSessionIDs adds the "sessions" edge to the Sessions entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Sessions entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Sessions) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSessions clears all "sessions" edges to the Sessions entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Sessions entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Sessions entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Sessions) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.Modified(); !ok && !uuo.mutation.ModifiedCleared() {
		v := user.UpdateDefaultModified()
		uuo.mutation.SetModified(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if uuo.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Register(); ok {
		_spec.SetField(user.FieldRegister, field.TypeString, value)
	}
	if value, ok := uuo.mutation.CertClearPassword(); ok {
		_spec.SetField(user.FieldCertClearPassword, field.TypeString, value)
	}
	if uuo.mutation.CertClearPasswordCleared() {
		_spec.ClearField(user.FieldCertClearPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Expiry(); ok {
		_spec.SetField(user.FieldExpiry, field.TypeTime, value)
	}
	if uuo.mutation.ExpiryCleared() {
		_spec.ClearField(user.FieldExpiry, field.TypeTime)
	}
	if value, ok := uuo.mutation.Created(); ok {
		_spec.SetField(user.FieldCreated, field.TypeTime, value)
	}
	if uuo.mutation.CreatedCleared() {
		_spec.ClearField(user.FieldCreated, field.TypeTime)
	}
	if value, ok := uuo.mutation.Modified(); ok {
		_spec.SetField(user.FieldModified, field.TypeTime, value)
	}
	if uuo.mutation.ModifiedCleared() {
		_spec.ClearField(user.FieldModified, field.TypeTime)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
