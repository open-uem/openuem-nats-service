// Code generated by ent, DO NOT EDIT.

package logicaldisk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the logicaldisk type in the database.
	Label = "logical_disk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldFilesystem holds the string denoting the filesystem field in the database.
	FieldFilesystem = "filesystem"
	// FieldUsage holds the string denoting the usage field in the database.
	FieldUsage = "usage"
	// FieldSizeInUnits holds the string denoting the size_in_units field in the database.
	FieldSizeInUnits = "size_in_units"
	// FieldRemainingSpaceInUnits holds the string denoting the remaining_space_in_units field in the database.
	FieldRemainingSpaceInUnits = "remaining_space_in_units"
	// FieldVolumeName holds the string denoting the volume_name field in the database.
	FieldVolumeName = "volume_name"
	// FieldBitlockerStatus holds the string denoting the bitlocker_status field in the database.
	FieldBitlockerStatus = "bitlocker_status"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "oid"
	// Table holds the table name of the logicaldisk in the database.
	Table = "logical_disks"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "logical_disks"
	// OwnerInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OwnerInverseTable = "agents"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "agent_logicaldisks"
)

// Columns holds all SQL columns for logicaldisk fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldFilesystem,
	FieldUsage,
	FieldSizeInUnits,
	FieldRemainingSpaceInUnits,
	FieldVolumeName,
	FieldBitlockerStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "logical_disks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_logicaldisks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsage holds the default value on creation for the "usage" field.
	DefaultUsage int8
)

// OrderOption defines the ordering options for the LogicalDisk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByFilesystem orders the results by the filesystem field.
func ByFilesystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilesystem, opts...).ToFunc()
}

// ByUsage orders the results by the usage field.
func ByUsage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsage, opts...).ToFunc()
}

// BySizeInUnits orders the results by the size_in_units field.
func BySizeInUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeInUnits, opts...).ToFunc()
}

// ByRemainingSpaceInUnits orders the results by the remaining_space_in_units field.
func ByRemainingSpaceInUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingSpaceInUnits, opts...).ToFunc()
}

// ByVolumeName orders the results by the volume_name field.
func ByVolumeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolumeName, opts...).ToFunc()
}

// ByBitlockerStatus orders the results by the bitlocker_status field.
func ByBitlockerStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBitlockerStatus, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
