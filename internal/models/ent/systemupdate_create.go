// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/systemupdate"
)

// SystemUpdateCreate is the builder for creating a SystemUpdate entity.
type SystemUpdateCreate struct {
	config
	mutation *SystemUpdateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (suc *SystemUpdateCreate) SetStatus(s string) *SystemUpdateCreate {
	suc.mutation.SetStatus(s)
	return suc
}

// SetLastInstall sets the "last_install" field.
func (suc *SystemUpdateCreate) SetLastInstall(t time.Time) *SystemUpdateCreate {
	suc.mutation.SetLastInstall(t)
	return suc
}

// SetLastSearch sets the "last_search" field.
func (suc *SystemUpdateCreate) SetLastSearch(t time.Time) *SystemUpdateCreate {
	suc.mutation.SetLastSearch(t)
	return suc
}

// SetPendingUpdates sets the "pending_updates" field.
func (suc *SystemUpdateCreate) SetPendingUpdates(b bool) *SystemUpdateCreate {
	suc.mutation.SetPendingUpdates(b)
	return suc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (suc *SystemUpdateCreate) SetOwnerID(id string) *SystemUpdateCreate {
	suc.mutation.SetOwnerID(id)
	return suc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (suc *SystemUpdateCreate) SetOwner(a *Agent) *SystemUpdateCreate {
	return suc.SetOwnerID(a.ID)
}

// Mutation returns the SystemUpdateMutation object of the builder.
func (suc *SystemUpdateCreate) Mutation() *SystemUpdateMutation {
	return suc.mutation
}

// Save creates the SystemUpdate in the database.
func (suc *SystemUpdateCreate) Save(ctx context.Context) (*SystemUpdate, error) {
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SystemUpdateCreate) SaveX(ctx context.Context) *SystemUpdate {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SystemUpdateCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SystemUpdateCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SystemUpdateCreate) check() error {
	if _, ok := suc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`openuem_ent: missing required field "SystemUpdate.status"`)}
	}
	if _, ok := suc.mutation.LastInstall(); !ok {
		return &ValidationError{Name: "last_install", err: errors.New(`openuem_ent: missing required field "SystemUpdate.last_install"`)}
	}
	if _, ok := suc.mutation.LastSearch(); !ok {
		return &ValidationError{Name: "last_search", err: errors.New(`openuem_ent: missing required field "SystemUpdate.last_search"`)}
	}
	if _, ok := suc.mutation.PendingUpdates(); !ok {
		return &ValidationError{Name: "pending_updates", err: errors.New(`openuem_ent: missing required field "SystemUpdate.pending_updates"`)}
	}
	if len(suc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "SystemUpdate.owner"`)}
	}
	return nil
}

func (suc *SystemUpdateCreate) sqlSave(ctx context.Context) (*SystemUpdate, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SystemUpdateCreate) createSpec() (*SystemUpdate, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemUpdate{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(systemupdate.Table, sqlgraph.NewFieldSpec(systemupdate.FieldID, field.TypeInt))
	)
	_spec.OnConflict = suc.conflict
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(systemupdate.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := suc.mutation.LastInstall(); ok {
		_spec.SetField(systemupdate.FieldLastInstall, field.TypeTime, value)
		_node.LastInstall = value
	}
	if value, ok := suc.mutation.LastSearch(); ok {
		_spec.SetField(systemupdate.FieldLastSearch, field.TypeTime, value)
		_node.LastSearch = value
	}
	if value, ok := suc.mutation.PendingUpdates(); ok {
		_spec.SetField(systemupdate.FieldPendingUpdates, field.TypeBool, value)
		_node.PendingUpdates = value
	}
	if nodes := suc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   systemupdate.OwnerTable,
			Columns: []string{systemupdate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_systemupdate = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemUpdate.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpdateUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (suc *SystemUpdateCreate) OnConflict(opts ...sql.ConflictOption) *SystemUpdateUpsertOne {
	suc.conflict = opts
	return &SystemUpdateUpsertOne{
		create: suc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suc *SystemUpdateCreate) OnConflictColumns(columns ...string) *SystemUpdateUpsertOne {
	suc.conflict = append(suc.conflict, sql.ConflictColumns(columns...))
	return &SystemUpdateUpsertOne{
		create: suc,
	}
}

type (
	// SystemUpdateUpsertOne is the builder for "upsert"-ing
	//  one SystemUpdate node.
	SystemUpdateUpsertOne struct {
		create *SystemUpdateCreate
	}

	// SystemUpdateUpsert is the "OnConflict" setter.
	SystemUpdateUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *SystemUpdateUpsert) SetStatus(v string) *SystemUpdateUpsert {
	u.Set(systemupdate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUpdateUpsert) UpdateStatus() *SystemUpdateUpsert {
	u.SetExcluded(systemupdate.FieldStatus)
	return u
}

// SetLastInstall sets the "last_install" field.
func (u *SystemUpdateUpsert) SetLastInstall(v time.Time) *SystemUpdateUpsert {
	u.Set(systemupdate.FieldLastInstall, v)
	return u
}

// UpdateLastInstall sets the "last_install" field to the value that was provided on create.
func (u *SystemUpdateUpsert) UpdateLastInstall() *SystemUpdateUpsert {
	u.SetExcluded(systemupdate.FieldLastInstall)
	return u
}

// SetLastSearch sets the "last_search" field.
func (u *SystemUpdateUpsert) SetLastSearch(v time.Time) *SystemUpdateUpsert {
	u.Set(systemupdate.FieldLastSearch, v)
	return u
}

// UpdateLastSearch sets the "last_search" field to the value that was provided on create.
func (u *SystemUpdateUpsert) UpdateLastSearch() *SystemUpdateUpsert {
	u.SetExcluded(systemupdate.FieldLastSearch)
	return u
}

// SetPendingUpdates sets the "pending_updates" field.
func (u *SystemUpdateUpsert) SetPendingUpdates(v bool) *SystemUpdateUpsert {
	u.Set(systemupdate.FieldPendingUpdates, v)
	return u
}

// UpdatePendingUpdates sets the "pending_updates" field to the value that was provided on create.
func (u *SystemUpdateUpsert) UpdatePendingUpdates() *SystemUpdateUpsert {
	u.SetExcluded(systemupdate.FieldPendingUpdates)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUpdateUpsertOne) UpdateNewValues() *SystemUpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemUpdateUpsertOne) Ignore() *SystemUpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpdateUpsertOne) DoNothing() *SystemUpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemUpdateCreate.OnConflict
// documentation for more info.
func (u *SystemUpdateUpsertOne) Update(set func(*SystemUpdateUpsert)) *SystemUpdateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SystemUpdateUpsertOne) SetStatus(v string) *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUpdateUpsertOne) UpdateStatus() *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateStatus()
	})
}

// SetLastInstall sets the "last_install" field.
func (u *SystemUpdateUpsertOne) SetLastInstall(v time.Time) *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetLastInstall(v)
	})
}

// UpdateLastInstall sets the "last_install" field to the value that was provided on create.
func (u *SystemUpdateUpsertOne) UpdateLastInstall() *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateLastInstall()
	})
}

// SetLastSearch sets the "last_search" field.
func (u *SystemUpdateUpsertOne) SetLastSearch(v time.Time) *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetLastSearch(v)
	})
}

// UpdateLastSearch sets the "last_search" field to the value that was provided on create.
func (u *SystemUpdateUpsertOne) UpdateLastSearch() *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateLastSearch()
	})
}

// SetPendingUpdates sets the "pending_updates" field.
func (u *SystemUpdateUpsertOne) SetPendingUpdates(v bool) *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetPendingUpdates(v)
	})
}

// UpdatePendingUpdates sets the "pending_updates" field to the value that was provided on create.
func (u *SystemUpdateUpsertOne) UpdatePendingUpdates() *SystemUpdateUpsertOne {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdatePendingUpdates()
	})
}

// Exec executes the query.
func (u *SystemUpdateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for SystemUpdateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpdateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemUpdateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemUpdateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemUpdateCreateBulk is the builder for creating many SystemUpdate entities in bulk.
type SystemUpdateCreateBulk struct {
	config
	err      error
	builders []*SystemUpdateCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemUpdate entities in the database.
func (sucb *SystemUpdateCreateBulk) Save(ctx context.Context) ([]*SystemUpdate, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SystemUpdate, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemUpdateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SystemUpdateCreateBulk) SaveX(ctx context.Context) []*SystemUpdate {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SystemUpdateCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SystemUpdateCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemUpdate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpdateUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (sucb *SystemUpdateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemUpdateUpsertBulk {
	sucb.conflict = opts
	return &SystemUpdateUpsertBulk{
		create: sucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sucb *SystemUpdateCreateBulk) OnConflictColumns(columns ...string) *SystemUpdateUpsertBulk {
	sucb.conflict = append(sucb.conflict, sql.ConflictColumns(columns...))
	return &SystemUpdateUpsertBulk{
		create: sucb,
	}
}

// SystemUpdateUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemUpdate nodes.
type SystemUpdateUpsertBulk struct {
	create *SystemUpdateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUpdateUpsertBulk) UpdateNewValues() *SystemUpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemUpdate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemUpdateUpsertBulk) Ignore() *SystemUpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpdateUpsertBulk) DoNothing() *SystemUpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemUpdateCreateBulk.OnConflict
// documentation for more info.
func (u *SystemUpdateUpsertBulk) Update(set func(*SystemUpdateUpsert)) *SystemUpdateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpdateUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SystemUpdateUpsertBulk) SetStatus(v string) *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUpdateUpsertBulk) UpdateStatus() *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateStatus()
	})
}

// SetLastInstall sets the "last_install" field.
func (u *SystemUpdateUpsertBulk) SetLastInstall(v time.Time) *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetLastInstall(v)
	})
}

// UpdateLastInstall sets the "last_install" field to the value that was provided on create.
func (u *SystemUpdateUpsertBulk) UpdateLastInstall() *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateLastInstall()
	})
}

// SetLastSearch sets the "last_search" field.
func (u *SystemUpdateUpsertBulk) SetLastSearch(v time.Time) *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetLastSearch(v)
	})
}

// UpdateLastSearch sets the "last_search" field to the value that was provided on create.
func (u *SystemUpdateUpsertBulk) UpdateLastSearch() *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdateLastSearch()
	})
}

// SetPendingUpdates sets the "pending_updates" field.
func (u *SystemUpdateUpsertBulk) SetPendingUpdates(v bool) *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.SetPendingUpdates(v)
	})
}

// UpdatePendingUpdates sets the "pending_updates" field to the value that was provided on create.
func (u *SystemUpdateUpsertBulk) UpdatePendingUpdates() *SystemUpdateUpsertBulk {
	return u.Update(func(s *SystemUpdateUpsert) {
		s.UpdatePendingUpdates()
	})
}

// Exec executes the query.
func (u *SystemUpdateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the SystemUpdateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for SystemUpdateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpdateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
