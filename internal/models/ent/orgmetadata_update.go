// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/metadata"
	"github.com/doncicuto/openuem_ent/orgmetadata"
	"github.com/doncicuto/openuem_ent/predicate"
)

// OrgMetadataUpdate is the builder for updating OrgMetadata entities.
type OrgMetadataUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgMetadataMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgMetadataUpdate builder.
func (omu *OrgMetadataUpdate) Where(ps ...predicate.OrgMetadata) *OrgMetadataUpdate {
	omu.mutation.Where(ps...)
	return omu
}

// SetName sets the "name" field.
func (omu *OrgMetadataUpdate) SetName(s string) *OrgMetadataUpdate {
	omu.mutation.SetName(s)
	return omu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (omu *OrgMetadataUpdate) SetNillableName(s *string) *OrgMetadataUpdate {
	if s != nil {
		omu.SetName(*s)
	}
	return omu
}

// SetDescription sets the "description" field.
func (omu *OrgMetadataUpdate) SetDescription(s string) *OrgMetadataUpdate {
	omu.mutation.SetDescription(s)
	return omu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (omu *OrgMetadataUpdate) SetNillableDescription(s *string) *OrgMetadataUpdate {
	if s != nil {
		omu.SetDescription(*s)
	}
	return omu
}

// ClearDescription clears the value of the "description" field.
func (omu *OrgMetadataUpdate) ClearDescription() *OrgMetadataUpdate {
	omu.mutation.ClearDescription()
	return omu
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (omu *OrgMetadataUpdate) AddMetadatumIDs(ids ...int) *OrgMetadataUpdate {
	omu.mutation.AddMetadatumIDs(ids...)
	return omu
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (omu *OrgMetadataUpdate) AddMetadata(m ...*Metadata) *OrgMetadataUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omu.AddMetadatumIDs(ids...)
}

// Mutation returns the OrgMetadataMutation object of the builder.
func (omu *OrgMetadataUpdate) Mutation() *OrgMetadataMutation {
	return omu.mutation
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (omu *OrgMetadataUpdate) ClearMetadata() *OrgMetadataUpdate {
	omu.mutation.ClearMetadata()
	return omu
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (omu *OrgMetadataUpdate) RemoveMetadatumIDs(ids ...int) *OrgMetadataUpdate {
	omu.mutation.RemoveMetadatumIDs(ids...)
	return omu
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (omu *OrgMetadataUpdate) RemoveMetadata(m ...*Metadata) *OrgMetadataUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omu.RemoveMetadatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (omu *OrgMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, omu.sqlSave, omu.mutation, omu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omu *OrgMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := omu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (omu *OrgMetadataUpdate) Exec(ctx context.Context) error {
	_, err := omu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omu *OrgMetadataUpdate) ExecX(ctx context.Context) {
	if err := omu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omu *OrgMetadataUpdate) check() error {
	if v, ok := omu.mutation.Name(); ok {
		if err := orgmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`openuem_ent: validator failed for field "OrgMetadata.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (omu *OrgMetadataUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgMetadataUpdate {
	omu.modifiers = append(omu.modifiers, modifiers...)
	return omu
}

func (omu *OrgMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := omu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmetadata.Table, orgmetadata.Columns, sqlgraph.NewFieldSpec(orgmetadata.FieldID, field.TypeInt))
	if ps := omu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omu.mutation.Name(); ok {
		_spec.SetField(orgmetadata.FieldName, field.TypeString, value)
	}
	if value, ok := omu.mutation.Description(); ok {
		_spec.SetField(orgmetadata.FieldDescription, field.TypeString, value)
	}
	if omu.mutation.DescriptionCleared() {
		_spec.ClearField(orgmetadata.FieldDescription, field.TypeString)
	}
	if omu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !omu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(omu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, omu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	omu.mutation.done = true
	return n, nil
}

// OrgMetadataUpdateOne is the builder for updating a single OrgMetadata entity.
type OrgMetadataUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgMetadataMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (omuo *OrgMetadataUpdateOne) SetName(s string) *OrgMetadataUpdateOne {
	omuo.mutation.SetName(s)
	return omuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (omuo *OrgMetadataUpdateOne) SetNillableName(s *string) *OrgMetadataUpdateOne {
	if s != nil {
		omuo.SetName(*s)
	}
	return omuo
}

// SetDescription sets the "description" field.
func (omuo *OrgMetadataUpdateOne) SetDescription(s string) *OrgMetadataUpdateOne {
	omuo.mutation.SetDescription(s)
	return omuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (omuo *OrgMetadataUpdateOne) SetNillableDescription(s *string) *OrgMetadataUpdateOne {
	if s != nil {
		omuo.SetDescription(*s)
	}
	return omuo
}

// ClearDescription clears the value of the "description" field.
func (omuo *OrgMetadataUpdateOne) ClearDescription() *OrgMetadataUpdateOne {
	omuo.mutation.ClearDescription()
	return omuo
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (omuo *OrgMetadataUpdateOne) AddMetadatumIDs(ids ...int) *OrgMetadataUpdateOne {
	omuo.mutation.AddMetadatumIDs(ids...)
	return omuo
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (omuo *OrgMetadataUpdateOne) AddMetadata(m ...*Metadata) *OrgMetadataUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omuo.AddMetadatumIDs(ids...)
}

// Mutation returns the OrgMetadataMutation object of the builder.
func (omuo *OrgMetadataUpdateOne) Mutation() *OrgMetadataMutation {
	return omuo.mutation
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (omuo *OrgMetadataUpdateOne) ClearMetadata() *OrgMetadataUpdateOne {
	omuo.mutation.ClearMetadata()
	return omuo
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (omuo *OrgMetadataUpdateOne) RemoveMetadatumIDs(ids ...int) *OrgMetadataUpdateOne {
	omuo.mutation.RemoveMetadatumIDs(ids...)
	return omuo
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (omuo *OrgMetadataUpdateOne) RemoveMetadata(m ...*Metadata) *OrgMetadataUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omuo.RemoveMetadatumIDs(ids...)
}

// Where appends a list predicates to the OrgMetadataUpdate builder.
func (omuo *OrgMetadataUpdateOne) Where(ps ...predicate.OrgMetadata) *OrgMetadataUpdateOne {
	omuo.mutation.Where(ps...)
	return omuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (omuo *OrgMetadataUpdateOne) Select(field string, fields ...string) *OrgMetadataUpdateOne {
	omuo.fields = append([]string{field}, fields...)
	return omuo
}

// Save executes the query and returns the updated OrgMetadata entity.
func (omuo *OrgMetadataUpdateOne) Save(ctx context.Context) (*OrgMetadata, error) {
	return withHooks(ctx, omuo.sqlSave, omuo.mutation, omuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omuo *OrgMetadataUpdateOne) SaveX(ctx context.Context) *OrgMetadata {
	node, err := omuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (omuo *OrgMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := omuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omuo *OrgMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := omuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omuo *OrgMetadataUpdateOne) check() error {
	if v, ok := omuo.mutation.Name(); ok {
		if err := orgmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`openuem_ent: validator failed for field "OrgMetadata.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (omuo *OrgMetadataUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgMetadataUpdateOne {
	omuo.modifiers = append(omuo.modifiers, modifiers...)
	return omuo
}

func (omuo *OrgMetadataUpdateOne) sqlSave(ctx context.Context) (_node *OrgMetadata, err error) {
	if err := omuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmetadata.Table, orgmetadata.Columns, sqlgraph.NewFieldSpec(orgmetadata.FieldID, field.TypeInt))
	id, ok := omuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "OrgMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := omuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgmetadata.FieldID)
		for _, f := range fields {
			if !orgmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != orgmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := omuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omuo.mutation.Name(); ok {
		_spec.SetField(orgmetadata.FieldName, field.TypeString, value)
	}
	if value, ok := omuo.mutation.Description(); ok {
		_spec.SetField(orgmetadata.FieldDescription, field.TypeString, value)
	}
	if omuo.mutation.DescriptionCleared() {
		_spec.ClearField(orgmetadata.FieldDescription, field.TypeString)
	}
	if omuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !omuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmetadata.MetadataTable,
			Columns: []string{orgmetadata.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(omuo.modifiers...)
	_node = &OrgMetadata{config: omuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, omuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	omuo.mutation.done = true
	return _node, nil
}
