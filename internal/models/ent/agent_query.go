// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/antivirus"
	"github.com/doncicuto/openuem_ent/app"
	"github.com/doncicuto/openuem_ent/computer"
	"github.com/doncicuto/openuem_ent/deployment"
	"github.com/doncicuto/openuem_ent/logicaldisk"
	"github.com/doncicuto/openuem_ent/metadata"
	"github.com/doncicuto/openuem_ent/monitor"
	"github.com/doncicuto/openuem_ent/networkadapter"
	"github.com/doncicuto/openuem_ent/operatingsystem"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/printer"
	"github.com/doncicuto/openuem_ent/release"
	"github.com/doncicuto/openuem_ent/share"
	"github.com/doncicuto/openuem_ent/systemupdate"
	"github.com/doncicuto/openuem_ent/tag"
	"github.com/doncicuto/openuem_ent/update"
)

// AgentQuery is the builder for querying Agent entities.
type AgentQuery struct {
	config
	ctx                 *QueryContext
	order               []agent.OrderOption
	inters              []Interceptor
	predicates          []predicate.Agent
	withComputer        *ComputerQuery
	withOperatingsystem *OperatingSystemQuery
	withSystemupdate    *SystemUpdateQuery
	withAntivirus       *AntivirusQuery
	withLogicaldisks    *LogicalDiskQuery
	withApps            *AppQuery
	withMonitors        *MonitorQuery
	withShares          *ShareQuery
	withPrinters        *PrinterQuery
	withNetworkadapters *NetworkAdapterQuery
	withDeployments     *DeploymentQuery
	withUpdates         *UpdateQuery
	withTags            *TagQuery
	withMetadata        *MetadataQuery
	withRelease         *ReleaseQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AgentQuery builder.
func (aq *AgentQuery) Where(ps ...predicate.Agent) *AgentQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AgentQuery) Limit(limit int) *AgentQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AgentQuery) Offset(offset int) *AgentQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AgentQuery) Unique(unique bool) *AgentQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AgentQuery) Order(o ...agent.OrderOption) *AgentQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryComputer chains the current query on the "computer" edge.
func (aq *AgentQuery) QueryComputer() *ComputerQuery {
	query := (&ComputerClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(computer.Table, computer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, agent.ComputerTable, agent.ComputerColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperatingsystem chains the current query on the "operatingsystem" edge.
func (aq *AgentQuery) QueryOperatingsystem() *OperatingSystemQuery {
	query := (&OperatingSystemClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(operatingsystem.Table, operatingsystem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, agent.OperatingsystemTable, agent.OperatingsystemColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySystemupdate chains the current query on the "systemupdate" edge.
func (aq *AgentQuery) QuerySystemupdate() *SystemUpdateQuery {
	query := (&SystemUpdateClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(systemupdate.Table, systemupdate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, agent.SystemupdateTable, agent.SystemupdateColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAntivirus chains the current query on the "antivirus" edge.
func (aq *AgentQuery) QueryAntivirus() *AntivirusQuery {
	query := (&AntivirusClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(antivirus.Table, antivirus.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, agent.AntivirusTable, agent.AntivirusColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogicaldisks chains the current query on the "logicaldisks" edge.
func (aq *AgentQuery) QueryLogicaldisks() *LogicalDiskQuery {
	query := (&LogicalDiskClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(logicaldisk.Table, logicaldisk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.LogicaldisksTable, agent.LogicaldisksColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApps chains the current query on the "apps" edge.
func (aq *AgentQuery) QueryApps() *AppQuery {
	query := (&AppClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.AppsTable, agent.AppsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMonitors chains the current query on the "monitors" edge.
func (aq *AgentQuery) QueryMonitors() *MonitorQuery {
	query := (&MonitorClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(monitor.Table, monitor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.MonitorsTable, agent.MonitorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShares chains the current query on the "shares" edge.
func (aq *AgentQuery) QueryShares() *ShareQuery {
	query := (&ShareClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(share.Table, share.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.SharesTable, agent.SharesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrinters chains the current query on the "printers" edge.
func (aq *AgentQuery) QueryPrinters() *PrinterQuery {
	query := (&PrinterClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(printer.Table, printer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.PrintersTable, agent.PrintersColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNetworkadapters chains the current query on the "networkadapters" edge.
func (aq *AgentQuery) QueryNetworkadapters() *NetworkAdapterQuery {
	query := (&NetworkAdapterClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(networkadapter.Table, networkadapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.NetworkadaptersTable, agent.NetworkadaptersColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeployments chains the current query on the "deployments" edge.
func (aq *AgentQuery) QueryDeployments() *DeploymentQuery {
	query := (&DeploymentClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(deployment.Table, deployment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.DeploymentsTable, agent.DeploymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdates chains the current query on the "updates" edge.
func (aq *AgentQuery) QueryUpdates() *UpdateQuery {
	query := (&UpdateClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(update.Table, update.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.UpdatesTable, agent.UpdatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (aq *AgentQuery) QueryTags() *TagQuery {
	query := (&TagClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, agent.TagsTable, agent.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetadata chains the current query on the "metadata" edge.
func (aq *AgentQuery) QueryMetadata() *MetadataQuery {
	query := (&MetadataClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.MetadataTable, agent.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelease chains the current query on the "release" edge.
func (aq *AgentQuery) QueryRelease() *ReleaseQuery {
	query := (&ReleaseClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, agent.ReleaseTable, agent.ReleaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Agent entity from the query.
// Returns a *NotFoundError when no Agent was found.
func (aq *AgentQuery) First(ctx context.Context) (*Agent, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{agent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AgentQuery) FirstX(ctx context.Context) *Agent {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Agent ID from the query.
// Returns a *NotFoundError when no Agent ID was found.
func (aq *AgentQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{agent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AgentQuery) FirstIDX(ctx context.Context) string {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Agent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Agent entity is found.
// Returns a *NotFoundError when no Agent entities are found.
func (aq *AgentQuery) Only(ctx context.Context) (*Agent, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{agent.Label}
	default:
		return nil, &NotSingularError{agent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AgentQuery) OnlyX(ctx context.Context) *Agent {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Agent ID in the query.
// Returns a *NotSingularError when more than one Agent ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AgentQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{agent.Label}
	default:
		err = &NotSingularError{agent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AgentQuery) OnlyIDX(ctx context.Context) string {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Agents.
func (aq *AgentQuery) All(ctx context.Context) ([]*Agent, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryAll)
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Agent, *AgentQuery]()
	return withInterceptors[[]*Agent](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AgentQuery) AllX(ctx context.Context) []*Agent {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Agent IDs.
func (aq *AgentQuery) IDs(ctx context.Context) (ids []string, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryIDs)
	if err = aq.Select(agent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AgentQuery) IDsX(ctx context.Context) []string {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AgentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryCount)
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AgentQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AgentQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AgentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryExist)
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("openuem_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AgentQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AgentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AgentQuery) Clone() *AgentQuery {
	if aq == nil {
		return nil
	}
	return &AgentQuery{
		config:              aq.config,
		ctx:                 aq.ctx.Clone(),
		order:               append([]agent.OrderOption{}, aq.order...),
		inters:              append([]Interceptor{}, aq.inters...),
		predicates:          append([]predicate.Agent{}, aq.predicates...),
		withComputer:        aq.withComputer.Clone(),
		withOperatingsystem: aq.withOperatingsystem.Clone(),
		withSystemupdate:    aq.withSystemupdate.Clone(),
		withAntivirus:       aq.withAntivirus.Clone(),
		withLogicaldisks:    aq.withLogicaldisks.Clone(),
		withApps:            aq.withApps.Clone(),
		withMonitors:        aq.withMonitors.Clone(),
		withShares:          aq.withShares.Clone(),
		withPrinters:        aq.withPrinters.Clone(),
		withNetworkadapters: aq.withNetworkadapters.Clone(),
		withDeployments:     aq.withDeployments.Clone(),
		withUpdates:         aq.withUpdates.Clone(),
		withTags:            aq.withTags.Clone(),
		withMetadata:        aq.withMetadata.Clone(),
		withRelease:         aq.withRelease.Clone(),
		// clone intermediate query.
		sql:       aq.sql.Clone(),
		path:      aq.path,
		modifiers: append([]func(*sql.Selector){}, aq.modifiers...),
	}
}

// WithComputer tells the query-builder to eager-load the nodes that are connected to
// the "computer" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithComputer(opts ...func(*ComputerQuery)) *AgentQuery {
	query := (&ComputerClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withComputer = query
	return aq
}

// WithOperatingsystem tells the query-builder to eager-load the nodes that are connected to
// the "operatingsystem" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithOperatingsystem(opts ...func(*OperatingSystemQuery)) *AgentQuery {
	query := (&OperatingSystemClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOperatingsystem = query
	return aq
}

// WithSystemupdate tells the query-builder to eager-load the nodes that are connected to
// the "systemupdate" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithSystemupdate(opts ...func(*SystemUpdateQuery)) *AgentQuery {
	query := (&SystemUpdateClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSystemupdate = query
	return aq
}

// WithAntivirus tells the query-builder to eager-load the nodes that are connected to
// the "antivirus" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithAntivirus(opts ...func(*AntivirusQuery)) *AgentQuery {
	query := (&AntivirusClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAntivirus = query
	return aq
}

// WithLogicaldisks tells the query-builder to eager-load the nodes that are connected to
// the "logicaldisks" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithLogicaldisks(opts ...func(*LogicalDiskQuery)) *AgentQuery {
	query := (&LogicalDiskClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withLogicaldisks = query
	return aq
}

// WithApps tells the query-builder to eager-load the nodes that are connected to
// the "apps" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithApps(opts ...func(*AppQuery)) *AgentQuery {
	query := (&AppClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withApps = query
	return aq
}

// WithMonitors tells the query-builder to eager-load the nodes that are connected to
// the "monitors" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithMonitors(opts ...func(*MonitorQuery)) *AgentQuery {
	query := (&MonitorClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMonitors = query
	return aq
}

// WithShares tells the query-builder to eager-load the nodes that are connected to
// the "shares" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithShares(opts ...func(*ShareQuery)) *AgentQuery {
	query := (&ShareClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withShares = query
	return aq
}

// WithPrinters tells the query-builder to eager-load the nodes that are connected to
// the "printers" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithPrinters(opts ...func(*PrinterQuery)) *AgentQuery {
	query := (&PrinterClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withPrinters = query
	return aq
}

// WithNetworkadapters tells the query-builder to eager-load the nodes that are connected to
// the "networkadapters" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithNetworkadapters(opts ...func(*NetworkAdapterQuery)) *AgentQuery {
	query := (&NetworkAdapterClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withNetworkadapters = query
	return aq
}

// WithDeployments tells the query-builder to eager-load the nodes that are connected to
// the "deployments" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithDeployments(opts ...func(*DeploymentQuery)) *AgentQuery {
	query := (&DeploymentClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withDeployments = query
	return aq
}

// WithUpdates tells the query-builder to eager-load the nodes that are connected to
// the "updates" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithUpdates(opts ...func(*UpdateQuery)) *AgentQuery {
	query := (&UpdateClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withUpdates = query
	return aq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithTags(opts ...func(*TagQuery)) *AgentQuery {
	query := (&TagClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withTags = query
	return aq
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithMetadata(opts ...func(*MetadataQuery)) *AgentQuery {
	query := (&MetadataClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMetadata = query
	return aq
}

// WithRelease tells the query-builder to eager-load the nodes that are connected to
// the "release" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithRelease(opts ...func(*ReleaseQuery)) *AgentQuery {
	query := (&ReleaseClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRelease = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Os string `json:"os,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Agent.Query().
//		GroupBy(agent.FieldOs).
//		Aggregate(openuem_ent.Count()).
//		Scan(ctx, &v)
func (aq *AgentQuery) GroupBy(field string, fields ...string) *AgentGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AgentGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = agent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Os string `json:"os,omitempty"`
//	}
//
//	client.Agent.Query().
//		Select(agent.FieldOs).
//		Scan(ctx, &v)
func (aq *AgentQuery) Select(fields ...string) *AgentSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AgentSelect{AgentQuery: aq}
	sbuild.label = agent.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AgentSelect configured with the given aggregations.
func (aq *AgentQuery) Aggregate(fns ...AggregateFunc) *AgentSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AgentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("openuem_ent: uninitialized interceptor (forgotten import openuem_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !agent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AgentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Agent, error) {
	var (
		nodes       = []*Agent{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [15]bool{
			aq.withComputer != nil,
			aq.withOperatingsystem != nil,
			aq.withSystemupdate != nil,
			aq.withAntivirus != nil,
			aq.withLogicaldisks != nil,
			aq.withApps != nil,
			aq.withMonitors != nil,
			aq.withShares != nil,
			aq.withPrinters != nil,
			aq.withNetworkadapters != nil,
			aq.withDeployments != nil,
			aq.withUpdates != nil,
			aq.withTags != nil,
			aq.withMetadata != nil,
			aq.withRelease != nil,
		}
	)
	if aq.withRelease != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, agent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Agent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Agent{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withComputer; query != nil {
		if err := aq.loadComputer(ctx, query, nodes, nil,
			func(n *Agent, e *Computer) { n.Edges.Computer = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOperatingsystem; query != nil {
		if err := aq.loadOperatingsystem(ctx, query, nodes, nil,
			func(n *Agent, e *OperatingSystem) { n.Edges.Operatingsystem = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSystemupdate; query != nil {
		if err := aq.loadSystemupdate(ctx, query, nodes, nil,
			func(n *Agent, e *SystemUpdate) { n.Edges.Systemupdate = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAntivirus; query != nil {
		if err := aq.loadAntivirus(ctx, query, nodes, nil,
			func(n *Agent, e *Antivirus) { n.Edges.Antivirus = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withLogicaldisks; query != nil {
		if err := aq.loadLogicaldisks(ctx, query, nodes,
			func(n *Agent) { n.Edges.Logicaldisks = []*LogicalDisk{} },
			func(n *Agent, e *LogicalDisk) { n.Edges.Logicaldisks = append(n.Edges.Logicaldisks, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withApps; query != nil {
		if err := aq.loadApps(ctx, query, nodes,
			func(n *Agent) { n.Edges.Apps = []*App{} },
			func(n *Agent, e *App) { n.Edges.Apps = append(n.Edges.Apps, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMonitors; query != nil {
		if err := aq.loadMonitors(ctx, query, nodes,
			func(n *Agent) { n.Edges.Monitors = []*Monitor{} },
			func(n *Agent, e *Monitor) { n.Edges.Monitors = append(n.Edges.Monitors, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withShares; query != nil {
		if err := aq.loadShares(ctx, query, nodes,
			func(n *Agent) { n.Edges.Shares = []*Share{} },
			func(n *Agent, e *Share) { n.Edges.Shares = append(n.Edges.Shares, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withPrinters; query != nil {
		if err := aq.loadPrinters(ctx, query, nodes,
			func(n *Agent) { n.Edges.Printers = []*Printer{} },
			func(n *Agent, e *Printer) { n.Edges.Printers = append(n.Edges.Printers, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withNetworkadapters; query != nil {
		if err := aq.loadNetworkadapters(ctx, query, nodes,
			func(n *Agent) { n.Edges.Networkadapters = []*NetworkAdapter{} },
			func(n *Agent, e *NetworkAdapter) { n.Edges.Networkadapters = append(n.Edges.Networkadapters, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withDeployments; query != nil {
		if err := aq.loadDeployments(ctx, query, nodes,
			func(n *Agent) { n.Edges.Deployments = []*Deployment{} },
			func(n *Agent, e *Deployment) { n.Edges.Deployments = append(n.Edges.Deployments, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withUpdates; query != nil {
		if err := aq.loadUpdates(ctx, query, nodes,
			func(n *Agent) { n.Edges.Updates = []*Update{} },
			func(n *Agent, e *Update) { n.Edges.Updates = append(n.Edges.Updates, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withTags; query != nil {
		if err := aq.loadTags(ctx, query, nodes,
			func(n *Agent) { n.Edges.Tags = []*Tag{} },
			func(n *Agent, e *Tag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMetadata; query != nil {
		if err := aq.loadMetadata(ctx, query, nodes,
			func(n *Agent) { n.Edges.Metadata = []*Metadata{} },
			func(n *Agent, e *Metadata) { n.Edges.Metadata = append(n.Edges.Metadata, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRelease; query != nil {
		if err := aq.loadRelease(ctx, query, nodes, nil,
			func(n *Agent, e *Release) { n.Edges.Release = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AgentQuery) loadComputer(ctx context.Context, query *ComputerQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Computer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Computer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.ComputerColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_computer
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_computer" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_computer" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadOperatingsystem(ctx context.Context, query *OperatingSystemQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *OperatingSystem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.OperatingSystem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.OperatingsystemColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_operatingsystem
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_operatingsystem" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_operatingsystem" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadSystemupdate(ctx context.Context, query *SystemUpdateQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *SystemUpdate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.SystemUpdate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.SystemupdateColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_systemupdate
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_systemupdate" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_systemupdate" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadAntivirus(ctx context.Context, query *AntivirusQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Antivirus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Antivirus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.AntivirusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_antivirus
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_antivirus" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_antivirus" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadLogicaldisks(ctx context.Context, query *LogicalDiskQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *LogicalDisk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.LogicalDisk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.LogicaldisksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_logicaldisks
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_logicaldisks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_logicaldisks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadApps(ctx context.Context, query *AppQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *App)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.App(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.AppsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_apps
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_apps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_apps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadMonitors(ctx context.Context, query *MonitorQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Monitor)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Monitor(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.MonitorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_monitors
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_monitors" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_monitors" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadShares(ctx context.Context, query *ShareQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Share)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Share(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.SharesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_shares
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_shares" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_shares" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadPrinters(ctx context.Context, query *PrinterQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Printer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Printer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.PrintersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_printers
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_printers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_printers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadNetworkadapters(ctx context.Context, query *NetworkAdapterQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *NetworkAdapter)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NetworkAdapter(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.NetworkadaptersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_networkadapters
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_networkadapters" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_networkadapters" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadDeployments(ctx context.Context, query *DeploymentQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Deployment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Deployment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.DeploymentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_deployments
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_deployments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_deployments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadUpdates(ctx context.Context, query *UpdateQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Update)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Update(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.UpdatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_updates
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_updates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_updates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadTags(ctx context.Context, query *TagQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Agent)
	nids := make(map[int]map[*Agent]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(agent.TagsTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(agent.TagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(agent.TagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(agent.TagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Agent]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *AgentQuery) loadMetadata(ctx context.Context, query *MetadataQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Metadata)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(agent.MetadataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_metadata
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_metadata" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "agent_metadata" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadRelease(ctx context.Context, query *ReleaseQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Release)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Agent)
	for i := range nodes {
		if nodes[i].release_agents == nil {
			continue
		}
		fk := *nodes[i].release_agents
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(release.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "release_agents" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aq *AgentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AgentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for i := range fields {
			if fields[i] != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AgentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(agent.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = agent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range aq.modifiers {
		m(selector)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aq *AgentQuery) Modify(modifiers ...func(s *sql.Selector)) *AgentSelect {
	aq.modifiers = append(aq.modifiers, modifiers...)
	return aq.Select()
}

// AgentGroupBy is the group-by builder for Agent entities.
type AgentGroupBy struct {
	selector
	build *AgentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AgentGroupBy) Aggregate(fns ...AggregateFunc) *AgentGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AgentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, ent.OpQueryGroupBy)
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentQuery, *AgentGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AgentGroupBy) sqlScan(ctx context.Context, root *AgentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AgentSelect is the builder for selecting fields of Agent entities.
type AgentSelect struct {
	*AgentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AgentSelect) Aggregate(fns ...AggregateFunc) *AgentSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AgentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, ent.OpQuerySelect)
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentQuery, *AgentSelect](ctx, as.AgentQuery, as, as.inters, v)
}

func (as *AgentSelect) sqlScan(ctx context.Context, root *AgentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (as *AgentSelect) Modify(modifiers ...func(s *sql.Selector)) *AgentSelect {
	as.modifiers = append(as.modifiers, modifiers...)
	return as
}
