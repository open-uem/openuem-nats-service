// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/networkadapter"
)

// NetworkAdapter is the model entity for the NetworkAdapter schema.
type NetworkAdapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MACAddress holds the value of the "mac_address" field.
	MACAddress string `json:"mac_address,omitempty"`
	// Addresses holds the value of the "addresses" field.
	Addresses string `json:"addresses,omitempty"`
	// Subnet holds the value of the "subnet" field.
	Subnet string `json:"subnet,omitempty"`
	// DefaultGateway holds the value of the "default_gateway" field.
	DefaultGateway string `json:"default_gateway,omitempty"`
	// DNSServers holds the value of the "dns_servers" field.
	DNSServers string `json:"dns_servers,omitempty"`
	// DNSDomain holds the value of the "dns_domain" field.
	DNSDomain string `json:"dns_domain,omitempty"`
	// DhcpEnabled holds the value of the "dhcp_enabled" field.
	DhcpEnabled bool `json:"dhcp_enabled,omitempty"`
	// DhcpLeaseObtained holds the value of the "dhcp_lease_obtained" field.
	DhcpLeaseObtained time.Time `json:"dhcp_lease_obtained,omitempty"`
	// DhcpLeaseExpired holds the value of the "dhcp_lease_expired" field.
	DhcpLeaseExpired time.Time `json:"dhcp_lease_expired,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed string `json:"speed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetworkAdapterQuery when eager-loading is set.
	Edges                 NetworkAdapterEdges `json:"edges"`
	agent_networkadapters *string
	selectValues          sql.SelectValues
}

// NetworkAdapterEdges holds the relations/edges for other nodes in the graph.
type NetworkAdapterEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkAdapterEdges) OwnerOrErr() (*Agent, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetworkAdapter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case networkadapter.FieldDhcpEnabled:
			values[i] = new(sql.NullBool)
		case networkadapter.FieldID:
			values[i] = new(sql.NullInt64)
		case networkadapter.FieldName, networkadapter.FieldMACAddress, networkadapter.FieldAddresses, networkadapter.FieldSubnet, networkadapter.FieldDefaultGateway, networkadapter.FieldDNSServers, networkadapter.FieldDNSDomain, networkadapter.FieldSpeed:
			values[i] = new(sql.NullString)
		case networkadapter.FieldDhcpLeaseObtained, networkadapter.FieldDhcpLeaseExpired:
			values[i] = new(sql.NullTime)
		case networkadapter.ForeignKeys[0]: // agent_networkadapters
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetworkAdapter fields.
func (na *NetworkAdapter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case networkadapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			na.ID = int(value.Int64)
		case networkadapter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				na.Name = value.String
			}
		case networkadapter.FieldMACAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mac_address", values[i])
			} else if value.Valid {
				na.MACAddress = value.String
			}
		case networkadapter.FieldAddresses:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addresses", values[i])
			} else if value.Valid {
				na.Addresses = value.String
			}
		case networkadapter.FieldSubnet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subnet", values[i])
			} else if value.Valid {
				na.Subnet = value.String
			}
		case networkadapter.FieldDefaultGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_gateway", values[i])
			} else if value.Valid {
				na.DefaultGateway = value.String
			}
		case networkadapter.FieldDNSServers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_servers", values[i])
			} else if value.Valid {
				na.DNSServers = value.String
			}
		case networkadapter.FieldDNSDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_domain", values[i])
			} else if value.Valid {
				na.DNSDomain = value.String
			}
		case networkadapter.FieldDhcpEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dhcp_enabled", values[i])
			} else if value.Valid {
				na.DhcpEnabled = value.Bool
			}
		case networkadapter.FieldDhcpLeaseObtained:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dhcp_lease_obtained", values[i])
			} else if value.Valid {
				na.DhcpLeaseObtained = value.Time
			}
		case networkadapter.FieldDhcpLeaseExpired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dhcp_lease_expired", values[i])
			} else if value.Valid {
				na.DhcpLeaseExpired = value.Time
			}
		case networkadapter.FieldSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				na.Speed = value.String
			}
		case networkadapter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_networkadapters", values[i])
			} else if value.Valid {
				na.agent_networkadapters = new(string)
				*na.agent_networkadapters = value.String
			}
		default:
			na.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NetworkAdapter.
// This includes values selected through modifiers, order, etc.
func (na *NetworkAdapter) Value(name string) (ent.Value, error) {
	return na.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the NetworkAdapter entity.
func (na *NetworkAdapter) QueryOwner() *AgentQuery {
	return NewNetworkAdapterClient(na.config).QueryOwner(na)
}

// Update returns a builder for updating this NetworkAdapter.
// Note that you need to call NetworkAdapter.Unwrap() before calling this method if this NetworkAdapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (na *NetworkAdapter) Update() *NetworkAdapterUpdateOne {
	return NewNetworkAdapterClient(na.config).UpdateOne(na)
}

// Unwrap unwraps the NetworkAdapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (na *NetworkAdapter) Unwrap() *NetworkAdapter {
	_tx, ok := na.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: NetworkAdapter is not a transactional entity")
	}
	na.config.driver = _tx.drv
	return na
}

// String implements the fmt.Stringer.
func (na *NetworkAdapter) String() string {
	var builder strings.Builder
	builder.WriteString("NetworkAdapter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", na.ID))
	builder.WriteString("name=")
	builder.WriteString(na.Name)
	builder.WriteString(", ")
	builder.WriteString("mac_address=")
	builder.WriteString(na.MACAddress)
	builder.WriteString(", ")
	builder.WriteString("addresses=")
	builder.WriteString(na.Addresses)
	builder.WriteString(", ")
	builder.WriteString("subnet=")
	builder.WriteString(na.Subnet)
	builder.WriteString(", ")
	builder.WriteString("default_gateway=")
	builder.WriteString(na.DefaultGateway)
	builder.WriteString(", ")
	builder.WriteString("dns_servers=")
	builder.WriteString(na.DNSServers)
	builder.WriteString(", ")
	builder.WriteString("dns_domain=")
	builder.WriteString(na.DNSDomain)
	builder.WriteString(", ")
	builder.WriteString("dhcp_enabled=")
	builder.WriteString(fmt.Sprintf("%v", na.DhcpEnabled))
	builder.WriteString(", ")
	builder.WriteString("dhcp_lease_obtained=")
	builder.WriteString(na.DhcpLeaseObtained.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dhcp_lease_expired=")
	builder.WriteString(na.DhcpLeaseExpired.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(na.Speed)
	builder.WriteByte(')')
	return builder.String()
}

// NetworkAdapters is a parsable slice of NetworkAdapter.
type NetworkAdapters []*NetworkAdapter
