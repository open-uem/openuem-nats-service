// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/revocation"
)

// RevocationCreate is the builder for creating a Revocation entity.
type RevocationCreate struct {
	config
	mutation *RevocationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetReason sets the "reason" field.
func (rc *RevocationCreate) SetReason(i int) *RevocationCreate {
	rc.mutation.SetReason(i)
	return rc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (rc *RevocationCreate) SetNillableReason(i *int) *RevocationCreate {
	if i != nil {
		rc.SetReason(*i)
	}
	return rc
}

// SetInfo sets the "info" field.
func (rc *RevocationCreate) SetInfo(s string) *RevocationCreate {
	rc.mutation.SetInfo(s)
	return rc
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (rc *RevocationCreate) SetNillableInfo(s *string) *RevocationCreate {
	if s != nil {
		rc.SetInfo(*s)
	}
	return rc
}

// SetExpiry sets the "expiry" field.
func (rc *RevocationCreate) SetExpiry(t time.Time) *RevocationCreate {
	rc.mutation.SetExpiry(t)
	return rc
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (rc *RevocationCreate) SetNillableExpiry(t *time.Time) *RevocationCreate {
	if t != nil {
		rc.SetExpiry(*t)
	}
	return rc
}

// SetRevoked sets the "revoked" field.
func (rc *RevocationCreate) SetRevoked(t time.Time) *RevocationCreate {
	rc.mutation.SetRevoked(t)
	return rc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (rc *RevocationCreate) SetNillableRevoked(t *time.Time) *RevocationCreate {
	if t != nil {
		rc.SetRevoked(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RevocationCreate) SetID(i int64) *RevocationCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the RevocationMutation object of the builder.
func (rc *RevocationCreate) Mutation() *RevocationMutation {
	return rc.mutation
}

// Save creates the Revocation in the database.
func (rc *RevocationCreate) Save(ctx context.Context) (*Revocation, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RevocationCreate) SaveX(ctx context.Context) *Revocation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RevocationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RevocationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RevocationCreate) defaults() {
	if _, ok := rc.mutation.Reason(); !ok {
		v := revocation.DefaultReason
		rc.mutation.SetReason(v)
	}
	if _, ok := rc.mutation.Revoked(); !ok {
		v := revocation.DefaultRevoked()
		rc.mutation.SetRevoked(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RevocationCreate) check() error {
	if _, ok := rc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`openuem_ent: missing required field "Revocation.revoked"`)}
	}
	return nil
}

func (rc *RevocationCreate) sqlSave(ctx context.Context) (*Revocation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RevocationCreate) createSpec() (*Revocation, *sqlgraph.CreateSpec) {
	var (
		_node = &Revocation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(revocation.Table, sqlgraph.NewFieldSpec(revocation.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Reason(); ok {
		_spec.SetField(revocation.FieldReason, field.TypeInt, value)
		_node.Reason = value
	}
	if value, ok := rc.mutation.Info(); ok {
		_spec.SetField(revocation.FieldInfo, field.TypeString, value)
		_node.Info = value
	}
	if value, ok := rc.mutation.Expiry(); ok {
		_spec.SetField(revocation.FieldExpiry, field.TypeTime, value)
		_node.Expiry = value
	}
	if value, ok := rc.mutation.Revoked(); ok {
		_spec.SetField(revocation.FieldRevoked, field.TypeTime, value)
		_node.Revoked = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Revocation.Create().
//		SetReason(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RevocationUpsert) {
//			SetReason(v+v).
//		}).
//		Exec(ctx)
func (rc *RevocationCreate) OnConflict(opts ...sql.ConflictOption) *RevocationUpsertOne {
	rc.conflict = opts
	return &RevocationUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Revocation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RevocationCreate) OnConflictColumns(columns ...string) *RevocationUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RevocationUpsertOne{
		create: rc,
	}
}

type (
	// RevocationUpsertOne is the builder for "upsert"-ing
	//  one Revocation node.
	RevocationUpsertOne struct {
		create *RevocationCreate
	}

	// RevocationUpsert is the "OnConflict" setter.
	RevocationUpsert struct {
		*sql.UpdateSet
	}
)

// SetReason sets the "reason" field.
func (u *RevocationUpsert) SetReason(v int) *RevocationUpsert {
	u.Set(revocation.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *RevocationUpsert) UpdateReason() *RevocationUpsert {
	u.SetExcluded(revocation.FieldReason)
	return u
}

// AddReason adds v to the "reason" field.
func (u *RevocationUpsert) AddReason(v int) *RevocationUpsert {
	u.Add(revocation.FieldReason, v)
	return u
}

// ClearReason clears the value of the "reason" field.
func (u *RevocationUpsert) ClearReason() *RevocationUpsert {
	u.SetNull(revocation.FieldReason)
	return u
}

// SetInfo sets the "info" field.
func (u *RevocationUpsert) SetInfo(v string) *RevocationUpsert {
	u.Set(revocation.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *RevocationUpsert) UpdateInfo() *RevocationUpsert {
	u.SetExcluded(revocation.FieldInfo)
	return u
}

// ClearInfo clears the value of the "info" field.
func (u *RevocationUpsert) ClearInfo() *RevocationUpsert {
	u.SetNull(revocation.FieldInfo)
	return u
}

// SetExpiry sets the "expiry" field.
func (u *RevocationUpsert) SetExpiry(v time.Time) *RevocationUpsert {
	u.Set(revocation.FieldExpiry, v)
	return u
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *RevocationUpsert) UpdateExpiry() *RevocationUpsert {
	u.SetExcluded(revocation.FieldExpiry)
	return u
}

// ClearExpiry clears the value of the "expiry" field.
func (u *RevocationUpsert) ClearExpiry() *RevocationUpsert {
	u.SetNull(revocation.FieldExpiry)
	return u
}

// SetRevoked sets the "revoked" field.
func (u *RevocationUpsert) SetRevoked(v time.Time) *RevocationUpsert {
	u.Set(revocation.FieldRevoked, v)
	return u
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *RevocationUpsert) UpdateRevoked() *RevocationUpsert {
	u.SetExcluded(revocation.FieldRevoked)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Revocation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(revocation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RevocationUpsertOne) UpdateNewValues() *RevocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(revocation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Revocation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RevocationUpsertOne) Ignore() *RevocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RevocationUpsertOne) DoNothing() *RevocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RevocationCreate.OnConflict
// documentation for more info.
func (u *RevocationUpsertOne) Update(set func(*RevocationUpsert)) *RevocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RevocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetReason sets the "reason" field.
func (u *RevocationUpsertOne) SetReason(v int) *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.SetReason(v)
	})
}

// AddReason adds v to the "reason" field.
func (u *RevocationUpsertOne) AddReason(v int) *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.AddReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *RevocationUpsertOne) UpdateReason() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *RevocationUpsertOne) ClearReason() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearReason()
	})
}

// SetInfo sets the "info" field.
func (u *RevocationUpsertOne) SetInfo(v string) *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *RevocationUpsertOne) UpdateInfo() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *RevocationUpsertOne) ClearInfo() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearInfo()
	})
}

// SetExpiry sets the "expiry" field.
func (u *RevocationUpsertOne) SetExpiry(v time.Time) *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.SetExpiry(v)
	})
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *RevocationUpsertOne) UpdateExpiry() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateExpiry()
	})
}

// ClearExpiry clears the value of the "expiry" field.
func (u *RevocationUpsertOne) ClearExpiry() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearExpiry()
	})
}

// SetRevoked sets the "revoked" field.
func (u *RevocationUpsertOne) SetRevoked(v time.Time) *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *RevocationUpsertOne) UpdateRevoked() *RevocationUpsertOne {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateRevoked()
	})
}

// Exec executes the query.
func (u *RevocationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for RevocationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RevocationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RevocationUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RevocationUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RevocationCreateBulk is the builder for creating many Revocation entities in bulk.
type RevocationCreateBulk struct {
	config
	err      error
	builders []*RevocationCreate
	conflict []sql.ConflictOption
}

// Save creates the Revocation entities in the database.
func (rcb *RevocationCreateBulk) Save(ctx context.Context) ([]*Revocation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Revocation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RevocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RevocationCreateBulk) SaveX(ctx context.Context) []*Revocation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RevocationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RevocationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Revocation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RevocationUpsert) {
//			SetReason(v+v).
//		}).
//		Exec(ctx)
func (rcb *RevocationCreateBulk) OnConflict(opts ...sql.ConflictOption) *RevocationUpsertBulk {
	rcb.conflict = opts
	return &RevocationUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Revocation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RevocationCreateBulk) OnConflictColumns(columns ...string) *RevocationUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RevocationUpsertBulk{
		create: rcb,
	}
}

// RevocationUpsertBulk is the builder for "upsert"-ing
// a bulk of Revocation nodes.
type RevocationUpsertBulk struct {
	create *RevocationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Revocation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(revocation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RevocationUpsertBulk) UpdateNewValues() *RevocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(revocation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Revocation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RevocationUpsertBulk) Ignore() *RevocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RevocationUpsertBulk) DoNothing() *RevocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RevocationCreateBulk.OnConflict
// documentation for more info.
func (u *RevocationUpsertBulk) Update(set func(*RevocationUpsert)) *RevocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RevocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetReason sets the "reason" field.
func (u *RevocationUpsertBulk) SetReason(v int) *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.SetReason(v)
	})
}

// AddReason adds v to the "reason" field.
func (u *RevocationUpsertBulk) AddReason(v int) *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.AddReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *RevocationUpsertBulk) UpdateReason() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *RevocationUpsertBulk) ClearReason() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearReason()
	})
}

// SetInfo sets the "info" field.
func (u *RevocationUpsertBulk) SetInfo(v string) *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *RevocationUpsertBulk) UpdateInfo() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *RevocationUpsertBulk) ClearInfo() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearInfo()
	})
}

// SetExpiry sets the "expiry" field.
func (u *RevocationUpsertBulk) SetExpiry(v time.Time) *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.SetExpiry(v)
	})
}

// UpdateExpiry sets the "expiry" field to the value that was provided on create.
func (u *RevocationUpsertBulk) UpdateExpiry() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateExpiry()
	})
}

// ClearExpiry clears the value of the "expiry" field.
func (u *RevocationUpsertBulk) ClearExpiry() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.ClearExpiry()
	})
}

// SetRevoked sets the "revoked" field.
func (u *RevocationUpsertBulk) SetRevoked(v time.Time) *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *RevocationUpsertBulk) UpdateRevoked() *RevocationUpsertBulk {
	return u.Update(func(s *RevocationUpsert) {
		s.UpdateRevoked()
	})
}

// Exec executes the query.
func (u *RevocationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the RevocationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for RevocationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RevocationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
