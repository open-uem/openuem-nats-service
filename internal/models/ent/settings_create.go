// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/settings"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLanguage sets the "language" field.
func (sc *SettingsCreate) SetLanguage(s string) *SettingsCreate {
	sc.mutation.SetLanguage(s)
	return sc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableLanguage(s *string) *SettingsCreate {
	if s != nil {
		sc.SetLanguage(*s)
	}
	return sc
}

// SetOrganization sets the "organization" field.
func (sc *SettingsCreate) SetOrganization(s string) *SettingsCreate {
	sc.mutation.SetOrganization(s)
	return sc
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableOrganization(s *string) *SettingsCreate {
	if s != nil {
		sc.SetOrganization(*s)
	}
	return sc
}

// SetPostalAddress sets the "postal_address" field.
func (sc *SettingsCreate) SetPostalAddress(s string) *SettingsCreate {
	sc.mutation.SetPostalAddress(s)
	return sc
}

// SetNillablePostalAddress sets the "postal_address" field if the given value is not nil.
func (sc *SettingsCreate) SetNillablePostalAddress(s *string) *SettingsCreate {
	if s != nil {
		sc.SetPostalAddress(*s)
	}
	return sc
}

// SetPostalCode sets the "postal_code" field.
func (sc *SettingsCreate) SetPostalCode(s string) *SettingsCreate {
	sc.mutation.SetPostalCode(s)
	return sc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (sc *SettingsCreate) SetNillablePostalCode(s *string) *SettingsCreate {
	if s != nil {
		sc.SetPostalCode(*s)
	}
	return sc
}

// SetLocality sets the "locality" field.
func (sc *SettingsCreate) SetLocality(s string) *SettingsCreate {
	sc.mutation.SetLocality(s)
	return sc
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableLocality(s *string) *SettingsCreate {
	if s != nil {
		sc.SetLocality(*s)
	}
	return sc
}

// SetProvince sets the "province" field.
func (sc *SettingsCreate) SetProvince(s string) *SettingsCreate {
	sc.mutation.SetProvince(s)
	return sc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableProvince(s *string) *SettingsCreate {
	if s != nil {
		sc.SetProvince(*s)
	}
	return sc
}

// SetState sets the "state" field.
func (sc *SettingsCreate) SetState(s string) *SettingsCreate {
	sc.mutation.SetState(s)
	return sc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableState(s *string) *SettingsCreate {
	if s != nil {
		sc.SetState(*s)
	}
	return sc
}

// SetCountry sets the "country" field.
func (sc *SettingsCreate) SetCountry(s string) *SettingsCreate {
	sc.mutation.SetCountry(s)
	return sc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableCountry(s *string) *SettingsCreate {
	if s != nil {
		sc.SetCountry(*s)
	}
	return sc
}

// SetSMTPServer sets the "smtp_server" field.
func (sc *SettingsCreate) SetSMTPServer(s string) *SettingsCreate {
	sc.mutation.SetSMTPServer(s)
	return sc
}

// SetNillableSMTPServer sets the "smtp_server" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPServer(s *string) *SettingsCreate {
	if s != nil {
		sc.SetSMTPServer(*s)
	}
	return sc
}

// SetSMTPPort sets the "smtp_port" field.
func (sc *SettingsCreate) SetSMTPPort(i int) *SettingsCreate {
	sc.mutation.SetSMTPPort(i)
	return sc
}

// SetNillableSMTPPort sets the "smtp_port" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPPort(i *int) *SettingsCreate {
	if i != nil {
		sc.SetSMTPPort(*i)
	}
	return sc
}

// SetSMTPUser sets the "smtp_user" field.
func (sc *SettingsCreate) SetSMTPUser(s string) *SettingsCreate {
	sc.mutation.SetSMTPUser(s)
	return sc
}

// SetNillableSMTPUser sets the "smtp_user" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPUser(s *string) *SettingsCreate {
	if s != nil {
		sc.SetSMTPUser(*s)
	}
	return sc
}

// SetSMTPPassword sets the "smtp_password" field.
func (sc *SettingsCreate) SetSMTPPassword(s string) *SettingsCreate {
	sc.mutation.SetSMTPPassword(s)
	return sc
}

// SetNillableSMTPPassword sets the "smtp_password" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPPassword(s *string) *SettingsCreate {
	if s != nil {
		sc.SetSMTPPassword(*s)
	}
	return sc
}

// SetSMTPAuth sets the "smtp_auth" field.
func (sc *SettingsCreate) SetSMTPAuth(s string) *SettingsCreate {
	sc.mutation.SetSMTPAuth(s)
	return sc
}

// SetNillableSMTPAuth sets the "smtp_auth" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPAuth(s *string) *SettingsCreate {
	if s != nil {
		sc.SetSMTPAuth(*s)
	}
	return sc
}

// SetSMTPTLS sets the "smtp_tls" field.
func (sc *SettingsCreate) SetSMTPTLS(b bool) *SettingsCreate {
	sc.mutation.SetSMTPTLS(b)
	return sc
}

// SetNillableSMTPTLS sets the "smtp_tls" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPTLS(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetSMTPTLS(*b)
	}
	return sc
}

// SetSMTPStarttls sets the "smtp_starttls" field.
func (sc *SettingsCreate) SetSMTPStarttls(b bool) *SettingsCreate {
	sc.mutation.SetSMTPStarttls(b)
	return sc
}

// SetNillableSMTPStarttls sets the "smtp_starttls" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSMTPStarttls(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetSMTPStarttls(*b)
	}
	return sc
}

// SetNatsServer sets the "nats_server" field.
func (sc *SettingsCreate) SetNatsServer(s string) *SettingsCreate {
	sc.mutation.SetNatsServer(s)
	return sc
}

// SetNillableNatsServer sets the "nats_server" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableNatsServer(s *string) *SettingsCreate {
	if s != nil {
		sc.SetNatsServer(*s)
	}
	return sc
}

// SetNatsPort sets the "nats_port" field.
func (sc *SettingsCreate) SetNatsPort(s string) *SettingsCreate {
	sc.mutation.SetNatsPort(s)
	return sc
}

// SetNillableNatsPort sets the "nats_port" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableNatsPort(s *string) *SettingsCreate {
	if s != nil {
		sc.SetNatsPort(*s)
	}
	return sc
}

// SetMessageFrom sets the "message_from" field.
func (sc *SettingsCreate) SetMessageFrom(s string) *SettingsCreate {
	sc.mutation.SetMessageFrom(s)
	return sc
}

// SetNillableMessageFrom sets the "message_from" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMessageFrom(s *string) *SettingsCreate {
	if s != nil {
		sc.SetMessageFrom(*s)
	}
	return sc
}

// SetMaxUploadSize sets the "max_upload_size" field.
func (sc *SettingsCreate) SetMaxUploadSize(s string) *SettingsCreate {
	sc.mutation.SetMaxUploadSize(s)
	return sc
}

// SetNillableMaxUploadSize sets the "max_upload_size" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMaxUploadSize(s *string) *SettingsCreate {
	if s != nil {
		sc.SetMaxUploadSize(*s)
	}
	return sc
}

// SetUserCertYearsValid sets the "user_cert_years_valid" field.
func (sc *SettingsCreate) SetUserCertYearsValid(i int) *SettingsCreate {
	sc.mutation.SetUserCertYearsValid(i)
	return sc
}

// SetNillableUserCertYearsValid sets the "user_cert_years_valid" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableUserCertYearsValid(i *int) *SettingsCreate {
	if i != nil {
		sc.SetUserCertYearsValid(*i)
	}
	return sc
}

// SetNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field.
func (sc *SettingsCreate) SetNatsRequestTimeoutSeconds(i int) *SettingsCreate {
	sc.mutation.SetNatsRequestTimeoutSeconds(i)
	return sc
}

// SetNillableNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableNatsRequestTimeoutSeconds(i *int) *SettingsCreate {
	if i != nil {
		sc.SetNatsRequestTimeoutSeconds(*i)
	}
	return sc
}

// SetRefreshTimeInMinutes sets the "refresh_time_in_minutes" field.
func (sc *SettingsCreate) SetRefreshTimeInMinutes(i int) *SettingsCreate {
	sc.mutation.SetRefreshTimeInMinutes(i)
	return sc
}

// SetNillableRefreshTimeInMinutes sets the "refresh_time_in_minutes" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableRefreshTimeInMinutes(i *int) *SettingsCreate {
	if i != nil {
		sc.SetRefreshTimeInMinutes(*i)
	}
	return sc
}

// SetSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field.
func (sc *SettingsCreate) SetSessionLifetimeInMinutes(i int) *SettingsCreate {
	sc.mutation.SetSessionLifetimeInMinutes(i)
	return sc
}

// SetNillableSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableSessionLifetimeInMinutes(i *int) *SettingsCreate {
	if i != nil {
		sc.SetSessionLifetimeInMinutes(*i)
	}
	return sc
}

// SetUpdateChannel sets the "update_channel" field.
func (sc *SettingsCreate) SetUpdateChannel(s string) *SettingsCreate {
	sc.mutation.SetUpdateChannel(s)
	return sc
}

// SetNillableUpdateChannel sets the "update_channel" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableUpdateChannel(s *string) *SettingsCreate {
	if s != nil {
		sc.SetUpdateChannel(*s)
	}
	return sc
}

// SetCreated sets the "created" field.
func (sc *SettingsCreate) SetCreated(t time.Time) *SettingsCreate {
	sc.mutation.SetCreated(t)
	return sc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableCreated(t *time.Time) *SettingsCreate {
	if t != nil {
		sc.SetCreated(*t)
	}
	return sc
}

// SetModified sets the "modified" field.
func (sc *SettingsCreate) SetModified(t time.Time) *SettingsCreate {
	sc.mutation.SetModified(t)
	return sc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableModified(t *time.Time) *SettingsCreate {
	if t != nil {
		sc.SetModified(*t)
	}
	return sc
}

// SetAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field.
func (sc *SettingsCreate) SetAgentReportFrequenceInMinutes(i int) *SettingsCreate {
	sc.mutation.SetAgentReportFrequenceInMinutes(i)
	return sc
}

// SetNillableAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableAgentReportFrequenceInMinutes(i *int) *SettingsCreate {
	if i != nil {
		sc.SetAgentReportFrequenceInMinutes(*i)
	}
	return sc
}

// Mutation returns the SettingsMutation object of the builder.
func (sc *SettingsCreate) Mutation() *SettingsMutation {
	return sc.mutation
}

// Save creates the Settings in the database.
func (sc *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingsCreate) defaults() {
	if _, ok := sc.mutation.Country(); !ok {
		v := settings.DefaultCountry
		sc.mutation.SetCountry(v)
	}
	if _, ok := sc.mutation.SMTPPort(); !ok {
		v := settings.DefaultSMTPPort
		sc.mutation.SetSMTPPort(v)
	}
	if _, ok := sc.mutation.SMTPAuth(); !ok {
		v := settings.DefaultSMTPAuth
		sc.mutation.SetSMTPAuth(v)
	}
	if _, ok := sc.mutation.SMTPTLS(); !ok {
		v := settings.DefaultSMTPTLS
		sc.mutation.SetSMTPTLS(v)
	}
	if _, ok := sc.mutation.SMTPStarttls(); !ok {
		v := settings.DefaultSMTPStarttls
		sc.mutation.SetSMTPStarttls(v)
	}
	if _, ok := sc.mutation.MaxUploadSize(); !ok {
		v := settings.DefaultMaxUploadSize
		sc.mutation.SetMaxUploadSize(v)
	}
	if _, ok := sc.mutation.UserCertYearsValid(); !ok {
		v := settings.DefaultUserCertYearsValid
		sc.mutation.SetUserCertYearsValid(v)
	}
	if _, ok := sc.mutation.NatsRequestTimeoutSeconds(); !ok {
		v := settings.DefaultNatsRequestTimeoutSeconds
		sc.mutation.SetNatsRequestTimeoutSeconds(v)
	}
	if _, ok := sc.mutation.RefreshTimeInMinutes(); !ok {
		v := settings.DefaultRefreshTimeInMinutes
		sc.mutation.SetRefreshTimeInMinutes(v)
	}
	if _, ok := sc.mutation.SessionLifetimeInMinutes(); !ok {
		v := settings.DefaultSessionLifetimeInMinutes
		sc.mutation.SetSessionLifetimeInMinutes(v)
	}
	if _, ok := sc.mutation.UpdateChannel(); !ok {
		v := settings.DefaultUpdateChannel
		sc.mutation.SetUpdateChannel(v)
	}
	if _, ok := sc.mutation.Created(); !ok {
		v := settings.DefaultCreated()
		sc.mutation.SetCreated(v)
	}
	if _, ok := sc.mutation.Modified(); !ok {
		v := settings.DefaultModified()
		sc.mutation.SetModified(v)
	}
	if _, ok := sc.mutation.AgentReportFrequenceInMinutes(); !ok {
		v := settings.DefaultAgentReportFrequenceInMinutes
		sc.mutation.SetAgentReportFrequenceInMinutes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingsCreate) check() error {
	return nil
}

func (sc *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(settings.Table, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Language(); ok {
		_spec.SetField(settings.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := sc.mutation.Organization(); ok {
		_spec.SetField(settings.FieldOrganization, field.TypeString, value)
		_node.Organization = value
	}
	if value, ok := sc.mutation.PostalAddress(); ok {
		_spec.SetField(settings.FieldPostalAddress, field.TypeString, value)
		_node.PostalAddress = value
	}
	if value, ok := sc.mutation.PostalCode(); ok {
		_spec.SetField(settings.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := sc.mutation.Locality(); ok {
		_spec.SetField(settings.FieldLocality, field.TypeString, value)
		_node.Locality = value
	}
	if value, ok := sc.mutation.Province(); ok {
		_spec.SetField(settings.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := sc.mutation.State(); ok {
		_spec.SetField(settings.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := sc.mutation.Country(); ok {
		_spec.SetField(settings.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := sc.mutation.SMTPServer(); ok {
		_spec.SetField(settings.FieldSMTPServer, field.TypeString, value)
		_node.SMTPServer = value
	}
	if value, ok := sc.mutation.SMTPPort(); ok {
		_spec.SetField(settings.FieldSMTPPort, field.TypeInt, value)
		_node.SMTPPort = value
	}
	if value, ok := sc.mutation.SMTPUser(); ok {
		_spec.SetField(settings.FieldSMTPUser, field.TypeString, value)
		_node.SMTPUser = value
	}
	if value, ok := sc.mutation.SMTPPassword(); ok {
		_spec.SetField(settings.FieldSMTPPassword, field.TypeString, value)
		_node.SMTPPassword = value
	}
	if value, ok := sc.mutation.SMTPAuth(); ok {
		_spec.SetField(settings.FieldSMTPAuth, field.TypeString, value)
		_node.SMTPAuth = value
	}
	if value, ok := sc.mutation.SMTPTLS(); ok {
		_spec.SetField(settings.FieldSMTPTLS, field.TypeBool, value)
		_node.SMTPTLS = value
	}
	if value, ok := sc.mutation.SMTPStarttls(); ok {
		_spec.SetField(settings.FieldSMTPStarttls, field.TypeBool, value)
		_node.SMTPStarttls = value
	}
	if value, ok := sc.mutation.NatsServer(); ok {
		_spec.SetField(settings.FieldNatsServer, field.TypeString, value)
		_node.NatsServer = value
	}
	if value, ok := sc.mutation.NatsPort(); ok {
		_spec.SetField(settings.FieldNatsPort, field.TypeString, value)
		_node.NatsPort = value
	}
	if value, ok := sc.mutation.MessageFrom(); ok {
		_spec.SetField(settings.FieldMessageFrom, field.TypeString, value)
		_node.MessageFrom = value
	}
	if value, ok := sc.mutation.MaxUploadSize(); ok {
		_spec.SetField(settings.FieldMaxUploadSize, field.TypeString, value)
		_node.MaxUploadSize = value
	}
	if value, ok := sc.mutation.UserCertYearsValid(); ok {
		_spec.SetField(settings.FieldUserCertYearsValid, field.TypeInt, value)
		_node.UserCertYearsValid = value
	}
	if value, ok := sc.mutation.NatsRequestTimeoutSeconds(); ok {
		_spec.SetField(settings.FieldNatsRequestTimeoutSeconds, field.TypeInt, value)
		_node.NatsRequestTimeoutSeconds = value
	}
	if value, ok := sc.mutation.RefreshTimeInMinutes(); ok {
		_spec.SetField(settings.FieldRefreshTimeInMinutes, field.TypeInt, value)
		_node.RefreshTimeInMinutes = value
	}
	if value, ok := sc.mutation.SessionLifetimeInMinutes(); ok {
		_spec.SetField(settings.FieldSessionLifetimeInMinutes, field.TypeInt, value)
		_node.SessionLifetimeInMinutes = value
	}
	if value, ok := sc.mutation.UpdateChannel(); ok {
		_spec.SetField(settings.FieldUpdateChannel, field.TypeString, value)
		_node.UpdateChannel = value
	}
	if value, ok := sc.mutation.Created(); ok {
		_spec.SetField(settings.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := sc.mutation.Modified(); ok {
		_spec.SetField(settings.FieldModified, field.TypeTime, value)
		_node.Modified = value
	}
	if value, ok := sc.mutation.AgentReportFrequenceInMinutes(); ok {
		_spec.SetField(settings.FieldAgentReportFrequenceInMinutes, field.TypeInt, value)
		_node.AgentReportFrequenceInMinutes = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Settings.Create().
//		SetLanguage(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingsUpsert) {
//			SetLanguage(v+v).
//		}).
//		Exec(ctx)
func (sc *SettingsCreate) OnConflict(opts ...sql.ConflictOption) *SettingsUpsertOne {
	sc.conflict = opts
	return &SettingsUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SettingsCreate) OnConflictColumns(columns ...string) *SettingsUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SettingsUpsertOne{
		create: sc,
	}
}

type (
	// SettingsUpsertOne is the builder for "upsert"-ing
	//  one Settings node.
	SettingsUpsertOne struct {
		create *SettingsCreate
	}

	// SettingsUpsert is the "OnConflict" setter.
	SettingsUpsert struct {
		*sql.UpdateSet
	}
)

// SetLanguage sets the "language" field.
func (u *SettingsUpsert) SetLanguage(v string) *SettingsUpsert {
	u.Set(settings.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateLanguage() *SettingsUpsert {
	u.SetExcluded(settings.FieldLanguage)
	return u
}

// ClearLanguage clears the value of the "language" field.
func (u *SettingsUpsert) ClearLanguage() *SettingsUpsert {
	u.SetNull(settings.FieldLanguage)
	return u
}

// SetOrganization sets the "organization" field.
func (u *SettingsUpsert) SetOrganization(v string) *SettingsUpsert {
	u.Set(settings.FieldOrganization, v)
	return u
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateOrganization() *SettingsUpsert {
	u.SetExcluded(settings.FieldOrganization)
	return u
}

// ClearOrganization clears the value of the "organization" field.
func (u *SettingsUpsert) ClearOrganization() *SettingsUpsert {
	u.SetNull(settings.FieldOrganization)
	return u
}

// SetPostalAddress sets the "postal_address" field.
func (u *SettingsUpsert) SetPostalAddress(v string) *SettingsUpsert {
	u.Set(settings.FieldPostalAddress, v)
	return u
}

// UpdatePostalAddress sets the "postal_address" field to the value that was provided on create.
func (u *SettingsUpsert) UpdatePostalAddress() *SettingsUpsert {
	u.SetExcluded(settings.FieldPostalAddress)
	return u
}

// ClearPostalAddress clears the value of the "postal_address" field.
func (u *SettingsUpsert) ClearPostalAddress() *SettingsUpsert {
	u.SetNull(settings.FieldPostalAddress)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *SettingsUpsert) SetPostalCode(v string) *SettingsUpsert {
	u.Set(settings.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *SettingsUpsert) UpdatePostalCode() *SettingsUpsert {
	u.SetExcluded(settings.FieldPostalCode)
	return u
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *SettingsUpsert) ClearPostalCode() *SettingsUpsert {
	u.SetNull(settings.FieldPostalCode)
	return u
}

// SetLocality sets the "locality" field.
func (u *SettingsUpsert) SetLocality(v string) *SettingsUpsert {
	u.Set(settings.FieldLocality, v)
	return u
}

// UpdateLocality sets the "locality" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateLocality() *SettingsUpsert {
	u.SetExcluded(settings.FieldLocality)
	return u
}

// ClearLocality clears the value of the "locality" field.
func (u *SettingsUpsert) ClearLocality() *SettingsUpsert {
	u.SetNull(settings.FieldLocality)
	return u
}

// SetProvince sets the "province" field.
func (u *SettingsUpsert) SetProvince(v string) *SettingsUpsert {
	u.Set(settings.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateProvince() *SettingsUpsert {
	u.SetExcluded(settings.FieldProvince)
	return u
}

// ClearProvince clears the value of the "province" field.
func (u *SettingsUpsert) ClearProvince() *SettingsUpsert {
	u.SetNull(settings.FieldProvince)
	return u
}

// SetState sets the "state" field.
func (u *SettingsUpsert) SetState(v string) *SettingsUpsert {
	u.Set(settings.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateState() *SettingsUpsert {
	u.SetExcluded(settings.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *SettingsUpsert) ClearState() *SettingsUpsert {
	u.SetNull(settings.FieldState)
	return u
}

// SetCountry sets the "country" field.
func (u *SettingsUpsert) SetCountry(v string) *SettingsUpsert {
	u.Set(settings.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateCountry() *SettingsUpsert {
	u.SetExcluded(settings.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *SettingsUpsert) ClearCountry() *SettingsUpsert {
	u.SetNull(settings.FieldCountry)
	return u
}

// SetSMTPServer sets the "smtp_server" field.
func (u *SettingsUpsert) SetSMTPServer(v string) *SettingsUpsert {
	u.Set(settings.FieldSMTPServer, v)
	return u
}

// UpdateSMTPServer sets the "smtp_server" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPServer() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPServer)
	return u
}

// ClearSMTPServer clears the value of the "smtp_server" field.
func (u *SettingsUpsert) ClearSMTPServer() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPServer)
	return u
}

// SetSMTPPort sets the "smtp_port" field.
func (u *SettingsUpsert) SetSMTPPort(v int) *SettingsUpsert {
	u.Set(settings.FieldSMTPPort, v)
	return u
}

// UpdateSMTPPort sets the "smtp_port" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPPort() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPPort)
	return u
}

// AddSMTPPort adds v to the "smtp_port" field.
func (u *SettingsUpsert) AddSMTPPort(v int) *SettingsUpsert {
	u.Add(settings.FieldSMTPPort, v)
	return u
}

// ClearSMTPPort clears the value of the "smtp_port" field.
func (u *SettingsUpsert) ClearSMTPPort() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPPort)
	return u
}

// SetSMTPUser sets the "smtp_user" field.
func (u *SettingsUpsert) SetSMTPUser(v string) *SettingsUpsert {
	u.Set(settings.FieldSMTPUser, v)
	return u
}

// UpdateSMTPUser sets the "smtp_user" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPUser() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPUser)
	return u
}

// ClearSMTPUser clears the value of the "smtp_user" field.
func (u *SettingsUpsert) ClearSMTPUser() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPUser)
	return u
}

// SetSMTPPassword sets the "smtp_password" field.
func (u *SettingsUpsert) SetSMTPPassword(v string) *SettingsUpsert {
	u.Set(settings.FieldSMTPPassword, v)
	return u
}

// UpdateSMTPPassword sets the "smtp_password" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPPassword() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPPassword)
	return u
}

// ClearSMTPPassword clears the value of the "smtp_password" field.
func (u *SettingsUpsert) ClearSMTPPassword() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPPassword)
	return u
}

// SetSMTPAuth sets the "smtp_auth" field.
func (u *SettingsUpsert) SetSMTPAuth(v string) *SettingsUpsert {
	u.Set(settings.FieldSMTPAuth, v)
	return u
}

// UpdateSMTPAuth sets the "smtp_auth" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPAuth() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPAuth)
	return u
}

// ClearSMTPAuth clears the value of the "smtp_auth" field.
func (u *SettingsUpsert) ClearSMTPAuth() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPAuth)
	return u
}

// SetSMTPTLS sets the "smtp_tls" field.
func (u *SettingsUpsert) SetSMTPTLS(v bool) *SettingsUpsert {
	u.Set(settings.FieldSMTPTLS, v)
	return u
}

// UpdateSMTPTLS sets the "smtp_tls" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPTLS() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPTLS)
	return u
}

// ClearSMTPTLS clears the value of the "smtp_tls" field.
func (u *SettingsUpsert) ClearSMTPTLS() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPTLS)
	return u
}

// SetSMTPStarttls sets the "smtp_starttls" field.
func (u *SettingsUpsert) SetSMTPStarttls(v bool) *SettingsUpsert {
	u.Set(settings.FieldSMTPStarttls, v)
	return u
}

// UpdateSMTPStarttls sets the "smtp_starttls" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSMTPStarttls() *SettingsUpsert {
	u.SetExcluded(settings.FieldSMTPStarttls)
	return u
}

// ClearSMTPStarttls clears the value of the "smtp_starttls" field.
func (u *SettingsUpsert) ClearSMTPStarttls() *SettingsUpsert {
	u.SetNull(settings.FieldSMTPStarttls)
	return u
}

// SetNatsServer sets the "nats_server" field.
func (u *SettingsUpsert) SetNatsServer(v string) *SettingsUpsert {
	u.Set(settings.FieldNatsServer, v)
	return u
}

// UpdateNatsServer sets the "nats_server" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateNatsServer() *SettingsUpsert {
	u.SetExcluded(settings.FieldNatsServer)
	return u
}

// ClearNatsServer clears the value of the "nats_server" field.
func (u *SettingsUpsert) ClearNatsServer() *SettingsUpsert {
	u.SetNull(settings.FieldNatsServer)
	return u
}

// SetNatsPort sets the "nats_port" field.
func (u *SettingsUpsert) SetNatsPort(v string) *SettingsUpsert {
	u.Set(settings.FieldNatsPort, v)
	return u
}

// UpdateNatsPort sets the "nats_port" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateNatsPort() *SettingsUpsert {
	u.SetExcluded(settings.FieldNatsPort)
	return u
}

// ClearNatsPort clears the value of the "nats_port" field.
func (u *SettingsUpsert) ClearNatsPort() *SettingsUpsert {
	u.SetNull(settings.FieldNatsPort)
	return u
}

// SetMessageFrom sets the "message_from" field.
func (u *SettingsUpsert) SetMessageFrom(v string) *SettingsUpsert {
	u.Set(settings.FieldMessageFrom, v)
	return u
}

// UpdateMessageFrom sets the "message_from" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateMessageFrom() *SettingsUpsert {
	u.SetExcluded(settings.FieldMessageFrom)
	return u
}

// ClearMessageFrom clears the value of the "message_from" field.
func (u *SettingsUpsert) ClearMessageFrom() *SettingsUpsert {
	u.SetNull(settings.FieldMessageFrom)
	return u
}

// SetMaxUploadSize sets the "max_upload_size" field.
func (u *SettingsUpsert) SetMaxUploadSize(v string) *SettingsUpsert {
	u.Set(settings.FieldMaxUploadSize, v)
	return u
}

// UpdateMaxUploadSize sets the "max_upload_size" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateMaxUploadSize() *SettingsUpsert {
	u.SetExcluded(settings.FieldMaxUploadSize)
	return u
}

// ClearMaxUploadSize clears the value of the "max_upload_size" field.
func (u *SettingsUpsert) ClearMaxUploadSize() *SettingsUpsert {
	u.SetNull(settings.FieldMaxUploadSize)
	return u
}

// SetUserCertYearsValid sets the "user_cert_years_valid" field.
func (u *SettingsUpsert) SetUserCertYearsValid(v int) *SettingsUpsert {
	u.Set(settings.FieldUserCertYearsValid, v)
	return u
}

// UpdateUserCertYearsValid sets the "user_cert_years_valid" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateUserCertYearsValid() *SettingsUpsert {
	u.SetExcluded(settings.FieldUserCertYearsValid)
	return u
}

// AddUserCertYearsValid adds v to the "user_cert_years_valid" field.
func (u *SettingsUpsert) AddUserCertYearsValid(v int) *SettingsUpsert {
	u.Add(settings.FieldUserCertYearsValid, v)
	return u
}

// ClearUserCertYearsValid clears the value of the "user_cert_years_valid" field.
func (u *SettingsUpsert) ClearUserCertYearsValid() *SettingsUpsert {
	u.SetNull(settings.FieldUserCertYearsValid)
	return u
}

// SetNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field.
func (u *SettingsUpsert) SetNatsRequestTimeoutSeconds(v int) *SettingsUpsert {
	u.Set(settings.FieldNatsRequestTimeoutSeconds, v)
	return u
}

// UpdateNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateNatsRequestTimeoutSeconds() *SettingsUpsert {
	u.SetExcluded(settings.FieldNatsRequestTimeoutSeconds)
	return u
}

// AddNatsRequestTimeoutSeconds adds v to the "nats_request_timeout_seconds" field.
func (u *SettingsUpsert) AddNatsRequestTimeoutSeconds(v int) *SettingsUpsert {
	u.Add(settings.FieldNatsRequestTimeoutSeconds, v)
	return u
}

// ClearNatsRequestTimeoutSeconds clears the value of the "nats_request_timeout_seconds" field.
func (u *SettingsUpsert) ClearNatsRequestTimeoutSeconds() *SettingsUpsert {
	u.SetNull(settings.FieldNatsRequestTimeoutSeconds)
	return u
}

// SetRefreshTimeInMinutes sets the "refresh_time_in_minutes" field.
func (u *SettingsUpsert) SetRefreshTimeInMinutes(v int) *SettingsUpsert {
	u.Set(settings.FieldRefreshTimeInMinutes, v)
	return u
}

// UpdateRefreshTimeInMinutes sets the "refresh_time_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateRefreshTimeInMinutes() *SettingsUpsert {
	u.SetExcluded(settings.FieldRefreshTimeInMinutes)
	return u
}

// AddRefreshTimeInMinutes adds v to the "refresh_time_in_minutes" field.
func (u *SettingsUpsert) AddRefreshTimeInMinutes(v int) *SettingsUpsert {
	u.Add(settings.FieldRefreshTimeInMinutes, v)
	return u
}

// ClearRefreshTimeInMinutes clears the value of the "refresh_time_in_minutes" field.
func (u *SettingsUpsert) ClearRefreshTimeInMinutes() *SettingsUpsert {
	u.SetNull(settings.FieldRefreshTimeInMinutes)
	return u
}

// SetSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field.
func (u *SettingsUpsert) SetSessionLifetimeInMinutes(v int) *SettingsUpsert {
	u.Set(settings.FieldSessionLifetimeInMinutes, v)
	return u
}

// UpdateSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateSessionLifetimeInMinutes() *SettingsUpsert {
	u.SetExcluded(settings.FieldSessionLifetimeInMinutes)
	return u
}

// AddSessionLifetimeInMinutes adds v to the "session_lifetime_in_minutes" field.
func (u *SettingsUpsert) AddSessionLifetimeInMinutes(v int) *SettingsUpsert {
	u.Add(settings.FieldSessionLifetimeInMinutes, v)
	return u
}

// ClearSessionLifetimeInMinutes clears the value of the "session_lifetime_in_minutes" field.
func (u *SettingsUpsert) ClearSessionLifetimeInMinutes() *SettingsUpsert {
	u.SetNull(settings.FieldSessionLifetimeInMinutes)
	return u
}

// SetUpdateChannel sets the "update_channel" field.
func (u *SettingsUpsert) SetUpdateChannel(v string) *SettingsUpsert {
	u.Set(settings.FieldUpdateChannel, v)
	return u
}

// UpdateUpdateChannel sets the "update_channel" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateUpdateChannel() *SettingsUpsert {
	u.SetExcluded(settings.FieldUpdateChannel)
	return u
}

// ClearUpdateChannel clears the value of the "update_channel" field.
func (u *SettingsUpsert) ClearUpdateChannel() *SettingsUpsert {
	u.SetNull(settings.FieldUpdateChannel)
	return u
}

// SetCreated sets the "created" field.
func (u *SettingsUpsert) SetCreated(v time.Time) *SettingsUpsert {
	u.Set(settings.FieldCreated, v)
	return u
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateCreated() *SettingsUpsert {
	u.SetExcluded(settings.FieldCreated)
	return u
}

// ClearCreated clears the value of the "created" field.
func (u *SettingsUpsert) ClearCreated() *SettingsUpsert {
	u.SetNull(settings.FieldCreated)
	return u
}

// SetModified sets the "modified" field.
func (u *SettingsUpsert) SetModified(v time.Time) *SettingsUpsert {
	u.Set(settings.FieldModified, v)
	return u
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateModified() *SettingsUpsert {
	u.SetExcluded(settings.FieldModified)
	return u
}

// ClearModified clears the value of the "modified" field.
func (u *SettingsUpsert) ClearModified() *SettingsUpsert {
	u.SetNull(settings.FieldModified)
	return u
}

// SetAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsert) SetAgentReportFrequenceInMinutes(v int) *SettingsUpsert {
	u.Set(settings.FieldAgentReportFrequenceInMinutes, v)
	return u
}

// UpdateAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateAgentReportFrequenceInMinutes() *SettingsUpsert {
	u.SetExcluded(settings.FieldAgentReportFrequenceInMinutes)
	return u
}

// AddAgentReportFrequenceInMinutes adds v to the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsert) AddAgentReportFrequenceInMinutes(v int) *SettingsUpsert {
	u.Add(settings.FieldAgentReportFrequenceInMinutes, v)
	return u
}

// ClearAgentReportFrequenceInMinutes clears the value of the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsert) ClearAgentReportFrequenceInMinutes() *SettingsUpsert {
	u.SetNull(settings.FieldAgentReportFrequenceInMinutes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SettingsUpsertOne) UpdateNewValues() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SettingsUpsertOne) Ignore() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingsUpsertOne) DoNothing() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingsCreate.OnConflict
// documentation for more info.
func (u *SettingsUpsertOne) Update(set func(*SettingsUpsert)) *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetLanguage sets the "language" field.
func (u *SettingsUpsertOne) SetLanguage(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateLanguage() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateLanguage()
	})
}

// ClearLanguage clears the value of the "language" field.
func (u *SettingsUpsertOne) ClearLanguage() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearLanguage()
	})
}

// SetOrganization sets the "organization" field.
func (u *SettingsUpsertOne) SetOrganization(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateOrganization() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateOrganization()
	})
}

// ClearOrganization clears the value of the "organization" field.
func (u *SettingsUpsertOne) ClearOrganization() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearOrganization()
	})
}

// SetPostalAddress sets the "postal_address" field.
func (u *SettingsUpsertOne) SetPostalAddress(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetPostalAddress(v)
	})
}

// UpdatePostalAddress sets the "postal_address" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdatePostalAddress() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdatePostalAddress()
	})
}

// ClearPostalAddress clears the value of the "postal_address" field.
func (u *SettingsUpsertOne) ClearPostalAddress() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearPostalAddress()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *SettingsUpsertOne) SetPostalCode(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdatePostalCode() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *SettingsUpsertOne) ClearPostalCode() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearPostalCode()
	})
}

// SetLocality sets the "locality" field.
func (u *SettingsUpsertOne) SetLocality(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetLocality(v)
	})
}

// UpdateLocality sets the "locality" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateLocality() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateLocality()
	})
}

// ClearLocality clears the value of the "locality" field.
func (u *SettingsUpsertOne) ClearLocality() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearLocality()
	})
}

// SetProvince sets the "province" field.
func (u *SettingsUpsertOne) SetProvince(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateProvince() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *SettingsUpsertOne) ClearProvince() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearProvince()
	})
}

// SetState sets the "state" field.
func (u *SettingsUpsertOne) SetState(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateState() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *SettingsUpsertOne) ClearState() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearState()
	})
}

// SetCountry sets the "country" field.
func (u *SettingsUpsertOne) SetCountry(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateCountry() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *SettingsUpsertOne) ClearCountry() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearCountry()
	})
}

// SetSMTPServer sets the "smtp_server" field.
func (u *SettingsUpsertOne) SetSMTPServer(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPServer(v)
	})
}

// UpdateSMTPServer sets the "smtp_server" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPServer() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPServer()
	})
}

// ClearSMTPServer clears the value of the "smtp_server" field.
func (u *SettingsUpsertOne) ClearSMTPServer() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPServer()
	})
}

// SetSMTPPort sets the "smtp_port" field.
func (u *SettingsUpsertOne) SetSMTPPort(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPPort(v)
	})
}

// AddSMTPPort adds v to the "smtp_port" field.
func (u *SettingsUpsertOne) AddSMTPPort(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddSMTPPort(v)
	})
}

// UpdateSMTPPort sets the "smtp_port" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPPort() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPPort()
	})
}

// ClearSMTPPort clears the value of the "smtp_port" field.
func (u *SettingsUpsertOne) ClearSMTPPort() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPPort()
	})
}

// SetSMTPUser sets the "smtp_user" field.
func (u *SettingsUpsertOne) SetSMTPUser(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPUser(v)
	})
}

// UpdateSMTPUser sets the "smtp_user" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPUser() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPUser()
	})
}

// ClearSMTPUser clears the value of the "smtp_user" field.
func (u *SettingsUpsertOne) ClearSMTPUser() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPUser()
	})
}

// SetSMTPPassword sets the "smtp_password" field.
func (u *SettingsUpsertOne) SetSMTPPassword(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPPassword(v)
	})
}

// UpdateSMTPPassword sets the "smtp_password" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPPassword() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPPassword()
	})
}

// ClearSMTPPassword clears the value of the "smtp_password" field.
func (u *SettingsUpsertOne) ClearSMTPPassword() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPPassword()
	})
}

// SetSMTPAuth sets the "smtp_auth" field.
func (u *SettingsUpsertOne) SetSMTPAuth(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPAuth(v)
	})
}

// UpdateSMTPAuth sets the "smtp_auth" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPAuth() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPAuth()
	})
}

// ClearSMTPAuth clears the value of the "smtp_auth" field.
func (u *SettingsUpsertOne) ClearSMTPAuth() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPAuth()
	})
}

// SetSMTPTLS sets the "smtp_tls" field.
func (u *SettingsUpsertOne) SetSMTPTLS(v bool) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPTLS(v)
	})
}

// UpdateSMTPTLS sets the "smtp_tls" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPTLS() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPTLS()
	})
}

// ClearSMTPTLS clears the value of the "smtp_tls" field.
func (u *SettingsUpsertOne) ClearSMTPTLS() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPTLS()
	})
}

// SetSMTPStarttls sets the "smtp_starttls" field.
func (u *SettingsUpsertOne) SetSMTPStarttls(v bool) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPStarttls(v)
	})
}

// UpdateSMTPStarttls sets the "smtp_starttls" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSMTPStarttls() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPStarttls()
	})
}

// ClearSMTPStarttls clears the value of the "smtp_starttls" field.
func (u *SettingsUpsertOne) ClearSMTPStarttls() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPStarttls()
	})
}

// SetNatsServer sets the "nats_server" field.
func (u *SettingsUpsertOne) SetNatsServer(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsServer(v)
	})
}

// UpdateNatsServer sets the "nats_server" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateNatsServer() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsServer()
	})
}

// ClearNatsServer clears the value of the "nats_server" field.
func (u *SettingsUpsertOne) ClearNatsServer() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsServer()
	})
}

// SetNatsPort sets the "nats_port" field.
func (u *SettingsUpsertOne) SetNatsPort(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsPort(v)
	})
}

// UpdateNatsPort sets the "nats_port" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateNatsPort() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsPort()
	})
}

// ClearNatsPort clears the value of the "nats_port" field.
func (u *SettingsUpsertOne) ClearNatsPort() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsPort()
	})
}

// SetMessageFrom sets the "message_from" field.
func (u *SettingsUpsertOne) SetMessageFrom(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetMessageFrom(v)
	})
}

// UpdateMessageFrom sets the "message_from" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateMessageFrom() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateMessageFrom()
	})
}

// ClearMessageFrom clears the value of the "message_from" field.
func (u *SettingsUpsertOne) ClearMessageFrom() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearMessageFrom()
	})
}

// SetMaxUploadSize sets the "max_upload_size" field.
func (u *SettingsUpsertOne) SetMaxUploadSize(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetMaxUploadSize(v)
	})
}

// UpdateMaxUploadSize sets the "max_upload_size" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateMaxUploadSize() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateMaxUploadSize()
	})
}

// ClearMaxUploadSize clears the value of the "max_upload_size" field.
func (u *SettingsUpsertOne) ClearMaxUploadSize() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearMaxUploadSize()
	})
}

// SetUserCertYearsValid sets the "user_cert_years_valid" field.
func (u *SettingsUpsertOne) SetUserCertYearsValid(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUserCertYearsValid(v)
	})
}

// AddUserCertYearsValid adds v to the "user_cert_years_valid" field.
func (u *SettingsUpsertOne) AddUserCertYearsValid(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddUserCertYearsValid(v)
	})
}

// UpdateUserCertYearsValid sets the "user_cert_years_valid" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateUserCertYearsValid() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUserCertYearsValid()
	})
}

// ClearUserCertYearsValid clears the value of the "user_cert_years_valid" field.
func (u *SettingsUpsertOne) ClearUserCertYearsValid() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearUserCertYearsValid()
	})
}

// SetNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertOne) SetNatsRequestTimeoutSeconds(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsRequestTimeoutSeconds(v)
	})
}

// AddNatsRequestTimeoutSeconds adds v to the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertOne) AddNatsRequestTimeoutSeconds(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddNatsRequestTimeoutSeconds(v)
	})
}

// UpdateNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateNatsRequestTimeoutSeconds() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsRequestTimeoutSeconds()
	})
}

// ClearNatsRequestTimeoutSeconds clears the value of the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertOne) ClearNatsRequestTimeoutSeconds() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsRequestTimeoutSeconds()
	})
}

// SetRefreshTimeInMinutes sets the "refresh_time_in_minutes" field.
func (u *SettingsUpsertOne) SetRefreshTimeInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetRefreshTimeInMinutes(v)
	})
}

// AddRefreshTimeInMinutes adds v to the "refresh_time_in_minutes" field.
func (u *SettingsUpsertOne) AddRefreshTimeInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddRefreshTimeInMinutes(v)
	})
}

// UpdateRefreshTimeInMinutes sets the "refresh_time_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateRefreshTimeInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateRefreshTimeInMinutes()
	})
}

// ClearRefreshTimeInMinutes clears the value of the "refresh_time_in_minutes" field.
func (u *SettingsUpsertOne) ClearRefreshTimeInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearRefreshTimeInMinutes()
	})
}

// SetSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertOne) SetSessionLifetimeInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSessionLifetimeInMinutes(v)
	})
}

// AddSessionLifetimeInMinutes adds v to the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertOne) AddSessionLifetimeInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddSessionLifetimeInMinutes(v)
	})
}

// UpdateSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateSessionLifetimeInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSessionLifetimeInMinutes()
	})
}

// ClearSessionLifetimeInMinutes clears the value of the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertOne) ClearSessionLifetimeInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSessionLifetimeInMinutes()
	})
}

// SetUpdateChannel sets the "update_channel" field.
func (u *SettingsUpsertOne) SetUpdateChannel(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUpdateChannel(v)
	})
}

// UpdateUpdateChannel sets the "update_channel" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateUpdateChannel() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUpdateChannel()
	})
}

// ClearUpdateChannel clears the value of the "update_channel" field.
func (u *SettingsUpsertOne) ClearUpdateChannel() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearUpdateChannel()
	})
}

// SetCreated sets the "created" field.
func (u *SettingsUpsertOne) SetCreated(v time.Time) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateCreated() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *SettingsUpsertOne) ClearCreated() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearCreated()
	})
}

// SetModified sets the "modified" field.
func (u *SettingsUpsertOne) SetModified(v time.Time) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetModified(v)
	})
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateModified() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateModified()
	})
}

// ClearModified clears the value of the "modified" field.
func (u *SettingsUpsertOne) ClearModified() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearModified()
	})
}

// SetAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertOne) SetAgentReportFrequenceInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetAgentReportFrequenceInMinutes(v)
	})
}

// AddAgentReportFrequenceInMinutes adds v to the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertOne) AddAgentReportFrequenceInMinutes(v int) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.AddAgentReportFrequenceInMinutes(v)
	})
}

// UpdateAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateAgentReportFrequenceInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateAgentReportFrequenceInMinutes()
	})
}

// ClearAgentReportFrequenceInMinutes clears the value of the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertOne) ClearAgentReportFrequenceInMinutes() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearAgentReportFrequenceInMinutes()
	})
}

// Exec executes the query.
func (u *SettingsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for SettingsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SettingsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SettingsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	err      error
	builders []*SettingsCreate
	conflict []sql.ConflictOption
}

// Save creates the Settings entities in the database.
func (scb *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settings, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Settings.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingsUpsert) {
//			SetLanguage(v+v).
//		}).
//		Exec(ctx)
func (scb *SettingsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SettingsUpsertBulk {
	scb.conflict = opts
	return &SettingsUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SettingsCreateBulk) OnConflictColumns(columns ...string) *SettingsUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SettingsUpsertBulk{
		create: scb,
	}
}

// SettingsUpsertBulk is the builder for "upsert"-ing
// a bulk of Settings nodes.
type SettingsUpsertBulk struct {
	create *SettingsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SettingsUpsertBulk) UpdateNewValues() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SettingsUpsertBulk) Ignore() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingsUpsertBulk) DoNothing() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingsCreateBulk.OnConflict
// documentation for more info.
func (u *SettingsUpsertBulk) Update(set func(*SettingsUpsert)) *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetLanguage sets the "language" field.
func (u *SettingsUpsertBulk) SetLanguage(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateLanguage() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateLanguage()
	})
}

// ClearLanguage clears the value of the "language" field.
func (u *SettingsUpsertBulk) ClearLanguage() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearLanguage()
	})
}

// SetOrganization sets the "organization" field.
func (u *SettingsUpsertBulk) SetOrganization(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetOrganization(v)
	})
}

// UpdateOrganization sets the "organization" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateOrganization() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateOrganization()
	})
}

// ClearOrganization clears the value of the "organization" field.
func (u *SettingsUpsertBulk) ClearOrganization() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearOrganization()
	})
}

// SetPostalAddress sets the "postal_address" field.
func (u *SettingsUpsertBulk) SetPostalAddress(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetPostalAddress(v)
	})
}

// UpdatePostalAddress sets the "postal_address" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdatePostalAddress() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdatePostalAddress()
	})
}

// ClearPostalAddress clears the value of the "postal_address" field.
func (u *SettingsUpsertBulk) ClearPostalAddress() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearPostalAddress()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *SettingsUpsertBulk) SetPostalCode(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdatePostalCode() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *SettingsUpsertBulk) ClearPostalCode() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearPostalCode()
	})
}

// SetLocality sets the "locality" field.
func (u *SettingsUpsertBulk) SetLocality(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetLocality(v)
	})
}

// UpdateLocality sets the "locality" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateLocality() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateLocality()
	})
}

// ClearLocality clears the value of the "locality" field.
func (u *SettingsUpsertBulk) ClearLocality() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearLocality()
	})
}

// SetProvince sets the "province" field.
func (u *SettingsUpsertBulk) SetProvince(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateProvince() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *SettingsUpsertBulk) ClearProvince() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearProvince()
	})
}

// SetState sets the "state" field.
func (u *SettingsUpsertBulk) SetState(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateState() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *SettingsUpsertBulk) ClearState() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearState()
	})
}

// SetCountry sets the "country" field.
func (u *SettingsUpsertBulk) SetCountry(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateCountry() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *SettingsUpsertBulk) ClearCountry() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearCountry()
	})
}

// SetSMTPServer sets the "smtp_server" field.
func (u *SettingsUpsertBulk) SetSMTPServer(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPServer(v)
	})
}

// UpdateSMTPServer sets the "smtp_server" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPServer() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPServer()
	})
}

// ClearSMTPServer clears the value of the "smtp_server" field.
func (u *SettingsUpsertBulk) ClearSMTPServer() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPServer()
	})
}

// SetSMTPPort sets the "smtp_port" field.
func (u *SettingsUpsertBulk) SetSMTPPort(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPPort(v)
	})
}

// AddSMTPPort adds v to the "smtp_port" field.
func (u *SettingsUpsertBulk) AddSMTPPort(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddSMTPPort(v)
	})
}

// UpdateSMTPPort sets the "smtp_port" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPPort() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPPort()
	})
}

// ClearSMTPPort clears the value of the "smtp_port" field.
func (u *SettingsUpsertBulk) ClearSMTPPort() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPPort()
	})
}

// SetSMTPUser sets the "smtp_user" field.
func (u *SettingsUpsertBulk) SetSMTPUser(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPUser(v)
	})
}

// UpdateSMTPUser sets the "smtp_user" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPUser() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPUser()
	})
}

// ClearSMTPUser clears the value of the "smtp_user" field.
func (u *SettingsUpsertBulk) ClearSMTPUser() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPUser()
	})
}

// SetSMTPPassword sets the "smtp_password" field.
func (u *SettingsUpsertBulk) SetSMTPPassword(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPPassword(v)
	})
}

// UpdateSMTPPassword sets the "smtp_password" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPPassword() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPPassword()
	})
}

// ClearSMTPPassword clears the value of the "smtp_password" field.
func (u *SettingsUpsertBulk) ClearSMTPPassword() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPPassword()
	})
}

// SetSMTPAuth sets the "smtp_auth" field.
func (u *SettingsUpsertBulk) SetSMTPAuth(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPAuth(v)
	})
}

// UpdateSMTPAuth sets the "smtp_auth" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPAuth() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPAuth()
	})
}

// ClearSMTPAuth clears the value of the "smtp_auth" field.
func (u *SettingsUpsertBulk) ClearSMTPAuth() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPAuth()
	})
}

// SetSMTPTLS sets the "smtp_tls" field.
func (u *SettingsUpsertBulk) SetSMTPTLS(v bool) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPTLS(v)
	})
}

// UpdateSMTPTLS sets the "smtp_tls" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPTLS() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPTLS()
	})
}

// ClearSMTPTLS clears the value of the "smtp_tls" field.
func (u *SettingsUpsertBulk) ClearSMTPTLS() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPTLS()
	})
}

// SetSMTPStarttls sets the "smtp_starttls" field.
func (u *SettingsUpsertBulk) SetSMTPStarttls(v bool) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSMTPStarttls(v)
	})
}

// UpdateSMTPStarttls sets the "smtp_starttls" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSMTPStarttls() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSMTPStarttls()
	})
}

// ClearSMTPStarttls clears the value of the "smtp_starttls" field.
func (u *SettingsUpsertBulk) ClearSMTPStarttls() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSMTPStarttls()
	})
}

// SetNatsServer sets the "nats_server" field.
func (u *SettingsUpsertBulk) SetNatsServer(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsServer(v)
	})
}

// UpdateNatsServer sets the "nats_server" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateNatsServer() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsServer()
	})
}

// ClearNatsServer clears the value of the "nats_server" field.
func (u *SettingsUpsertBulk) ClearNatsServer() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsServer()
	})
}

// SetNatsPort sets the "nats_port" field.
func (u *SettingsUpsertBulk) SetNatsPort(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsPort(v)
	})
}

// UpdateNatsPort sets the "nats_port" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateNatsPort() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsPort()
	})
}

// ClearNatsPort clears the value of the "nats_port" field.
func (u *SettingsUpsertBulk) ClearNatsPort() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsPort()
	})
}

// SetMessageFrom sets the "message_from" field.
func (u *SettingsUpsertBulk) SetMessageFrom(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetMessageFrom(v)
	})
}

// UpdateMessageFrom sets the "message_from" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateMessageFrom() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateMessageFrom()
	})
}

// ClearMessageFrom clears the value of the "message_from" field.
func (u *SettingsUpsertBulk) ClearMessageFrom() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearMessageFrom()
	})
}

// SetMaxUploadSize sets the "max_upload_size" field.
func (u *SettingsUpsertBulk) SetMaxUploadSize(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetMaxUploadSize(v)
	})
}

// UpdateMaxUploadSize sets the "max_upload_size" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateMaxUploadSize() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateMaxUploadSize()
	})
}

// ClearMaxUploadSize clears the value of the "max_upload_size" field.
func (u *SettingsUpsertBulk) ClearMaxUploadSize() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearMaxUploadSize()
	})
}

// SetUserCertYearsValid sets the "user_cert_years_valid" field.
func (u *SettingsUpsertBulk) SetUserCertYearsValid(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUserCertYearsValid(v)
	})
}

// AddUserCertYearsValid adds v to the "user_cert_years_valid" field.
func (u *SettingsUpsertBulk) AddUserCertYearsValid(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddUserCertYearsValid(v)
	})
}

// UpdateUserCertYearsValid sets the "user_cert_years_valid" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateUserCertYearsValid() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUserCertYearsValid()
	})
}

// ClearUserCertYearsValid clears the value of the "user_cert_years_valid" field.
func (u *SettingsUpsertBulk) ClearUserCertYearsValid() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearUserCertYearsValid()
	})
}

// SetNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertBulk) SetNatsRequestTimeoutSeconds(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetNatsRequestTimeoutSeconds(v)
	})
}

// AddNatsRequestTimeoutSeconds adds v to the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertBulk) AddNatsRequestTimeoutSeconds(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddNatsRequestTimeoutSeconds(v)
	})
}

// UpdateNatsRequestTimeoutSeconds sets the "nats_request_timeout_seconds" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateNatsRequestTimeoutSeconds() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateNatsRequestTimeoutSeconds()
	})
}

// ClearNatsRequestTimeoutSeconds clears the value of the "nats_request_timeout_seconds" field.
func (u *SettingsUpsertBulk) ClearNatsRequestTimeoutSeconds() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearNatsRequestTimeoutSeconds()
	})
}

// SetRefreshTimeInMinutes sets the "refresh_time_in_minutes" field.
func (u *SettingsUpsertBulk) SetRefreshTimeInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetRefreshTimeInMinutes(v)
	})
}

// AddRefreshTimeInMinutes adds v to the "refresh_time_in_minutes" field.
func (u *SettingsUpsertBulk) AddRefreshTimeInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddRefreshTimeInMinutes(v)
	})
}

// UpdateRefreshTimeInMinutes sets the "refresh_time_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateRefreshTimeInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateRefreshTimeInMinutes()
	})
}

// ClearRefreshTimeInMinutes clears the value of the "refresh_time_in_minutes" field.
func (u *SettingsUpsertBulk) ClearRefreshTimeInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearRefreshTimeInMinutes()
	})
}

// SetSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertBulk) SetSessionLifetimeInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetSessionLifetimeInMinutes(v)
	})
}

// AddSessionLifetimeInMinutes adds v to the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertBulk) AddSessionLifetimeInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddSessionLifetimeInMinutes(v)
	})
}

// UpdateSessionLifetimeInMinutes sets the "session_lifetime_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateSessionLifetimeInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateSessionLifetimeInMinutes()
	})
}

// ClearSessionLifetimeInMinutes clears the value of the "session_lifetime_in_minutes" field.
func (u *SettingsUpsertBulk) ClearSessionLifetimeInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearSessionLifetimeInMinutes()
	})
}

// SetUpdateChannel sets the "update_channel" field.
func (u *SettingsUpsertBulk) SetUpdateChannel(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUpdateChannel(v)
	})
}

// UpdateUpdateChannel sets the "update_channel" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateUpdateChannel() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUpdateChannel()
	})
}

// ClearUpdateChannel clears the value of the "update_channel" field.
func (u *SettingsUpsertBulk) ClearUpdateChannel() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearUpdateChannel()
	})
}

// SetCreated sets the "created" field.
func (u *SettingsUpsertBulk) SetCreated(v time.Time) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateCreated() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *SettingsUpsertBulk) ClearCreated() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearCreated()
	})
}

// SetModified sets the "modified" field.
func (u *SettingsUpsertBulk) SetModified(v time.Time) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetModified(v)
	})
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateModified() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateModified()
	})
}

// ClearModified clears the value of the "modified" field.
func (u *SettingsUpsertBulk) ClearModified() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearModified()
	})
}

// SetAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertBulk) SetAgentReportFrequenceInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetAgentReportFrequenceInMinutes(v)
	})
}

// AddAgentReportFrequenceInMinutes adds v to the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertBulk) AddAgentReportFrequenceInMinutes(v int) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.AddAgentReportFrequenceInMinutes(v)
	})
}

// UpdateAgentReportFrequenceInMinutes sets the "agent_report_frequence_in_minutes" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateAgentReportFrequenceInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateAgentReportFrequenceInMinutes()
	})
}

// ClearAgentReportFrequenceInMinutes clears the value of the "agent_report_frequence_in_minutes" field.
func (u *SettingsUpsertBulk) ClearAgentReportFrequenceInMinutes() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearAgentReportFrequenceInMinutes()
	})
}

// Exec executes the query.
func (u *SettingsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the SettingsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for SettingsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
