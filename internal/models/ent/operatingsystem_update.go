// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/operatingsystem"
	"github.com/doncicuto/openuem_ent/predicate"
)

// OperatingSystemUpdate is the builder for updating OperatingSystem entities.
type OperatingSystemUpdate struct {
	config
	hooks     []Hook
	mutation  *OperatingSystemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OperatingSystemUpdate builder.
func (osu *OperatingSystemUpdate) Where(ps ...predicate.OperatingSystem) *OperatingSystemUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetType sets the "type" field.
func (osu *OperatingSystemUpdate) SetType(s string) *OperatingSystemUpdate {
	osu.mutation.SetType(s)
	return osu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableType(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetType(*s)
	}
	return osu
}

// ClearType clears the value of the "type" field.
func (osu *OperatingSystemUpdate) ClearType() *OperatingSystemUpdate {
	osu.mutation.ClearType()
	return osu
}

// SetVersion sets the "version" field.
func (osu *OperatingSystemUpdate) SetVersion(s string) *OperatingSystemUpdate {
	osu.mutation.SetVersion(s)
	return osu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableVersion(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetVersion(*s)
	}
	return osu
}

// SetDescription sets the "description" field.
func (osu *OperatingSystemUpdate) SetDescription(s string) *OperatingSystemUpdate {
	osu.mutation.SetDescription(s)
	return osu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableDescription(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetDescription(*s)
	}
	return osu
}

// SetEdition sets the "edition" field.
func (osu *OperatingSystemUpdate) SetEdition(s string) *OperatingSystemUpdate {
	osu.mutation.SetEdition(s)
	return osu
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableEdition(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetEdition(*s)
	}
	return osu
}

// ClearEdition clears the value of the "edition" field.
func (osu *OperatingSystemUpdate) ClearEdition() *OperatingSystemUpdate {
	osu.mutation.ClearEdition()
	return osu
}

// SetInstallDate sets the "install_date" field.
func (osu *OperatingSystemUpdate) SetInstallDate(t time.Time) *OperatingSystemUpdate {
	osu.mutation.SetInstallDate(t)
	return osu
}

// SetNillableInstallDate sets the "install_date" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableInstallDate(t *time.Time) *OperatingSystemUpdate {
	if t != nil {
		osu.SetInstallDate(*t)
	}
	return osu
}

// ClearInstallDate clears the value of the "install_date" field.
func (osu *OperatingSystemUpdate) ClearInstallDate() *OperatingSystemUpdate {
	osu.mutation.ClearInstallDate()
	return osu
}

// SetArch sets the "arch" field.
func (osu *OperatingSystemUpdate) SetArch(s string) *OperatingSystemUpdate {
	osu.mutation.SetArch(s)
	return osu
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableArch(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetArch(*s)
	}
	return osu
}

// ClearArch clears the value of the "arch" field.
func (osu *OperatingSystemUpdate) ClearArch() *OperatingSystemUpdate {
	osu.mutation.ClearArch()
	return osu
}

// SetUsername sets the "username" field.
func (osu *OperatingSystemUpdate) SetUsername(s string) *OperatingSystemUpdate {
	osu.mutation.SetUsername(s)
	return osu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableUsername(s *string) *OperatingSystemUpdate {
	if s != nil {
		osu.SetUsername(*s)
	}
	return osu
}

// SetLastBootupTime sets the "last_bootup_time" field.
func (osu *OperatingSystemUpdate) SetLastBootupTime(t time.Time) *OperatingSystemUpdate {
	osu.mutation.SetLastBootupTime(t)
	return osu
}

// SetNillableLastBootupTime sets the "last_bootup_time" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableLastBootupTime(t *time.Time) *OperatingSystemUpdate {
	if t != nil {
		osu.SetLastBootupTime(*t)
	}
	return osu
}

// ClearLastBootupTime clears the value of the "last_bootup_time" field.
func (osu *OperatingSystemUpdate) ClearLastBootupTime() *OperatingSystemUpdate {
	osu.mutation.ClearLastBootupTime()
	return osu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (osu *OperatingSystemUpdate) SetOwnerID(id string) *OperatingSystemUpdate {
	osu.mutation.SetOwnerID(id)
	return osu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (osu *OperatingSystemUpdate) SetOwner(a *Agent) *OperatingSystemUpdate {
	return osu.SetOwnerID(a.ID)
}

// Mutation returns the OperatingSystemMutation object of the builder.
func (osu *OperatingSystemUpdate) Mutation() *OperatingSystemMutation {
	return osu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (osu *OperatingSystemUpdate) ClearOwner() *OperatingSystemUpdate {
	osu.mutation.ClearOwner()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OperatingSystemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OperatingSystemUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OperatingSystemUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OperatingSystemUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OperatingSystemUpdate) check() error {
	if osu.mutation.OwnerCleared() && len(osu.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "OperatingSystem.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OperatingSystemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperatingSystemUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OperatingSystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operatingsystem.Table, operatingsystem.Columns, sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.GetType(); ok {
		_spec.SetField(operatingsystem.FieldType, field.TypeString, value)
	}
	if osu.mutation.TypeCleared() {
		_spec.ClearField(operatingsystem.FieldType, field.TypeString)
	}
	if value, ok := osu.mutation.Version(); ok {
		_spec.SetField(operatingsystem.FieldVersion, field.TypeString, value)
	}
	if value, ok := osu.mutation.Description(); ok {
		_spec.SetField(operatingsystem.FieldDescription, field.TypeString, value)
	}
	if value, ok := osu.mutation.Edition(); ok {
		_spec.SetField(operatingsystem.FieldEdition, field.TypeString, value)
	}
	if osu.mutation.EditionCleared() {
		_spec.ClearField(operatingsystem.FieldEdition, field.TypeString)
	}
	if value, ok := osu.mutation.InstallDate(); ok {
		_spec.SetField(operatingsystem.FieldInstallDate, field.TypeTime, value)
	}
	if osu.mutation.InstallDateCleared() {
		_spec.ClearField(operatingsystem.FieldInstallDate, field.TypeTime)
	}
	if value, ok := osu.mutation.Arch(); ok {
		_spec.SetField(operatingsystem.FieldArch, field.TypeString, value)
	}
	if osu.mutation.ArchCleared() {
		_spec.ClearField(operatingsystem.FieldArch, field.TypeString)
	}
	if value, ok := osu.mutation.Username(); ok {
		_spec.SetField(operatingsystem.FieldUsername, field.TypeString, value)
	}
	if value, ok := osu.mutation.LastBootupTime(); ok {
		_spec.SetField(operatingsystem.FieldLastBootupTime, field.TypeTime, value)
	}
	if osu.mutation.LastBootupTimeCleared() {
		_spec.ClearField(operatingsystem.FieldLastBootupTime, field.TypeTime)
	}
	if osu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   operatingsystem.OwnerTable,
			Columns: []string{operatingsystem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   operatingsystem.OwnerTable,
			Columns: []string{operatingsystem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OperatingSystemUpdateOne is the builder for updating a single OperatingSystem entity.
type OperatingSystemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OperatingSystemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (osuo *OperatingSystemUpdateOne) SetType(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetType(s)
	return osuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableType(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetType(*s)
	}
	return osuo
}

// ClearType clears the value of the "type" field.
func (osuo *OperatingSystemUpdateOne) ClearType() *OperatingSystemUpdateOne {
	osuo.mutation.ClearType()
	return osuo
}

// SetVersion sets the "version" field.
func (osuo *OperatingSystemUpdateOne) SetVersion(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetVersion(s)
	return osuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableVersion(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetVersion(*s)
	}
	return osuo
}

// SetDescription sets the "description" field.
func (osuo *OperatingSystemUpdateOne) SetDescription(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetDescription(s)
	return osuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableDescription(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetDescription(*s)
	}
	return osuo
}

// SetEdition sets the "edition" field.
func (osuo *OperatingSystemUpdateOne) SetEdition(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetEdition(s)
	return osuo
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableEdition(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetEdition(*s)
	}
	return osuo
}

// ClearEdition clears the value of the "edition" field.
func (osuo *OperatingSystemUpdateOne) ClearEdition() *OperatingSystemUpdateOne {
	osuo.mutation.ClearEdition()
	return osuo
}

// SetInstallDate sets the "install_date" field.
func (osuo *OperatingSystemUpdateOne) SetInstallDate(t time.Time) *OperatingSystemUpdateOne {
	osuo.mutation.SetInstallDate(t)
	return osuo
}

// SetNillableInstallDate sets the "install_date" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableInstallDate(t *time.Time) *OperatingSystemUpdateOne {
	if t != nil {
		osuo.SetInstallDate(*t)
	}
	return osuo
}

// ClearInstallDate clears the value of the "install_date" field.
func (osuo *OperatingSystemUpdateOne) ClearInstallDate() *OperatingSystemUpdateOne {
	osuo.mutation.ClearInstallDate()
	return osuo
}

// SetArch sets the "arch" field.
func (osuo *OperatingSystemUpdateOne) SetArch(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetArch(s)
	return osuo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableArch(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetArch(*s)
	}
	return osuo
}

// ClearArch clears the value of the "arch" field.
func (osuo *OperatingSystemUpdateOne) ClearArch() *OperatingSystemUpdateOne {
	osuo.mutation.ClearArch()
	return osuo
}

// SetUsername sets the "username" field.
func (osuo *OperatingSystemUpdateOne) SetUsername(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetUsername(s)
	return osuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableUsername(s *string) *OperatingSystemUpdateOne {
	if s != nil {
		osuo.SetUsername(*s)
	}
	return osuo
}

// SetLastBootupTime sets the "last_bootup_time" field.
func (osuo *OperatingSystemUpdateOne) SetLastBootupTime(t time.Time) *OperatingSystemUpdateOne {
	osuo.mutation.SetLastBootupTime(t)
	return osuo
}

// SetNillableLastBootupTime sets the "last_bootup_time" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableLastBootupTime(t *time.Time) *OperatingSystemUpdateOne {
	if t != nil {
		osuo.SetLastBootupTime(*t)
	}
	return osuo
}

// ClearLastBootupTime clears the value of the "last_bootup_time" field.
func (osuo *OperatingSystemUpdateOne) ClearLastBootupTime() *OperatingSystemUpdateOne {
	osuo.mutation.ClearLastBootupTime()
	return osuo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (osuo *OperatingSystemUpdateOne) SetOwnerID(id string) *OperatingSystemUpdateOne {
	osuo.mutation.SetOwnerID(id)
	return osuo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (osuo *OperatingSystemUpdateOne) SetOwner(a *Agent) *OperatingSystemUpdateOne {
	return osuo.SetOwnerID(a.ID)
}

// Mutation returns the OperatingSystemMutation object of the builder.
func (osuo *OperatingSystemUpdateOne) Mutation() *OperatingSystemMutation {
	return osuo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (osuo *OperatingSystemUpdateOne) ClearOwner() *OperatingSystemUpdateOne {
	osuo.mutation.ClearOwner()
	return osuo
}

// Where appends a list predicates to the OperatingSystemUpdate builder.
func (osuo *OperatingSystemUpdateOne) Where(ps ...predicate.OperatingSystem) *OperatingSystemUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OperatingSystemUpdateOne) Select(field string, fields ...string) *OperatingSystemUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OperatingSystem entity.
func (osuo *OperatingSystemUpdateOne) Save(ctx context.Context) (*OperatingSystem, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OperatingSystemUpdateOne) SaveX(ctx context.Context) *OperatingSystem {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OperatingSystemUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OperatingSystemUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OperatingSystemUpdateOne) check() error {
	if osuo.mutation.OwnerCleared() && len(osuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "OperatingSystem.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OperatingSystemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperatingSystemUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OperatingSystemUpdateOne) sqlSave(ctx context.Context) (_node *OperatingSystem, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operatingsystem.Table, operatingsystem.Columns, sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "OperatingSystem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operatingsystem.FieldID)
		for _, f := range fields {
			if !operatingsystem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != operatingsystem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.GetType(); ok {
		_spec.SetField(operatingsystem.FieldType, field.TypeString, value)
	}
	if osuo.mutation.TypeCleared() {
		_spec.ClearField(operatingsystem.FieldType, field.TypeString)
	}
	if value, ok := osuo.mutation.Version(); ok {
		_spec.SetField(operatingsystem.FieldVersion, field.TypeString, value)
	}
	if value, ok := osuo.mutation.Description(); ok {
		_spec.SetField(operatingsystem.FieldDescription, field.TypeString, value)
	}
	if value, ok := osuo.mutation.Edition(); ok {
		_spec.SetField(operatingsystem.FieldEdition, field.TypeString, value)
	}
	if osuo.mutation.EditionCleared() {
		_spec.ClearField(operatingsystem.FieldEdition, field.TypeString)
	}
	if value, ok := osuo.mutation.InstallDate(); ok {
		_spec.SetField(operatingsystem.FieldInstallDate, field.TypeTime, value)
	}
	if osuo.mutation.InstallDateCleared() {
		_spec.ClearField(operatingsystem.FieldInstallDate, field.TypeTime)
	}
	if value, ok := osuo.mutation.Arch(); ok {
		_spec.SetField(operatingsystem.FieldArch, field.TypeString, value)
	}
	if osuo.mutation.ArchCleared() {
		_spec.ClearField(operatingsystem.FieldArch, field.TypeString)
	}
	if value, ok := osuo.mutation.Username(); ok {
		_spec.SetField(operatingsystem.FieldUsername, field.TypeString, value)
	}
	if value, ok := osuo.mutation.LastBootupTime(); ok {
		_spec.SetField(operatingsystem.FieldLastBootupTime, field.TypeTime, value)
	}
	if osuo.mutation.LastBootupTimeCleared() {
		_spec.ClearField(operatingsystem.FieldLastBootupTime, field.TypeTime)
	}
	if osuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   operatingsystem.OwnerTable,
			Columns: []string{operatingsystem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   operatingsystem.OwnerTable,
			Columns: []string{operatingsystem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OperatingSystem{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
