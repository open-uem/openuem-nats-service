// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/monitor"
)

// MonitorCreate is the builder for creating a Monitor entity.
type MonitorCreate struct {
	config
	mutation *MonitorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetManufacturer sets the "manufacturer" field.
func (mc *MonitorCreate) SetManufacturer(s string) *MonitorCreate {
	mc.mutation.SetManufacturer(s)
	return mc
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableManufacturer(s *string) *MonitorCreate {
	if s != nil {
		mc.SetManufacturer(*s)
	}
	return mc
}

// SetModel sets the "model" field.
func (mc *MonitorCreate) SetModel(s string) *MonitorCreate {
	mc.mutation.SetModel(s)
	return mc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableModel(s *string) *MonitorCreate {
	if s != nil {
		mc.SetModel(*s)
	}
	return mc
}

// SetSerial sets the "serial" field.
func (mc *MonitorCreate) SetSerial(s string) *MonitorCreate {
	mc.mutation.SetSerial(s)
	return mc
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (mc *MonitorCreate) SetNillableSerial(s *string) *MonitorCreate {
	if s != nil {
		mc.SetSerial(*s)
	}
	return mc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (mc *MonitorCreate) SetOwnerID(id string) *MonitorCreate {
	mc.mutation.SetOwnerID(id)
	return mc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (mc *MonitorCreate) SetOwner(a *Agent) *MonitorCreate {
	return mc.SetOwnerID(a.ID)
}

// Mutation returns the MonitorMutation object of the builder.
func (mc *MonitorCreate) Mutation() *MonitorMutation {
	return mc.mutation
}

// Save creates the Monitor in the database.
func (mc *MonitorCreate) Save(ctx context.Context) (*Monitor, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MonitorCreate) SaveX(ctx context.Context) *Monitor {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MonitorCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MonitorCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MonitorCreate) check() error {
	if len(mc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`openuem_ent: missing required edge "Monitor.owner"`)}
	}
	return nil
}

func (mc *MonitorCreate) sqlSave(ctx context.Context) (*Monitor, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MonitorCreate) createSpec() (*Monitor, *sqlgraph.CreateSpec) {
	var (
		_node = &Monitor{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(monitor.Table, sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Manufacturer(); ok {
		_spec.SetField(monitor.FieldManufacturer, field.TypeString, value)
		_node.Manufacturer = value
	}
	if value, ok := mc.mutation.Model(); ok {
		_spec.SetField(monitor.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := mc.mutation.Serial(); ok {
		_spec.SetField(monitor.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if nodes := mc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   monitor.OwnerTable,
			Columns: []string{monitor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_monitors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Monitor.Create().
//		SetManufacturer(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MonitorUpsert) {
//			SetManufacturer(v+v).
//		}).
//		Exec(ctx)
func (mc *MonitorCreate) OnConflict(opts ...sql.ConflictOption) *MonitorUpsertOne {
	mc.conflict = opts
	return &MonitorUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Monitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MonitorCreate) OnConflictColumns(columns ...string) *MonitorUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MonitorUpsertOne{
		create: mc,
	}
}

type (
	// MonitorUpsertOne is the builder for "upsert"-ing
	//  one Monitor node.
	MonitorUpsertOne struct {
		create *MonitorCreate
	}

	// MonitorUpsert is the "OnConflict" setter.
	MonitorUpsert struct {
		*sql.UpdateSet
	}
)

// SetManufacturer sets the "manufacturer" field.
func (u *MonitorUpsert) SetManufacturer(v string) *MonitorUpsert {
	u.Set(monitor.FieldManufacturer, v)
	return u
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *MonitorUpsert) UpdateManufacturer() *MonitorUpsert {
	u.SetExcluded(monitor.FieldManufacturer)
	return u
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (u *MonitorUpsert) ClearManufacturer() *MonitorUpsert {
	u.SetNull(monitor.FieldManufacturer)
	return u
}

// SetModel sets the "model" field.
func (u *MonitorUpsert) SetModel(v string) *MonitorUpsert {
	u.Set(monitor.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *MonitorUpsert) UpdateModel() *MonitorUpsert {
	u.SetExcluded(monitor.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *MonitorUpsert) ClearModel() *MonitorUpsert {
	u.SetNull(monitor.FieldModel)
	return u
}

// SetSerial sets the "serial" field.
func (u *MonitorUpsert) SetSerial(v string) *MonitorUpsert {
	u.Set(monitor.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *MonitorUpsert) UpdateSerial() *MonitorUpsert {
	u.SetExcluded(monitor.FieldSerial)
	return u
}

// ClearSerial clears the value of the "serial" field.
func (u *MonitorUpsert) ClearSerial() *MonitorUpsert {
	u.SetNull(monitor.FieldSerial)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Monitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MonitorUpsertOne) UpdateNewValues() *MonitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Monitor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MonitorUpsertOne) Ignore() *MonitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MonitorUpsertOne) DoNothing() *MonitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MonitorCreate.OnConflict
// documentation for more info.
func (u *MonitorUpsertOne) Update(set func(*MonitorUpsert)) *MonitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MonitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetManufacturer sets the "manufacturer" field.
func (u *MonitorUpsertOne) SetManufacturer(v string) *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.SetManufacturer(v)
	})
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *MonitorUpsertOne) UpdateManufacturer() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateManufacturer()
	})
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (u *MonitorUpsertOne) ClearManufacturer() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearManufacturer()
	})
}

// SetModel sets the "model" field.
func (u *MonitorUpsertOne) SetModel(v string) *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *MonitorUpsertOne) UpdateModel() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *MonitorUpsertOne) ClearModel() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearModel()
	})
}

// SetSerial sets the "serial" field.
func (u *MonitorUpsertOne) SetSerial(v string) *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *MonitorUpsertOne) UpdateSerial() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateSerial()
	})
}

// ClearSerial clears the value of the "serial" field.
func (u *MonitorUpsertOne) ClearSerial() *MonitorUpsertOne {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearSerial()
	})
}

// Exec executes the query.
func (u *MonitorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for MonitorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MonitorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MonitorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MonitorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MonitorCreateBulk is the builder for creating many Monitor entities in bulk.
type MonitorCreateBulk struct {
	config
	err      error
	builders []*MonitorCreate
	conflict []sql.ConflictOption
}

// Save creates the Monitor entities in the database.
func (mcb *MonitorCreateBulk) Save(ctx context.Context) ([]*Monitor, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Monitor, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MonitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MonitorCreateBulk) SaveX(ctx context.Context) []*Monitor {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MonitorCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MonitorCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Monitor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MonitorUpsert) {
//			SetManufacturer(v+v).
//		}).
//		Exec(ctx)
func (mcb *MonitorCreateBulk) OnConflict(opts ...sql.ConflictOption) *MonitorUpsertBulk {
	mcb.conflict = opts
	return &MonitorUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Monitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MonitorCreateBulk) OnConflictColumns(columns ...string) *MonitorUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MonitorUpsertBulk{
		create: mcb,
	}
}

// MonitorUpsertBulk is the builder for "upsert"-ing
// a bulk of Monitor nodes.
type MonitorUpsertBulk struct {
	create *MonitorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Monitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MonitorUpsertBulk) UpdateNewValues() *MonitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Monitor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MonitorUpsertBulk) Ignore() *MonitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MonitorUpsertBulk) DoNothing() *MonitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MonitorCreateBulk.OnConflict
// documentation for more info.
func (u *MonitorUpsertBulk) Update(set func(*MonitorUpsert)) *MonitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MonitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetManufacturer sets the "manufacturer" field.
func (u *MonitorUpsertBulk) SetManufacturer(v string) *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.SetManufacturer(v)
	})
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *MonitorUpsertBulk) UpdateManufacturer() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateManufacturer()
	})
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (u *MonitorUpsertBulk) ClearManufacturer() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearManufacturer()
	})
}

// SetModel sets the "model" field.
func (u *MonitorUpsertBulk) SetModel(v string) *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *MonitorUpsertBulk) UpdateModel() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *MonitorUpsertBulk) ClearModel() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearModel()
	})
}

// SetSerial sets the "serial" field.
func (u *MonitorUpsertBulk) SetSerial(v string) *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *MonitorUpsertBulk) UpdateSerial() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.UpdateSerial()
	})
}

// ClearSerial clears the value of the "serial" field.
func (u *MonitorUpsertBulk) ClearSerial() *MonitorUpsertBulk {
	return u.Update(func(s *MonitorUpsert) {
		s.ClearSerial()
	})
}

// Exec executes the query.
func (u *MonitorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the MonitorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for MonitorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MonitorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
