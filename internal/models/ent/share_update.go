// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/share"
)

// ShareUpdate is the builder for updating Share entities.
type ShareUpdate struct {
	config
	hooks     []Hook
	mutation  *ShareMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShareUpdate builder.
func (su *ShareUpdate) Where(ps ...predicate.Share) *ShareUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ShareUpdate) SetName(s string) *ShareUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ShareUpdate) SetNillableName(s *string) *ShareUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *ShareUpdate) SetDescription(s string) *ShareUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ShareUpdate) SetNillableDescription(s *string) *ShareUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetPath sets the "path" field.
func (su *ShareUpdate) SetPath(s string) *ShareUpdate {
	su.mutation.SetPath(s)
	return su
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (su *ShareUpdate) SetNillablePath(s *string) *ShareUpdate {
	if s != nil {
		su.SetPath(*s)
	}
	return su
}

// ClearPath clears the value of the "path" field.
func (su *ShareUpdate) ClearPath() *ShareUpdate {
	su.mutation.ClearPath()
	return su
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (su *ShareUpdate) SetOwnerID(id string) *ShareUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the Agent entity.
func (su *ShareUpdate) SetOwner(a *Agent) *ShareUpdate {
	return su.SetOwnerID(a.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (su *ShareUpdate) Mutation() *ShareMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (su *ShareUpdate) ClearOwner() *ShareUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShareUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShareUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShareUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShareUpdate) check() error {
	if su.mutation.OwnerCleared() && len(su.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Share.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ShareUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShareUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(share.Table, share.Columns, sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(share.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(share.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Path(); ok {
		_spec.SetField(share.FieldPath, field.TypeString, value)
	}
	if su.mutation.PathCleared() {
		_spec.ClearField(share.FieldPath, field.TypeString)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.OwnerTable,
			Columns: []string{share.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.OwnerTable,
			Columns: []string{share.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShareUpdateOne is the builder for updating a single Share entity.
type ShareUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShareMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (suo *ShareUpdateOne) SetName(s string) *ShareUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableName(s *string) *ShareUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *ShareUpdateOne) SetDescription(s string) *ShareUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableDescription(s *string) *ShareUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetPath sets the "path" field.
func (suo *ShareUpdateOne) SetPath(s string) *ShareUpdateOne {
	suo.mutation.SetPath(s)
	return suo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillablePath(s *string) *ShareUpdateOne {
	if s != nil {
		suo.SetPath(*s)
	}
	return suo
}

// ClearPath clears the value of the "path" field.
func (suo *ShareUpdateOne) ClearPath() *ShareUpdateOne {
	suo.mutation.ClearPath()
	return suo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (suo *ShareUpdateOne) SetOwnerID(id string) *ShareUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (suo *ShareUpdateOne) SetOwner(a *Agent) *ShareUpdateOne {
	return suo.SetOwnerID(a.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (suo *ShareUpdateOne) Mutation() *ShareMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (suo *ShareUpdateOne) ClearOwner() *ShareUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Where appends a list predicates to the ShareUpdate builder.
func (suo *ShareUpdateOne) Where(ps ...predicate.Share) *ShareUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShareUpdateOne) Select(field string, fields ...string) *ShareUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Share entity.
func (suo *ShareUpdateOne) Save(ctx context.Context) (*Share, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShareUpdateOne) SaveX(ctx context.Context) *Share {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShareUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShareUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShareUpdateOne) check() error {
	if suo.mutation.OwnerCleared() && len(suo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Share.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ShareUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShareUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ShareUpdateOne) sqlSave(ctx context.Context) (_node *Share, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(share.Table, share.Columns, sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "Share.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, share.FieldID)
		for _, f := range fields {
			if !share.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != share.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(share.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(share.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Path(); ok {
		_spec.SetField(share.FieldPath, field.TypeString, value)
	}
	if suo.mutation.PathCleared() {
		_spec.ClearField(share.FieldPath, field.TypeString)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.OwnerTable,
			Columns: []string{share.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.OwnerTable,
			Columns: []string{share.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Share{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
