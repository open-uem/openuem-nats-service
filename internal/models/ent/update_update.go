// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/update"
)

// UpdateUpdate is the builder for updating Update entities.
type UpdateUpdate struct {
	config
	hooks     []Hook
	mutation  *UpdateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UpdateUpdate builder.
func (uu *UpdateUpdate) Where(ps ...predicate.Update) *UpdateUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetTitle sets the "title" field.
func (uu *UpdateUpdate) SetTitle(s string) *UpdateUpdate {
	uu.mutation.SetTitle(s)
	return uu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uu *UpdateUpdate) SetNillableTitle(s *string) *UpdateUpdate {
	if s != nil {
		uu.SetTitle(*s)
	}
	return uu
}

// SetDate sets the "date" field.
func (uu *UpdateUpdate) SetDate(t time.Time) *UpdateUpdate {
	uu.mutation.SetDate(t)
	return uu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (uu *UpdateUpdate) SetNillableDate(t *time.Time) *UpdateUpdate {
	if t != nil {
		uu.SetDate(*t)
	}
	return uu
}

// SetSupportURL sets the "support_url" field.
func (uu *UpdateUpdate) SetSupportURL(s string) *UpdateUpdate {
	uu.mutation.SetSupportURL(s)
	return uu
}

// SetNillableSupportURL sets the "support_url" field if the given value is not nil.
func (uu *UpdateUpdate) SetNillableSupportURL(s *string) *UpdateUpdate {
	if s != nil {
		uu.SetSupportURL(*s)
	}
	return uu
}

// ClearSupportURL clears the value of the "support_url" field.
func (uu *UpdateUpdate) ClearSupportURL() *UpdateUpdate {
	uu.mutation.ClearSupportURL()
	return uu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (uu *UpdateUpdate) SetOwnerID(id string) *UpdateUpdate {
	uu.mutation.SetOwnerID(id)
	return uu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (uu *UpdateUpdate) SetOwner(a *Agent) *UpdateUpdate {
	return uu.SetOwnerID(a.ID)
}

// Mutation returns the UpdateMutation object of the builder.
func (uu *UpdateUpdate) Mutation() *UpdateMutation {
	return uu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (uu *UpdateUpdate) ClearOwner() *UpdateUpdate {
	uu.mutation.ClearOwner()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UpdateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UpdateUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UpdateUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UpdateUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UpdateUpdate) check() error {
	if uu.mutation.OwnerCleared() && len(uu.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Update.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UpdateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpdateUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UpdateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(update.Table, update.Columns, sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Title(); ok {
		_spec.SetField(update.FieldTitle, field.TypeString, value)
	}
	if value, ok := uu.mutation.Date(); ok {
		_spec.SetField(update.FieldDate, field.TypeTime, value)
	}
	if value, ok := uu.mutation.SupportURL(); ok {
		_spec.SetField(update.FieldSupportURL, field.TypeString, value)
	}
	if uu.mutation.SupportURLCleared() {
		_spec.ClearField(update.FieldSupportURL, field.TypeString)
	}
	if uu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   update.OwnerTable,
			Columns: []string{update.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   update.OwnerTable,
			Columns: []string{update.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{update.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UpdateUpdateOne is the builder for updating a single Update entity.
type UpdateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UpdateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (uuo *UpdateUpdateOne) SetTitle(s string) *UpdateUpdateOne {
	uuo.mutation.SetTitle(s)
	return uuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uuo *UpdateUpdateOne) SetNillableTitle(s *string) *UpdateUpdateOne {
	if s != nil {
		uuo.SetTitle(*s)
	}
	return uuo
}

// SetDate sets the "date" field.
func (uuo *UpdateUpdateOne) SetDate(t time.Time) *UpdateUpdateOne {
	uuo.mutation.SetDate(t)
	return uuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (uuo *UpdateUpdateOne) SetNillableDate(t *time.Time) *UpdateUpdateOne {
	if t != nil {
		uuo.SetDate(*t)
	}
	return uuo
}

// SetSupportURL sets the "support_url" field.
func (uuo *UpdateUpdateOne) SetSupportURL(s string) *UpdateUpdateOne {
	uuo.mutation.SetSupportURL(s)
	return uuo
}

// SetNillableSupportURL sets the "support_url" field if the given value is not nil.
func (uuo *UpdateUpdateOne) SetNillableSupportURL(s *string) *UpdateUpdateOne {
	if s != nil {
		uuo.SetSupportURL(*s)
	}
	return uuo
}

// ClearSupportURL clears the value of the "support_url" field.
func (uuo *UpdateUpdateOne) ClearSupportURL() *UpdateUpdateOne {
	uuo.mutation.ClearSupportURL()
	return uuo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (uuo *UpdateUpdateOne) SetOwnerID(id string) *UpdateUpdateOne {
	uuo.mutation.SetOwnerID(id)
	return uuo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (uuo *UpdateUpdateOne) SetOwner(a *Agent) *UpdateUpdateOne {
	return uuo.SetOwnerID(a.ID)
}

// Mutation returns the UpdateMutation object of the builder.
func (uuo *UpdateUpdateOne) Mutation() *UpdateMutation {
	return uuo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (uuo *UpdateUpdateOne) ClearOwner() *UpdateUpdateOne {
	uuo.mutation.ClearOwner()
	return uuo
}

// Where appends a list predicates to the UpdateUpdate builder.
func (uuo *UpdateUpdateOne) Where(ps ...predicate.Update) *UpdateUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UpdateUpdateOne) Select(field string, fields ...string) *UpdateUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Update entity.
func (uuo *UpdateUpdateOne) Save(ctx context.Context) (*Update, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UpdateUpdateOne) SaveX(ctx context.Context) *Update {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UpdateUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UpdateUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UpdateUpdateOne) check() error {
	if uuo.mutation.OwnerCleared() && len(uuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Update.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UpdateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UpdateUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UpdateUpdateOne) sqlSave(ctx context.Context) (_node *Update, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(update.Table, update.Columns, sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "Update.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, update.FieldID)
		for _, f := range fields {
			if !update.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != update.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Title(); ok {
		_spec.SetField(update.FieldTitle, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Date(); ok {
		_spec.SetField(update.FieldDate, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.SupportURL(); ok {
		_spec.SetField(update.FieldSupportURL, field.TypeString, value)
	}
	if uuo.mutation.SupportURLCleared() {
		_spec.ClearField(update.FieldSupportURL, field.TypeString)
	}
	if uuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   update.OwnerTable,
			Columns: []string{update.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   update.OwnerTable,
			Columns: []string{update.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &Update{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{update.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
