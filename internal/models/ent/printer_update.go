// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/printer"
)

// PrinterUpdate is the builder for updating Printer entities.
type PrinterUpdate struct {
	config
	hooks     []Hook
	mutation  *PrinterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PrinterUpdate builder.
func (pu *PrinterUpdate) Where(ps ...predicate.Printer) *PrinterUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PrinterUpdate) SetName(s string) *PrinterUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableName(s *string) *PrinterUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetPort sets the "port" field.
func (pu *PrinterUpdate) SetPort(s string) *PrinterUpdate {
	pu.mutation.SetPort(s)
	return pu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillablePort(s *string) *PrinterUpdate {
	if s != nil {
		pu.SetPort(*s)
	}
	return pu
}

// ClearPort clears the value of the "port" field.
func (pu *PrinterUpdate) ClearPort() *PrinterUpdate {
	pu.mutation.ClearPort()
	return pu
}

// SetIsDefault sets the "is_default" field.
func (pu *PrinterUpdate) SetIsDefault(b bool) *PrinterUpdate {
	pu.mutation.SetIsDefault(b)
	return pu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableIsDefault(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetIsDefault(*b)
	}
	return pu
}

// ClearIsDefault clears the value of the "is_default" field.
func (pu *PrinterUpdate) ClearIsDefault() *PrinterUpdate {
	pu.mutation.ClearIsDefault()
	return pu
}

// SetIsNetwork sets the "is_network" field.
func (pu *PrinterUpdate) SetIsNetwork(b bool) *PrinterUpdate {
	pu.mutation.SetIsNetwork(b)
	return pu
}

// SetNillableIsNetwork sets the "is_network" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableIsNetwork(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetIsNetwork(*b)
	}
	return pu
}

// ClearIsNetwork clears the value of the "is_network" field.
func (pu *PrinterUpdate) ClearIsNetwork() *PrinterUpdate {
	pu.mutation.ClearIsNetwork()
	return pu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (pu *PrinterUpdate) SetOwnerID(id string) *PrinterUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (pu *PrinterUpdate) SetOwner(a *Agent) *PrinterUpdate {
	return pu.SetOwnerID(a.ID)
}

// Mutation returns the PrinterMutation object of the builder.
func (pu *PrinterUpdate) Mutation() *PrinterMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (pu *PrinterUpdate) ClearOwner() *PrinterUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrinterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrinterUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrinterUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrinterUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrinterUpdate) check() error {
	if pu.mutation.OwnerCleared() && len(pu.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Printer.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PrinterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PrinterUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PrinterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(printer.Table, printer.Columns, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Port(); ok {
		_spec.SetField(printer.FieldPort, field.TypeString, value)
	}
	if pu.mutation.PortCleared() {
		_spec.ClearField(printer.FieldPort, field.TypeString)
	}
	if value, ok := pu.mutation.IsDefault(); ok {
		_spec.SetField(printer.FieldIsDefault, field.TypeBool, value)
	}
	if pu.mutation.IsDefaultCleared() {
		_spec.ClearField(printer.FieldIsDefault, field.TypeBool)
	}
	if value, ok := pu.mutation.IsNetwork(); ok {
		_spec.SetField(printer.FieldIsNetwork, field.TypeBool, value)
	}
	if pu.mutation.IsNetworkCleared() {
		_spec.ClearField(printer.FieldIsNetwork, field.TypeBool)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.OwnerTable,
			Columns: []string{printer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.OwnerTable,
			Columns: []string{printer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrinterUpdateOne is the builder for updating a single Printer entity.
type PrinterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PrinterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (puo *PrinterUpdateOne) SetName(s string) *PrinterUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableName(s *string) *PrinterUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetPort sets the "port" field.
func (puo *PrinterUpdateOne) SetPort(s string) *PrinterUpdateOne {
	puo.mutation.SetPort(s)
	return puo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillablePort(s *string) *PrinterUpdateOne {
	if s != nil {
		puo.SetPort(*s)
	}
	return puo
}

// ClearPort clears the value of the "port" field.
func (puo *PrinterUpdateOne) ClearPort() *PrinterUpdateOne {
	puo.mutation.ClearPort()
	return puo
}

// SetIsDefault sets the "is_default" field.
func (puo *PrinterUpdateOne) SetIsDefault(b bool) *PrinterUpdateOne {
	puo.mutation.SetIsDefault(b)
	return puo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableIsDefault(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetIsDefault(*b)
	}
	return puo
}

// ClearIsDefault clears the value of the "is_default" field.
func (puo *PrinterUpdateOne) ClearIsDefault() *PrinterUpdateOne {
	puo.mutation.ClearIsDefault()
	return puo
}

// SetIsNetwork sets the "is_network" field.
func (puo *PrinterUpdateOne) SetIsNetwork(b bool) *PrinterUpdateOne {
	puo.mutation.SetIsNetwork(b)
	return puo
}

// SetNillableIsNetwork sets the "is_network" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableIsNetwork(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetIsNetwork(*b)
	}
	return puo
}

// ClearIsNetwork clears the value of the "is_network" field.
func (puo *PrinterUpdateOne) ClearIsNetwork() *PrinterUpdateOne {
	puo.mutation.ClearIsNetwork()
	return puo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (puo *PrinterUpdateOne) SetOwnerID(id string) *PrinterUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (puo *PrinterUpdateOne) SetOwner(a *Agent) *PrinterUpdateOne {
	return puo.SetOwnerID(a.ID)
}

// Mutation returns the PrinterMutation object of the builder.
func (puo *PrinterUpdateOne) Mutation() *PrinterMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (puo *PrinterUpdateOne) ClearOwner() *PrinterUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Where appends a list predicates to the PrinterUpdate builder.
func (puo *PrinterUpdateOne) Where(ps ...predicate.Printer) *PrinterUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrinterUpdateOne) Select(field string, fields ...string) *PrinterUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Printer entity.
func (puo *PrinterUpdateOne) Save(ctx context.Context) (*Printer, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrinterUpdateOne) SaveX(ctx context.Context) *Printer {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrinterUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrinterUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrinterUpdateOne) check() error {
	if puo.mutation.OwnerCleared() && len(puo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "Printer.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PrinterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PrinterUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PrinterUpdateOne) sqlSave(ctx context.Context) (_node *Printer, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(printer.Table, printer.Columns, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "Printer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printer.FieldID)
		for _, f := range fields {
			if !printer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != printer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Port(); ok {
		_spec.SetField(printer.FieldPort, field.TypeString, value)
	}
	if puo.mutation.PortCleared() {
		_spec.ClearField(printer.FieldPort, field.TypeString)
	}
	if value, ok := puo.mutation.IsDefault(); ok {
		_spec.SetField(printer.FieldIsDefault, field.TypeBool, value)
	}
	if puo.mutation.IsDefaultCleared() {
		_spec.ClearField(printer.FieldIsDefault, field.TypeBool)
	}
	if value, ok := puo.mutation.IsNetwork(); ok {
		_spec.SetField(printer.FieldIsNetwork, field.TypeBool, value)
	}
	if puo.mutation.IsNetworkCleared() {
		_spec.ClearField(printer.FieldIsNetwork, field.TypeBool)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.OwnerTable,
			Columns: []string{printer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.OwnerTable,
			Columns: []string{printer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Printer{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
