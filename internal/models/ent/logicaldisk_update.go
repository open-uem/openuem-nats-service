// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/logicaldisk"
	"github.com/doncicuto/openuem_ent/predicate"
)

// LogicalDiskUpdate is the builder for updating LogicalDisk entities.
type LogicalDiskUpdate struct {
	config
	hooks     []Hook
	mutation  *LogicalDiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LogicalDiskUpdate builder.
func (ldu *LogicalDiskUpdate) Where(ps ...predicate.LogicalDisk) *LogicalDiskUpdate {
	ldu.mutation.Where(ps...)
	return ldu
}

// SetLabel sets the "label" field.
func (ldu *LogicalDiskUpdate) SetLabel(s string) *LogicalDiskUpdate {
	ldu.mutation.SetLabel(s)
	return ldu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableLabel(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetLabel(*s)
	}
	return ldu
}

// SetFilesystem sets the "filesystem" field.
func (ldu *LogicalDiskUpdate) SetFilesystem(s string) *LogicalDiskUpdate {
	ldu.mutation.SetFilesystem(s)
	return ldu
}

// SetNillableFilesystem sets the "filesystem" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableFilesystem(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetFilesystem(*s)
	}
	return ldu
}

// ClearFilesystem clears the value of the "filesystem" field.
func (ldu *LogicalDiskUpdate) ClearFilesystem() *LogicalDiskUpdate {
	ldu.mutation.ClearFilesystem()
	return ldu
}

// SetUsage sets the "usage" field.
func (ldu *LogicalDiskUpdate) SetUsage(i int8) *LogicalDiskUpdate {
	ldu.mutation.ResetUsage()
	ldu.mutation.SetUsage(i)
	return ldu
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableUsage(i *int8) *LogicalDiskUpdate {
	if i != nil {
		ldu.SetUsage(*i)
	}
	return ldu
}

// AddUsage adds i to the "usage" field.
func (ldu *LogicalDiskUpdate) AddUsage(i int8) *LogicalDiskUpdate {
	ldu.mutation.AddUsage(i)
	return ldu
}

// SetSizeInUnits sets the "size_in_units" field.
func (ldu *LogicalDiskUpdate) SetSizeInUnits(s string) *LogicalDiskUpdate {
	ldu.mutation.SetSizeInUnits(s)
	return ldu
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableSizeInUnits(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetSizeInUnits(*s)
	}
	return ldu
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (ldu *LogicalDiskUpdate) ClearSizeInUnits() *LogicalDiskUpdate {
	ldu.mutation.ClearSizeInUnits()
	return ldu
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (ldu *LogicalDiskUpdate) SetRemainingSpaceInUnits(s string) *LogicalDiskUpdate {
	ldu.mutation.SetRemainingSpaceInUnits(s)
	return ldu
}

// SetNillableRemainingSpaceInUnits sets the "remaining_space_in_units" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableRemainingSpaceInUnits(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetRemainingSpaceInUnits(*s)
	}
	return ldu
}

// ClearRemainingSpaceInUnits clears the value of the "remaining_space_in_units" field.
func (ldu *LogicalDiskUpdate) ClearRemainingSpaceInUnits() *LogicalDiskUpdate {
	ldu.mutation.ClearRemainingSpaceInUnits()
	return ldu
}

// SetVolumeName sets the "volume_name" field.
func (ldu *LogicalDiskUpdate) SetVolumeName(s string) *LogicalDiskUpdate {
	ldu.mutation.SetVolumeName(s)
	return ldu
}

// SetNillableVolumeName sets the "volume_name" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableVolumeName(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetVolumeName(*s)
	}
	return ldu
}

// ClearVolumeName clears the value of the "volume_name" field.
func (ldu *LogicalDiskUpdate) ClearVolumeName() *LogicalDiskUpdate {
	ldu.mutation.ClearVolumeName()
	return ldu
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (ldu *LogicalDiskUpdate) SetBitlockerStatus(s string) *LogicalDiskUpdate {
	ldu.mutation.SetBitlockerStatus(s)
	return ldu
}

// SetNillableBitlockerStatus sets the "bitlocker_status" field if the given value is not nil.
func (ldu *LogicalDiskUpdate) SetNillableBitlockerStatus(s *string) *LogicalDiskUpdate {
	if s != nil {
		ldu.SetBitlockerStatus(*s)
	}
	return ldu
}

// ClearBitlockerStatus clears the value of the "bitlocker_status" field.
func (ldu *LogicalDiskUpdate) ClearBitlockerStatus() *LogicalDiskUpdate {
	ldu.mutation.ClearBitlockerStatus()
	return ldu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (ldu *LogicalDiskUpdate) SetOwnerID(id string) *LogicalDiskUpdate {
	ldu.mutation.SetOwnerID(id)
	return ldu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (ldu *LogicalDiskUpdate) SetOwner(a *Agent) *LogicalDiskUpdate {
	return ldu.SetOwnerID(a.ID)
}

// Mutation returns the LogicalDiskMutation object of the builder.
func (ldu *LogicalDiskUpdate) Mutation() *LogicalDiskMutation {
	return ldu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (ldu *LogicalDiskUpdate) ClearOwner() *LogicalDiskUpdate {
	ldu.mutation.ClearOwner()
	return ldu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ldu *LogicalDiskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ldu.sqlSave, ldu.mutation, ldu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ldu *LogicalDiskUpdate) SaveX(ctx context.Context) int {
	affected, err := ldu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ldu *LogicalDiskUpdate) Exec(ctx context.Context) error {
	_, err := ldu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldu *LogicalDiskUpdate) ExecX(ctx context.Context) {
	if err := ldu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ldu *LogicalDiskUpdate) check() error {
	if ldu.mutation.OwnerCleared() && len(ldu.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "LogicalDisk.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ldu *LogicalDiskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogicalDiskUpdate {
	ldu.modifiers = append(ldu.modifiers, modifiers...)
	return ldu
}

func (ldu *LogicalDiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ldu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(logicaldisk.Table, logicaldisk.Columns, sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt))
	if ps := ldu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ldu.mutation.Label(); ok {
		_spec.SetField(logicaldisk.FieldLabel, field.TypeString, value)
	}
	if value, ok := ldu.mutation.Filesystem(); ok {
		_spec.SetField(logicaldisk.FieldFilesystem, field.TypeString, value)
	}
	if ldu.mutation.FilesystemCleared() {
		_spec.ClearField(logicaldisk.FieldFilesystem, field.TypeString)
	}
	if value, ok := ldu.mutation.Usage(); ok {
		_spec.SetField(logicaldisk.FieldUsage, field.TypeInt8, value)
	}
	if value, ok := ldu.mutation.AddedUsage(); ok {
		_spec.AddField(logicaldisk.FieldUsage, field.TypeInt8, value)
	}
	if value, ok := ldu.mutation.SizeInUnits(); ok {
		_spec.SetField(logicaldisk.FieldSizeInUnits, field.TypeString, value)
	}
	if ldu.mutation.SizeInUnitsCleared() {
		_spec.ClearField(logicaldisk.FieldSizeInUnits, field.TypeString)
	}
	if value, ok := ldu.mutation.RemainingSpaceInUnits(); ok {
		_spec.SetField(logicaldisk.FieldRemainingSpaceInUnits, field.TypeString, value)
	}
	if ldu.mutation.RemainingSpaceInUnitsCleared() {
		_spec.ClearField(logicaldisk.FieldRemainingSpaceInUnits, field.TypeString)
	}
	if value, ok := ldu.mutation.VolumeName(); ok {
		_spec.SetField(logicaldisk.FieldVolumeName, field.TypeString, value)
	}
	if ldu.mutation.VolumeNameCleared() {
		_spec.ClearField(logicaldisk.FieldVolumeName, field.TypeString)
	}
	if value, ok := ldu.mutation.BitlockerStatus(); ok {
		_spec.SetField(logicaldisk.FieldBitlockerStatus, field.TypeString, value)
	}
	if ldu.mutation.BitlockerStatusCleared() {
		_spec.ClearField(logicaldisk.FieldBitlockerStatus, field.TypeString)
	}
	if ldu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logicaldisk.OwnerTable,
			Columns: []string{logicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ldu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logicaldisk.OwnerTable,
			Columns: []string{logicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ldu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ldu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logicaldisk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ldu.mutation.done = true
	return n, nil
}

// LogicalDiskUpdateOne is the builder for updating a single LogicalDisk entity.
type LogicalDiskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LogicalDiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLabel sets the "label" field.
func (lduo *LogicalDiskUpdateOne) SetLabel(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetLabel(s)
	return lduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableLabel(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetLabel(*s)
	}
	return lduo
}

// SetFilesystem sets the "filesystem" field.
func (lduo *LogicalDiskUpdateOne) SetFilesystem(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetFilesystem(s)
	return lduo
}

// SetNillableFilesystem sets the "filesystem" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableFilesystem(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetFilesystem(*s)
	}
	return lduo
}

// ClearFilesystem clears the value of the "filesystem" field.
func (lduo *LogicalDiskUpdateOne) ClearFilesystem() *LogicalDiskUpdateOne {
	lduo.mutation.ClearFilesystem()
	return lduo
}

// SetUsage sets the "usage" field.
func (lduo *LogicalDiskUpdateOne) SetUsage(i int8) *LogicalDiskUpdateOne {
	lduo.mutation.ResetUsage()
	lduo.mutation.SetUsage(i)
	return lduo
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableUsage(i *int8) *LogicalDiskUpdateOne {
	if i != nil {
		lduo.SetUsage(*i)
	}
	return lduo
}

// AddUsage adds i to the "usage" field.
func (lduo *LogicalDiskUpdateOne) AddUsage(i int8) *LogicalDiskUpdateOne {
	lduo.mutation.AddUsage(i)
	return lduo
}

// SetSizeInUnits sets the "size_in_units" field.
func (lduo *LogicalDiskUpdateOne) SetSizeInUnits(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetSizeInUnits(s)
	return lduo
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableSizeInUnits(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetSizeInUnits(*s)
	}
	return lduo
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (lduo *LogicalDiskUpdateOne) ClearSizeInUnits() *LogicalDiskUpdateOne {
	lduo.mutation.ClearSizeInUnits()
	return lduo
}

// SetRemainingSpaceInUnits sets the "remaining_space_in_units" field.
func (lduo *LogicalDiskUpdateOne) SetRemainingSpaceInUnits(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetRemainingSpaceInUnits(s)
	return lduo
}

// SetNillableRemainingSpaceInUnits sets the "remaining_space_in_units" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableRemainingSpaceInUnits(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetRemainingSpaceInUnits(*s)
	}
	return lduo
}

// ClearRemainingSpaceInUnits clears the value of the "remaining_space_in_units" field.
func (lduo *LogicalDiskUpdateOne) ClearRemainingSpaceInUnits() *LogicalDiskUpdateOne {
	lduo.mutation.ClearRemainingSpaceInUnits()
	return lduo
}

// SetVolumeName sets the "volume_name" field.
func (lduo *LogicalDiskUpdateOne) SetVolumeName(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetVolumeName(s)
	return lduo
}

// SetNillableVolumeName sets the "volume_name" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableVolumeName(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetVolumeName(*s)
	}
	return lduo
}

// ClearVolumeName clears the value of the "volume_name" field.
func (lduo *LogicalDiskUpdateOne) ClearVolumeName() *LogicalDiskUpdateOne {
	lduo.mutation.ClearVolumeName()
	return lduo
}

// SetBitlockerStatus sets the "bitlocker_status" field.
func (lduo *LogicalDiskUpdateOne) SetBitlockerStatus(s string) *LogicalDiskUpdateOne {
	lduo.mutation.SetBitlockerStatus(s)
	return lduo
}

// SetNillableBitlockerStatus sets the "bitlocker_status" field if the given value is not nil.
func (lduo *LogicalDiskUpdateOne) SetNillableBitlockerStatus(s *string) *LogicalDiskUpdateOne {
	if s != nil {
		lduo.SetBitlockerStatus(*s)
	}
	return lduo
}

// ClearBitlockerStatus clears the value of the "bitlocker_status" field.
func (lduo *LogicalDiskUpdateOne) ClearBitlockerStatus() *LogicalDiskUpdateOne {
	lduo.mutation.ClearBitlockerStatus()
	return lduo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (lduo *LogicalDiskUpdateOne) SetOwnerID(id string) *LogicalDiskUpdateOne {
	lduo.mutation.SetOwnerID(id)
	return lduo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (lduo *LogicalDiskUpdateOne) SetOwner(a *Agent) *LogicalDiskUpdateOne {
	return lduo.SetOwnerID(a.ID)
}

// Mutation returns the LogicalDiskMutation object of the builder.
func (lduo *LogicalDiskUpdateOne) Mutation() *LogicalDiskMutation {
	return lduo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (lduo *LogicalDiskUpdateOne) ClearOwner() *LogicalDiskUpdateOne {
	lduo.mutation.ClearOwner()
	return lduo
}

// Where appends a list predicates to the LogicalDiskUpdate builder.
func (lduo *LogicalDiskUpdateOne) Where(ps ...predicate.LogicalDisk) *LogicalDiskUpdateOne {
	lduo.mutation.Where(ps...)
	return lduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lduo *LogicalDiskUpdateOne) Select(field string, fields ...string) *LogicalDiskUpdateOne {
	lduo.fields = append([]string{field}, fields...)
	return lduo
}

// Save executes the query and returns the updated LogicalDisk entity.
func (lduo *LogicalDiskUpdateOne) Save(ctx context.Context) (*LogicalDisk, error) {
	return withHooks(ctx, lduo.sqlSave, lduo.mutation, lduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lduo *LogicalDiskUpdateOne) SaveX(ctx context.Context) *LogicalDisk {
	node, err := lduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lduo *LogicalDiskUpdateOne) Exec(ctx context.Context) error {
	_, err := lduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lduo *LogicalDiskUpdateOne) ExecX(ctx context.Context) {
	if err := lduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lduo *LogicalDiskUpdateOne) check() error {
	if lduo.mutation.OwnerCleared() && len(lduo.mutation.OwnerIDs()) > 0 {
		return errors.New(`openuem_ent: clearing a required unique edge "LogicalDisk.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lduo *LogicalDiskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogicalDiskUpdateOne {
	lduo.modifiers = append(lduo.modifiers, modifiers...)
	return lduo
}

func (lduo *LogicalDiskUpdateOne) sqlSave(ctx context.Context) (_node *LogicalDisk, err error) {
	if err := lduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logicaldisk.Table, logicaldisk.Columns, sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt))
	id, ok := lduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "LogicalDisk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logicaldisk.FieldID)
		for _, f := range fields {
			if !logicaldisk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != logicaldisk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lduo.mutation.Label(); ok {
		_spec.SetField(logicaldisk.FieldLabel, field.TypeString, value)
	}
	if value, ok := lduo.mutation.Filesystem(); ok {
		_spec.SetField(logicaldisk.FieldFilesystem, field.TypeString, value)
	}
	if lduo.mutation.FilesystemCleared() {
		_spec.ClearField(logicaldisk.FieldFilesystem, field.TypeString)
	}
	if value, ok := lduo.mutation.Usage(); ok {
		_spec.SetField(logicaldisk.FieldUsage, field.TypeInt8, value)
	}
	if value, ok := lduo.mutation.AddedUsage(); ok {
		_spec.AddField(logicaldisk.FieldUsage, field.TypeInt8, value)
	}
	if value, ok := lduo.mutation.SizeInUnits(); ok {
		_spec.SetField(logicaldisk.FieldSizeInUnits, field.TypeString, value)
	}
	if lduo.mutation.SizeInUnitsCleared() {
		_spec.ClearField(logicaldisk.FieldSizeInUnits, field.TypeString)
	}
	if value, ok := lduo.mutation.RemainingSpaceInUnits(); ok {
		_spec.SetField(logicaldisk.FieldRemainingSpaceInUnits, field.TypeString, value)
	}
	if lduo.mutation.RemainingSpaceInUnitsCleared() {
		_spec.ClearField(logicaldisk.FieldRemainingSpaceInUnits, field.TypeString)
	}
	if value, ok := lduo.mutation.VolumeName(); ok {
		_spec.SetField(logicaldisk.FieldVolumeName, field.TypeString, value)
	}
	if lduo.mutation.VolumeNameCleared() {
		_spec.ClearField(logicaldisk.FieldVolumeName, field.TypeString)
	}
	if value, ok := lduo.mutation.BitlockerStatus(); ok {
		_spec.SetField(logicaldisk.FieldBitlockerStatus, field.TypeString, value)
	}
	if lduo.mutation.BitlockerStatusCleared() {
		_spec.ClearField(logicaldisk.FieldBitlockerStatus, field.TypeString)
	}
	if lduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logicaldisk.OwnerTable,
			Columns: []string{logicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logicaldisk.OwnerTable,
			Columns: []string{logicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lduo.modifiers...)
	_node = &LogicalDisk{config: lduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logicaldisk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lduo.mutation.done = true
	return _node, nil
}
