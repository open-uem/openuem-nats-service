// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/sessions"
	"github.com/doncicuto/openuem_ent/user"
)

// Sessions is the model entity for the Sessions schema.
type Sessions struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionsQuery when eager-loading is set.
	Edges         SessionsEdges `json:"edges"`
	user_sessions *string
	selectValues  sql.SelectValues
}

// SessionsEdges holds the relations/edges for other nodes in the graph.
type SessionsEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionsEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sessions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessions.FieldData:
			values[i] = new([]byte)
		case sessions.FieldID:
			values[i] = new(sql.NullString)
		case sessions.FieldExpiry:
			values[i] = new(sql.NullTime)
		case sessions.ForeignKeys[0]: // user_sessions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sessions fields.
func (s *Sessions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessions.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case sessions.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				s.Data = *value
			}
		case sessions.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				s.Expiry = value.Time
			}
		case sessions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_sessions", values[i])
			} else if value.Valid {
				s.user_sessions = new(string)
				*s.user_sessions = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sessions.
// This includes values selected through modifiers, order, etc.
func (s *Sessions) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Sessions entity.
func (s *Sessions) QueryOwner() *UserQuery {
	return NewSessionsClient(s.config).QueryOwner(s)
}

// Update returns a builder for updating this Sessions.
// Note that you need to call Sessions.Unwrap() before calling this method if this Sessions
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sessions) Update() *SessionsUpdateOne {
	return NewSessionsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sessions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sessions) Unwrap() *Sessions {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: Sessions is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sessions) String() string {
	var builder strings.Builder
	builder.WriteString("Sessions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", s.Data))
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(s.Expiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SessionsSlice is a parsable slice of Sessions.
type SessionsSlice []*Sessions
