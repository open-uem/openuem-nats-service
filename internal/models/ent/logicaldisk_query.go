// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/logicaldisk"
	"github.com/doncicuto/openuem_ent/predicate"
)

// LogicalDiskQuery is the builder for querying LogicalDisk entities.
type LogicalDiskQuery struct {
	config
	ctx        *QueryContext
	order      []logicaldisk.OrderOption
	inters     []Interceptor
	predicates []predicate.LogicalDisk
	withOwner  *AgentQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LogicalDiskQuery builder.
func (ldq *LogicalDiskQuery) Where(ps ...predicate.LogicalDisk) *LogicalDiskQuery {
	ldq.predicates = append(ldq.predicates, ps...)
	return ldq
}

// Limit the number of records to be returned by this query.
func (ldq *LogicalDiskQuery) Limit(limit int) *LogicalDiskQuery {
	ldq.ctx.Limit = &limit
	return ldq
}

// Offset to start from.
func (ldq *LogicalDiskQuery) Offset(offset int) *LogicalDiskQuery {
	ldq.ctx.Offset = &offset
	return ldq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ldq *LogicalDiskQuery) Unique(unique bool) *LogicalDiskQuery {
	ldq.ctx.Unique = &unique
	return ldq
}

// Order specifies how the records should be ordered.
func (ldq *LogicalDiskQuery) Order(o ...logicaldisk.OrderOption) *LogicalDiskQuery {
	ldq.order = append(ldq.order, o...)
	return ldq
}

// QueryOwner chains the current query on the "owner" edge.
func (ldq *LogicalDiskQuery) QueryOwner() *AgentQuery {
	query := (&AgentClient{config: ldq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ldq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ldq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(logicaldisk.Table, logicaldisk.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, logicaldisk.OwnerTable, logicaldisk.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ldq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LogicalDisk entity from the query.
// Returns a *NotFoundError when no LogicalDisk was found.
func (ldq *LogicalDiskQuery) First(ctx context.Context) (*LogicalDisk, error) {
	nodes, err := ldq.Limit(1).All(setContextOp(ctx, ldq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{logicaldisk.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ldq *LogicalDiskQuery) FirstX(ctx context.Context) *LogicalDisk {
	node, err := ldq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LogicalDisk ID from the query.
// Returns a *NotFoundError when no LogicalDisk ID was found.
func (ldq *LogicalDiskQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ldq.Limit(1).IDs(setContextOp(ctx, ldq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{logicaldisk.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ldq *LogicalDiskQuery) FirstIDX(ctx context.Context) int {
	id, err := ldq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LogicalDisk entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LogicalDisk entity is found.
// Returns a *NotFoundError when no LogicalDisk entities are found.
func (ldq *LogicalDiskQuery) Only(ctx context.Context) (*LogicalDisk, error) {
	nodes, err := ldq.Limit(2).All(setContextOp(ctx, ldq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{logicaldisk.Label}
	default:
		return nil, &NotSingularError{logicaldisk.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ldq *LogicalDiskQuery) OnlyX(ctx context.Context) *LogicalDisk {
	node, err := ldq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LogicalDisk ID in the query.
// Returns a *NotSingularError when more than one LogicalDisk ID is found.
// Returns a *NotFoundError when no entities are found.
func (ldq *LogicalDiskQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ldq.Limit(2).IDs(setContextOp(ctx, ldq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{logicaldisk.Label}
	default:
		err = &NotSingularError{logicaldisk.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ldq *LogicalDiskQuery) OnlyIDX(ctx context.Context) int {
	id, err := ldq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LogicalDisks.
func (ldq *LogicalDiskQuery) All(ctx context.Context) ([]*LogicalDisk, error) {
	ctx = setContextOp(ctx, ldq.ctx, ent.OpQueryAll)
	if err := ldq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LogicalDisk, *LogicalDiskQuery]()
	return withInterceptors[[]*LogicalDisk](ctx, ldq, qr, ldq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ldq *LogicalDiskQuery) AllX(ctx context.Context) []*LogicalDisk {
	nodes, err := ldq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LogicalDisk IDs.
func (ldq *LogicalDiskQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ldq.ctx.Unique == nil && ldq.path != nil {
		ldq.Unique(true)
	}
	ctx = setContextOp(ctx, ldq.ctx, ent.OpQueryIDs)
	if err = ldq.Select(logicaldisk.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ldq *LogicalDiskQuery) IDsX(ctx context.Context) []int {
	ids, err := ldq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ldq *LogicalDiskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ldq.ctx, ent.OpQueryCount)
	if err := ldq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ldq, querierCount[*LogicalDiskQuery](), ldq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ldq *LogicalDiskQuery) CountX(ctx context.Context) int {
	count, err := ldq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ldq *LogicalDiskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ldq.ctx, ent.OpQueryExist)
	switch _, err := ldq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("openuem_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ldq *LogicalDiskQuery) ExistX(ctx context.Context) bool {
	exist, err := ldq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LogicalDiskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ldq *LogicalDiskQuery) Clone() *LogicalDiskQuery {
	if ldq == nil {
		return nil
	}
	return &LogicalDiskQuery{
		config:     ldq.config,
		ctx:        ldq.ctx.Clone(),
		order:      append([]logicaldisk.OrderOption{}, ldq.order...),
		inters:     append([]Interceptor{}, ldq.inters...),
		predicates: append([]predicate.LogicalDisk{}, ldq.predicates...),
		withOwner:  ldq.withOwner.Clone(),
		// clone intermediate query.
		sql:       ldq.sql.Clone(),
		path:      ldq.path,
		modifiers: append([]func(*sql.Selector){}, ldq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (ldq *LogicalDiskQuery) WithOwner(opts ...func(*AgentQuery)) *LogicalDiskQuery {
	query := (&AgentClient{config: ldq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ldq.withOwner = query
	return ldq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LogicalDisk.Query().
//		GroupBy(logicaldisk.FieldLabel).
//		Aggregate(openuem_ent.Count()).
//		Scan(ctx, &v)
func (ldq *LogicalDiskQuery) GroupBy(field string, fields ...string) *LogicalDiskGroupBy {
	ldq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LogicalDiskGroupBy{build: ldq}
	grbuild.flds = &ldq.ctx.Fields
	grbuild.label = logicaldisk.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.LogicalDisk.Query().
//		Select(logicaldisk.FieldLabel).
//		Scan(ctx, &v)
func (ldq *LogicalDiskQuery) Select(fields ...string) *LogicalDiskSelect {
	ldq.ctx.Fields = append(ldq.ctx.Fields, fields...)
	sbuild := &LogicalDiskSelect{LogicalDiskQuery: ldq}
	sbuild.label = logicaldisk.Label
	sbuild.flds, sbuild.scan = &ldq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LogicalDiskSelect configured with the given aggregations.
func (ldq *LogicalDiskQuery) Aggregate(fns ...AggregateFunc) *LogicalDiskSelect {
	return ldq.Select().Aggregate(fns...)
}

func (ldq *LogicalDiskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ldq.inters {
		if inter == nil {
			return fmt.Errorf("openuem_ent: uninitialized interceptor (forgotten import openuem_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ldq); err != nil {
				return err
			}
		}
	}
	for _, f := range ldq.ctx.Fields {
		if !logicaldisk.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
		}
	}
	if ldq.path != nil {
		prev, err := ldq.path(ctx)
		if err != nil {
			return err
		}
		ldq.sql = prev
	}
	return nil
}

func (ldq *LogicalDiskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LogicalDisk, error) {
	var (
		nodes       = []*LogicalDisk{}
		withFKs     = ldq.withFKs
		_spec       = ldq.querySpec()
		loadedTypes = [1]bool{
			ldq.withOwner != nil,
		}
	)
	if ldq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, logicaldisk.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LogicalDisk).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LogicalDisk{config: ldq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ldq.modifiers) > 0 {
		_spec.Modifiers = ldq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ldq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ldq.withOwner; query != nil {
		if err := ldq.loadOwner(ctx, query, nodes, nil,
			func(n *LogicalDisk, e *Agent) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ldq *LogicalDiskQuery) loadOwner(ctx context.Context, query *AgentQuery, nodes []*LogicalDisk, init func(*LogicalDisk), assign func(*LogicalDisk, *Agent)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*LogicalDisk)
	for i := range nodes {
		if nodes[i].agent_logicaldisks == nil {
			continue
		}
		fk := *nodes[i].agent_logicaldisks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_logicaldisks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ldq *LogicalDiskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ldq.querySpec()
	if len(ldq.modifiers) > 0 {
		_spec.Modifiers = ldq.modifiers
	}
	_spec.Node.Columns = ldq.ctx.Fields
	if len(ldq.ctx.Fields) > 0 {
		_spec.Unique = ldq.ctx.Unique != nil && *ldq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ldq.driver, _spec)
}

func (ldq *LogicalDiskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(logicaldisk.Table, logicaldisk.Columns, sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt))
	_spec.From = ldq.sql
	if unique := ldq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ldq.path != nil {
		_spec.Unique = true
	}
	if fields := ldq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logicaldisk.FieldID)
		for i := range fields {
			if fields[i] != logicaldisk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ldq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ldq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ldq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ldq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ldq *LogicalDiskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ldq.driver.Dialect())
	t1 := builder.Table(logicaldisk.Table)
	columns := ldq.ctx.Fields
	if len(columns) == 0 {
		columns = logicaldisk.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ldq.sql != nil {
		selector = ldq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ldq.ctx.Unique != nil && *ldq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ldq.modifiers {
		m(selector)
	}
	for _, p := range ldq.predicates {
		p(selector)
	}
	for _, p := range ldq.order {
		p(selector)
	}
	if offset := ldq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ldq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ldq *LogicalDiskQuery) Modify(modifiers ...func(s *sql.Selector)) *LogicalDiskSelect {
	ldq.modifiers = append(ldq.modifiers, modifiers...)
	return ldq.Select()
}

// LogicalDiskGroupBy is the group-by builder for LogicalDisk entities.
type LogicalDiskGroupBy struct {
	selector
	build *LogicalDiskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ldgb *LogicalDiskGroupBy) Aggregate(fns ...AggregateFunc) *LogicalDiskGroupBy {
	ldgb.fns = append(ldgb.fns, fns...)
	return ldgb
}

// Scan applies the selector query and scans the result into the given value.
func (ldgb *LogicalDiskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ldgb.build.ctx, ent.OpQueryGroupBy)
	if err := ldgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LogicalDiskQuery, *LogicalDiskGroupBy](ctx, ldgb.build, ldgb, ldgb.build.inters, v)
}

func (ldgb *LogicalDiskGroupBy) sqlScan(ctx context.Context, root *LogicalDiskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ldgb.fns))
	for _, fn := range ldgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ldgb.flds)+len(ldgb.fns))
		for _, f := range *ldgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ldgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ldgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LogicalDiskSelect is the builder for selecting fields of LogicalDisk entities.
type LogicalDiskSelect struct {
	*LogicalDiskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lds *LogicalDiskSelect) Aggregate(fns ...AggregateFunc) *LogicalDiskSelect {
	lds.fns = append(lds.fns, fns...)
	return lds
}

// Scan applies the selector query and scans the result into the given value.
func (lds *LogicalDiskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lds.ctx, ent.OpQuerySelect)
	if err := lds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LogicalDiskQuery, *LogicalDiskSelect](ctx, lds.LogicalDiskQuery, lds, lds.inters, v)
}

func (lds *LogicalDiskSelect) sqlScan(ctx context.Context, root *LogicalDiskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lds.fns))
	for _, fn := range lds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lds *LogicalDiskSelect) Modify(modifiers ...func(s *sql.Selector)) *LogicalDiskSelect {
	lds.modifiers = append(lds.modifiers, modifiers...)
	return lds
}
